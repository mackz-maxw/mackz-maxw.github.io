<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Maxw的小站</title>
  
  <subtitle>Maxw学习记录</subtitle>
  <link href="https://mackz-maxw.github.io/atom.xml" rel="self"/>
  
  <link href="https://mackz-maxw.github.io/"/>
  <updated>2025-08-23T15:49:42.056Z</updated>
  <id>https://mackz-maxw.github.io/</id>
  
  <author>
    <name>Mackz-Maxw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作系统基础 | 5.2 进程管理详解</title>
    <link href="https://mackz-maxw.github.io/2025/08/23/oper_sys23%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <id>https://mackz-maxw.github.io/2025/08/23/oper_sys23%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E8%AF%A6%E8%A7%A3/</id>
    <published>2025-08-23T15:49:20.949Z</published>
    <updated>2025-08-23T15:49:42.056Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 5.1 进程管理简介</title>
    <link href="https://mackz-maxw.github.io/2025/08/20/oper_sys22%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>https://mackz-maxw.github.io/2025/08/20/oper_sys22%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</id>
    <published>2025-08-20T16:55:36.174Z</published>
    <updated>2025-08-23T15:48:55.714Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进程"><strong>进程</strong></h3><p>一个进程是一个正在执行中的程序（存储在某种介质上的目标代码）。然而，进程不仅仅只是执行的程序代码（在Unix中常称为文本段）。它们还包括一系列资源，例如打开的文件和待处理的信号、内核内部数据、处理器状态、包含一个或多个内存映射的内存地址空间、一个或多个执行线程，以及包含全局变量的数据段。实际上，进程是运行程序代码的动态产物。内核需要高效且透明地管理所有这些细节。</p><p>执行线程（通常简称为线程）是进程内部的活动对象。每个线程包含一个唯一的程序计数器、进程栈和一组处理器寄存器。内核调度的是单个线程，而不是进程。在传统的Unix系统中，每个进程由一个线程组成。然而，在现代系统中，由多个线程组成的多线程程序非常普遍。正如您后面将看到的，Linux对线程的实现很独特：它并不区分线程和进程。对 Linux而言，线程只是一种特殊的进程。</p><p>在现代操作系统上，进程提供了两种虚拟化：虚拟化处理器和虚拟内存。虚拟化处理器给进程一种假象，让它以为自己在独享系统，尽管处理器可能正与数百个其他进程共享。虚拟内存让进程可以分配和管理内存，就好像它独占了系统中的所有内存一样。</p><p>有趣的是，请注意线程共享虚拟内存抽象，而每个线程则拥有自己的虚拟化处理器。</p><p>程序本身并不是一个进程；进程是活动中的程序及其相关资源。实际上，可以存在两个或更多个执行同一程序的进程。事实上，也可以存在两个或更多共享各种资源（如打开的文件或地址空间）的进程。</p><p>毫不奇怪，进程在其创建时开始它的生命周期。在 Linux 中，这是通过<code>fork()</code>系统调用来完成的，该系统调用通过复制一个现有进程来创建一个新进程。调用<code>fork()</code>的进程是父进程，而新进程是子进程。父进程恢复执行，而子进程则在相同的地方开始执行：即从<code>fork()</code> 调用返回的地方。<code>fork()</code>系统调用从内核返回两次：一次在父进程中，一次在新生的子进程中。</p><p>通常，在 <code>fork()</code>之后立即需要执行一个新的、不同的程序。<code>exec()</code>系列函数调用会创建一个新的地址空间并将一个新的程序加载到其中。在当代的Linux 内核中，<code>fork()</code> 实际上是通过 <code>clone()</code>系统调用实现的，这将在后面讨论。</p><p>最后，程序通过 <code>exit()</code>系统调用退出。此函数终止进程并释放其所有资源。父进程可以通过<code>wait4()</code>¹系统调用查询已终止子进程的状态，该系统调用使一个进程能够等待特定进程的终止。当一个进程退出时，它会被置于一种特殊的<strong>僵尸(zombie)</strong> 状态，该状态表示已终止的进程，直到父进程调用<code>wait()</code> 或 <code>waitpid()</code>。</p><blockquote><p>¹ 内核实现了 <code>wait4()</code> 系统调用。Linux 系统通过 C库通常提供 <code>wait()</code>, <code>waitpid()</code>,<code>wait3()</code>, 和 <code>wait4()</code>函数。所有这些函数都返回关于已终止进程的状态信息，尽管语义略有不同。</p></blockquote><p><strong>注意</strong> 进程的另一个名称是<strong>任务(task)</strong>。Linux内核在内部将进程称为任务。在本书中，我会交替使用这两个术语，尽管当我说“任务”时，通常是从内核的角度来指代一个进程。</p><hr /><h3id="进程描述符和任务结构-task-structure"><strong>进程描述符和任务结构(Task Structure)</strong></h3><p>内核在一个称为<strong>任务列表 (task list)</strong>²的环形双向链表中存储进程列表。任务列表中的每个元素都是一个类型为<code>struct task_struct</code> 的进程描述符，该结构定义在<code>&lt;linux/sched.h&gt;</code>中。进程描述符包含了一个特定进程的所有信息。</p><p><code>task_struct</code> 是一个相对较大的数据结构，在 32 位机器上约为1.7千字节。然而，考虑到该结构包含了内核所拥有和需要的关于一个进程的所有信息，这个大小已经相当小了。进程描述符包含了描述正在执行的程序的数据——打开的文件、进程的地址空间、待处理的信号、进程的状态等等。</p><blockquote><p>² 一些操作系统设计文献称此列表为任务数组 (task array)。由于 Linux的实现是链表而非静态数组，因此在 Linux 中它被称为任务列表 (tasklist)。</p></blockquote><hr /><h3 id="分配进程描述符"><strong>分配进程描述符</strong></h3><p><code>task_struct</code> 结构通过 <strong>slab 分配器 (slaballocator)</strong> 进行分配，以提供对象重用和缓存着色。在 2.6系列内核之前，<code>struct task_struct</code>存储在每个进程的内核栈的末端。这使得像 x86这样寄存器数量较少的体系结构，可以通过栈指针计算进程描述符的位置，而无需使用额外的寄存器来存储该位置。由于现在进程描述符是通过slab 分配器动态创建的，因此引入了一个新的结构<code>struct thread_info</code>，该结构再次存在于栈的底部（对于向下增长的栈）或栈的顶部（对于向上增长的栈）³。参见图3.2。</p><blockquote><p>³ 创建 <code>struct thread_info</code>并不仅仅是因为寄存器受限的体系结构。新结构也使得在汇编代码中计算其值的偏移量变得相当容易。</p></blockquote><p><code>thread_info</code> 结构在 x86 上的<code>&lt;asm/thread_info.h&gt;</code> 中定义如下： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>    *<span class="title">task</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">exec_domain</span>    *<span class="title">exec_domain</span>;</span></span><br><span class="line">    __u32                 flags;</span><br><span class="line">    __u32                 status;</span><br><span class="line">    __u32                 cpu;</span><br><span class="line">    <span class="type">int</span>                   preempt_count;</span><br><span class="line">    <span class="type">mm_segment_t</span>          addr_limit;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">restart_block</span>  <span class="title">restart_block</span>;</span></span><br><span class="line">    <span class="type">void</span>                  *sysenter_return;</span><br><span class="line">    <span class="type">int</span>                   uaccess_err;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>(图 3.2 示意图说明)</strong> 进程内核栈栈起始处（向低地址方向增长） - 最高内存地址 - 栈指针 -<code>struct thread_struct</code> (进程的<code>struct task_struct</code>) - 最低内存地址,<code>current_thread_info()</code> <code>thread_info</code>包含一个指向进程描述符的指针</p><blockquote><p>栈的增长方向：x86 体系的栈是向下（向低地址方向）增长的。 - 栈底(Stack Base)：为了充分利用这块内存，栈被初始化为从这块分配区的最高地址(0x10000)开始。这个初始的栈指针位置就是栈底。它是栈的“起点”，但却是分配内存块的“末尾”。- 栈顶 (Stack Top)：随着函数调用、压入参数等操作，%esp寄存器的值会不断减小（向 0xE000 方向移动）。%esp当前指向的位置称为栈顶。它是栈的“当前操作端”，向低地址方向延伸。</p></blockquote><p>每个任务的 <code>thread_info</code> 结构都分配在其栈的末端。该结构的<code>task</code> 元素是一个指向任务实际 <code>task_struct</code>的指针。</p><hr /><h3 id="存储进程描述符"><strong>存储进程描述符</strong></h3><p>系统通过一个唯一的<strong>进程标识值 (process identificationvalue)</strong> 或 <strong>PID</strong> 来识别进程。PID是一个由不透明类型⁴ <code>pid_t</code> 表示的数值，通常是一个<code>int</code>。然而，为了与早期的 Unix 和 Linux版本向后兼容，默认最大值仅为 32,768（一个 <code>short int</code>的值），尽管可以选择将该值增加到高达 400 万（这由<code>&lt;linux/threads.h&gt;</code> 控制）。内核在每个进程描述符的<code>pid</code> 字段中存储此值。</p><blockquote><p>⁴ 不透明类型 (opaquetype)：指其内部细节被隐藏，只通过特定接口访问的数据类型。</p></blockquote><p>这个最大值很重要，因为它本质上是系统上可能同时存在的最大进程数。虽然32,768对于桌面系统可能足够，但大型服务器可能需要多得多的进程。此外，该值越低，数值回绕（wraparound）就越快，这会破坏“数值大的进程比数值小的进程更晚运行”这一有用概念。如果系统愿意打破与旧应用程序的兼容性，管理员可以通过<code>/proc/sys/kernel/pid_max</code> 来增加最大值。</p><p>在内核内部，通常直接通过指向其 <code>task_struct</code>结构的指针来引用任务。事实上，大多数处理进程的内核代码都直接使用<code>struct task_struct</code>。因此，能够快速查找当前正在执行的任务的进程描述符是非常有用的，这是通过<code>current</code>宏来完成的。这个宏必须由每个体系结构独立实现。一些体系结构将当前运行进程的<code>task_struct</code>结构的指针保存在一个寄存器中，以实现高效访问。其他体系结构，如x86（几乎没有多余的寄存器可用），则利用 <code>struct thread_info</code>存储在内核栈上这一条件，来计算 <code>thread_info</code> 的位置，进而找到<code>task_struct</code>。</p><p>在 x86 上，<code>current</code> 是通过滤除栈指针的最低 13 位来获得<code>thread_info</code> 结构计算的。这是由<code>current_thread_info()</code> 函数完成的。汇编代码如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movl $-8192, %eax</span><br><span class="line">andl %esp, %eax</span><br></pre></td></tr></table></figure> 这里假设栈大小是 8KB。当启用 4KB 栈时，使用 4096 代替8192。</p><p>最后，<code>current</code> 解引用 <code>thread_info</code> 的<code>task</code> 成员以返回 <code>task_struct</code>：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">current_thread_info()-&gt;task;</span><br></pre></td></tr></table></figure></p><p>将此方法与 PowerPC（IBM 的现代基于 RISC的微处理器）采用的方法对比，后者将当前的 <code>task_struct</code>存储在一个寄存器中。因此，在 PPC 上 <code>current</code>仅仅返回存储在寄存器 <code>r2</code> 中的值。PPC可以采用这种方法是因为，与 x86不同，它有大量的寄存器。由于访问进程描述符是一项常见且重要的工作，PPC内核开发人员认为使用一个寄存器是值得的。</p><p>好的，这是对“Process State”部分的整理和翻译：</p><hr /><h3 id="进程状态-process-state"><strong>进程状态 (ProcessState)</strong></h3><p>进程描述符中的 <code>state</code> 字段描述了进程的当前状况（参见图3.3）。系统中的每个进程都确切地处于五种不同状态中的一种。该值由以下五个标志之一表示：</p><ul><li><p><strong>TASK_RUNNING(运行)</strong>：进程是可运行的；它要么正在执行，要么在运行队列（runqueue）中等待运行（运行队列将在第4章讨论）。这是在用户空间执行的进程唯一可能的状态；它也应用于正在内核空间中主动运行的进程。</p></li><li><p><strong>TASK_INTERRUPTIBLE(可中断睡眠)</strong>：进程正在睡眠（即被阻塞），等待某个条件的发生。当此条件满足时，内核会将进程的状态设置为<code>TASK_RUNNING</code>。如果进程接收到信号，它也会被提前唤醒并变为可运行状态。</p></li><li><p><strong>TASK_UNINTERRUPTIBLE (不可中断睡眠)</strong>：此状态与<code>TASK_INTERRUPTIBLE</code>类似，区别在于即使接收到信号，它也不会被唤醒并变为可运行状态。此状态用于进程必须不受中断地等待，或者预期事件会很快发生的场合。由于处在此状态的任务不响应信号，因此<code>TASK_UNINTERRUPTIBLE</code> 的使用频率低于<code>TASK_INTERRUPTIBLE</code>⁵。</p></li><li><p>**__TASK_TRACED (被跟踪)**：进程正被另一个进程（例如调试器通过<code>ptrace</code>）所跟踪。</p></li><li><p>**__TASK_STOPPED(停止)**：进程执行已停止；任务既不在运行，也没有资格运行。如果任务收到<code>SIGSTOP</code>、<code>SIGTSTP</code>、<code>SIGTTIN</code> 或<code>SIGTTOU</code>信号，或者在被调试时收到任何信号，就会发生这种状态。</p></li></ul><blockquote><p>⁵ 这就是为什么在 <code>ps(1)</code> 命令中会出现那些状态为 D (即<code>TASK_UNINTERRUPTIBLE</code>)的、令人头疼的无法杀死的进程。因为该任务不响应信号，你无法向它发送<code>SIGKILL</code>信号。此外，即使你能终止该任务，这样做通常也不明智，因为该任务可能正在进行一项重要操作（并可能持有信号量）。</p></blockquote><hr />]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;进程&quot;&gt;&lt;strong&gt;进程&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;一个进程是一个正在执行中的程序（存储在某种介质上的目标代码）。然而，进程不仅仅只是执行的程序代码（在
Unix
中常称为文本段）。它们还包括一系列资源，例如打开的文件和待处理的信号、内核内部数据</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 4.7 内核模块实验</title>
    <link href="https://mackz-maxw.github.io/2025/08/19/oper_sys21%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E5%AE%9E%E9%AA%8C/"/>
    <id>https://mackz-maxw.github.io/2025/08/19/oper_sys21%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E5%AE%9E%E9%AA%8C/</id>
    <published>2025-08-19T17:15:49.479Z</published>
    <updated>2025-08-20T16:31:13.295Z</updated>
    
    <content type="html"><![CDATA[<h3 id="可加载的内核模块">可加载的内核模块</h3><h4 id="练习-1">练习 1</h4><p>准备好实验报告</p><hr /><h4 id="练习-2-编译内核模块">练习 2: 编译内核模块</h4><ol type="1"><li><strong>步骤</strong>: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 Linux Lab 集群上</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /project/scratch01/compile/your-username/modules</span><br><span class="line"><span class="built_in">cd</span> /project/scratch01/compile/your-username/modules</span><br><span class="line"><span class="comment"># 保存 simple_module.c 和 Makefile (内容: obj-m := simple_module.o)</span></span><br><span class="line">module add arm-rpi</span><br><span class="line"><span class="built_in">export</span> LINUX_SOURCE=/path/to/your/linux_source/linux <span class="comment"># 设置内核源码路径</span></span><br><span class="line">make -C <span class="variable">$LINUX_SOURCE</span> ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- M=<span class="variable">$PWD</span> modules</span><br></pre></td></tr></table></figure></li><li><strong>答案</strong>: 提交 <code>make</code> 命令的完整输出。</li></ol><hr /><h4 id="练习-3-加载模块与系统日志">练习 3: 加载模块与系统日志</h4><ol type="1"><li><strong>步骤</strong> (在树莓派上): <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/modules</span><br><span class="line"><span class="comment"># 使用 sftp 将 simple_module.ko 传输到此目录</span></span><br><span class="line">sudo dmesg --clear</span><br><span class="line">sudo insmod ~/modules/simple_module.ko</span><br><span class="line">dmesg <span class="comment"># 查看日志</span></span><br></pre></td></tr></table></figure></li><li><strong>答案</strong>: 提交 <code>dmesg</code>中显示的模块加载信息。</li></ol><hr /><h4 id="练习-4-验证模块列表与卸载">练习 4: 验证模块列表与卸载</h4><ol type="1"><li><strong>步骤</strong>: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lsmod <span class="comment"># 确认 simple_module 在列表中</span></span><br><span class="line">sudo rmmod simple_module</span><br><span class="line">lsmod <span class="comment"># 确认已移除</span></span><br><span class="line">dmesg <span class="comment"># 查看卸载信息</span></span><br></pre></td></tr></table></figure></li><li><strong>答案</strong>: 提交 <code>lsmod</code>的输出（证明已卸载）和 <code>dmesg</code> 中显示的模块卸载信息。</li></ol><hr /><h4 id="练习-5-访问内核变量-jiffies">练习 5: 访问内核变量 jiffies</h4><ol type="1"><li><strong>步骤</strong>:<ul><li>复制 <code>simple_module.c</code> 为<code>jiffies_module.c</code>。</li><li>修改其 init 和 exit 函数，使用 <code>printk</code> 打印<code>jiffies</code> 变量（类型<code>extern unsigned long volatile jiffies;</code>）。</li><li>更新 Makefile: <code>obj-m += jiffies_module.o</code>。</li><li>重新编译并传输 <code>jiffies_module.ko</code> 到树莓派。</li><li>加载并卸载模块，观察 <code>dmesg</code>。</li></ul></li><li><strong>答案</strong>:<ul><li>提交 <code>dmesg</code> 中显示加载和卸载时 <code>jiffies</code>值的日志消息。</li><li>计算并说明两条消息之间发生的滴答数（tick count）。</li></ul></li></ol><hr /><h3 id="需提交的内容">需提交的内容</h3><p>请提交一个包含以下内容的压缩包或文档： 1. <strong>答案文件</strong>:包含上述所有练习的答案。 2. <strong>源代码文件</strong>: 你新创建的<code>jiffies_module.c</code> 文件。</p><hr /><h3 id="可选拓展练习">可选拓展练习</h3><h4 id="练习-6-模块初始化返回值实验">练习 6: 模块初始化返回值实验</h4><ul><li><strong>任务</strong>: 修改 init函数，使其分别返回正数和负数（错误码，参见<code>/include/uapi/asm-generic/errno-base.h</code>）。</li><li><strong>提示</strong>:描述加载模块时发生的情况及其在系统日志中的表现。</li></ul><h4 id="练习-7-探查导出的内核符号">练习 7: 探查导出的内核符号</h4><ul><li><strong>任务</strong>: 查看 <code>/proc/kallsyms</code> 文件（例如<code>cat /proc/kallsyms</code>），了解内核符号表。查找带有<code>__kstrtab_</code> 和 <code>__ksymtab_</code>前缀的符号（这些是可供模块使用的导出符号）。</li><li><strong>提示</strong>: 内核符号是 Linux内核代码中定义的函数、变量、数据结构等的名称标签。它们代表了在内核地址空间中的一个特定内存地址。可以将内核符号理解为内核的“公共接口”或“入口点”。主要有两种类型：</li><li>导出的符号：这些是内核明确声明为可以被外部模块使用的符号。例如，printk（内核的printf）、kmalloc（内核的内存分配函数）等。模块通过使用 EXPORT_SYMBOL()或 EXPORT_SYMBOL_GPL() 宏来导出它们的符号，以便其他模块可以使用。</li><li>非导出的符号：这些是内核内部的静态函数或变量，只在它们被定义的文件或内核的特定部分中使用。它们对于内核模块是不可见的，主要用于内核自身的组织</li><li>EXPORT_SYMBOL(printk) 在编译后创建了两个内部符号：__ksymtab_printk和 __kstrtab_printk。<ul><li>__ksymtab_printk 是一个结构体，包含了 printk 的地址和指向__kstrtab_printk 的指针。</li><li>__kstrtab_printk 是一个字符串，存储着 printk 的名字。</li></ul></li><li>内核使用这个结构来高效地通过名字查找函数的地址</li></ul><h4 id="练习-8-实现用户态读取-cpu-周期计数器-ccnt-的模块">练习 8:实现用户态读取 CPU 周期计数器 (CCNT) 的模块</h4><ul><li><strong>任务</strong> (如果之前在系统调用工作室未完成):<ul><li>将提供的驱动文件放入你的内核源码树的<code>arch/arm/include/asm</code> 目录。</li><li>下载 <code>enable_ccnt.c</code> 内核模块代码到你的模块目录。</li><li>编译、传输并加载此模块 (<code>insmod enable_ccnt.ko</code>)。</li><li>使用 <code>dmesg | tail</code> 验证加载成功。</li></ul></li><li><strong>任务</strong> (主要部分):<ul><li>在树莓派上创建一个用户态程序。</li><li>该程序应 <code>#include</code> 你获取的驱动头文件。</li><li>调用 <code>unsigned long long pmccntr_get(void)</code>函数两次。</li></ul></li><li><strong>答案</strong>:<ul><li>说明运行一次 <code>pmccntr_get()</code> 函数大约需要多少 CPU周期（计算两次调用的差值）。</li><li>如果你在系统调用工作室完成过类似的练习，请对比直接调用此函数与通过系统调用获取周期计数所需的周期数。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;可加载的内核模块&quot;&gt;可加载的内核模块&lt;/h3&gt;
&lt;h4 id=&quot;练习-1&quot;&gt;练习 1&lt;/h4&gt;
&lt;p&gt;准备好实验报告&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&quot;练习-2-编译内核模块&quot;&gt;练习 2: 编译内核模块&lt;/h4&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    <category term="lab" scheme="https://mackz-maxw.github.io/categories/os-basic/lab/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 4.6 内核API重构案例：IDR API</title>
    <link href="https://mackz-maxw.github.io/2025/08/19/oper_sys20/"/>
    <id>https://mackz-maxw.github.io/2025/08/19/oper_sys20/</id>
    <published>2025-08-19T17:07:16.581Z</published>
    <updated>2025-08-19T17:11:57.670Z</updated>
    
    <content type="html"><![CDATA[<p>文章内容来自 LWN.net</p><h3 id="文章摘要-summary">文章摘要 (Summary)</h3><p>这篇发表于 2013 年 2 月的文章讨论了 Linux 内核中 <strong>IDR 子系统API 的一次重大简化改革</strong>，由开发者 Tejun Heo 主导。IDR机制用于高效分配和管理整数 ID（例如设备名、POSIX 定时器 ID 等），其旧API 因其复杂性和潜在的竞争条件而闻名。</p><p><strong>核心问题：旧 API 的缺陷</strong> 1.<strong>两步分配</strong>：需要先调用 <code>idr_pre_get()</code>预分配内存（可休眠），再调用 <code>idr_get_new()</code> 获取ID（可原子上下文）。 2.<strong>必须重试循环</strong>：<code>idr_get_new()</code>可能因预分配内存被其他 CPU 耗尽而失败（返回<code>-EAGAIN</code>），要求调用者编写冗长且易错的循环重试代码。 3.<strong>全局资源竞争</strong>：<code>idr_pre_get()</code>预分配的内存是全局的，多个 CPU 竞争时，后执行的<code>idr_get_new()</code>可能因资源不足而失败，迫使代码退出原子上下文进行重试，这条路径往往缺乏测试。</p><p><strong>解决方案：新 API 的改进</strong> Tejun Heo引入了三个新函数来简化流程： 1.<code>idr_preload(gfp_t gfp_mask)</code>: 为<strong>当前 CPU</strong>预分配内存，并<strong>禁用抢占</strong>以防止预分配的内存被偷。 2.<code>idr_alloc(...)</code>: <strong>单次调用</strong>即可完成 ID分配和关联。它接受 ID范围参数，并仅在真正需要时（未预分配或预分配不足）才使用<code>gfp_mask</code> 分配内存。它只会在内存分配彻底失败时报错，消除了对<code>-EAGAIN</code> 的重试循环需求。 3. <code>idr_preload_end()</code>:在 <code>idr_alloc</code> 后调用，<strong>重新启用抢占</strong>。</p><p><strong>关键优势：</strong> *<strong>更简单</strong>：消除了遍布内核的百余处重复、易错的样板代码。 *<strong>更可靠</strong>：通过每 CPU预分配和禁用抢占，基本消除了在原子上下文中因资源竞争而失败的需要。 *<strong>更灵活</strong>：<code>idr_alloc</code> 可以指定 ID范围，并且如果能在进程上下文调用，甚至可以完全省略<code>idr_preload</code>/<code>idr_preload_end</code>。</p><p><strong>社区反应：</strong> 尽管大部分开发者接受了这个改动（给出了Acked-by），但 Eric Biederman 表达了强烈反对，认为新 API 的<code>idr_preload</code>像是一种难以理解的“魔法”。然而，文章作者（JonathanCorbet）预测，<strong>新 API带来的巨大简化优势将使其最终被内核社区接受</strong>。</p><h3 id="新旧-api-对比总结">新旧 API 对比总结</h3><div class="line-block">特性 | 旧 API (2013 年前) | 新 API (Tejun Heo提议) |<br />：--- | :--- | :--- |<br /><strong>核心函数</strong> | <code>idr_pre_get()</code>,<code>idr_get_new()</code> | <code>idr_preload()</code>,<code>idr_alloc()</code>, <code>idr_preload_end()</code> |<br /><strong>调用模式</strong> |<strong>两步过程</strong>，必须配合<strong>重试循环</strong> |<strong>单次调用</strong>(<code>idr_alloc</code>)，<strong>无需循环</strong> |<br /><strong>预分配内存</strong> | <strong>全局共享</strong>，易被其他 CPU消耗 | <strong>每 CPU独享</strong>，配合<strong>禁用抢占</strong>，不会被偷 |<br /><strong>错误处理</strong> | 可能返回<code>-EAGAIN</code>，要求调用者重试 | 仅在所有内存分配都失败时才报错|<br /><strong>原子上下文</strong> | 支持，但重试时必须退出原子上下文 |更好支持，通过 <code>preload</code>/<code>preload_end</code> 保障|<br /><strong>代码复杂度</strong> | 高，需要大量重复的样板代码 |低，调用逻辑非常简洁 |</div><h3 id="结论">结论</h3><p>这篇文章记录了一个经典的内核优化案例：通过巧妙的设计（利用每 CPU数据和禁用抢占）将一个复杂、易错、充满竞争条件的旧接口，重构为一个简洁、可靠、高效的新接口。尽管存在一些争议，但<strong>简化并提升广泛使用的底层API的价值是极其巨大的</strong>，这很可能是新方案最终被采纳的原因。这正是Linux 内核持续演进的一个缩影。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文章内容来自 LWN.net&lt;/p&gt;
&lt;h3 id=&quot;文章摘要-summary&quot;&gt;文章摘要 (Summary)&lt;/h3&gt;
&lt;p&gt;这篇发表于 2013 年 2 月的文章讨论了 Linux 内核中 &lt;strong&gt;IDR 子系统
API 的一次重大简化改革&lt;/strong</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>代码随想录 | 刷题-动态规划9</title>
    <link href="https://mackz-maxw.github.io/2025/08/19/kamacode36/"/>
    <id>https://mackz-maxw.github.io/2025/08/19/kamacode36/</id>
    <published>2025-08-19T17:04:53.749Z</published>
    <updated>2025-08-19T17:06:09.498Z</updated>
    
    <content type="html"><![CDATA[<h3 id="买卖股票的最佳时机iv">188.买卖股票的最佳时机IV</h3><h3 id="最佳买卖股票时机含冷冻期">309.最佳买卖股票时机含冷冻期</h3><h3 id="买卖股票的最佳时机含手续费">714.买卖股票的最佳时机含手续费</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;买卖股票的最佳时机iv&quot;&gt;188.买卖股票的最佳时机IV&lt;/h3&gt;
&lt;h3 id=&quot;最佳买卖股票时机含冷冻期&quot;&gt;309.最佳买卖股票时机含冷冻期&lt;/h3&gt;
&lt;h3 id=&quot;买卖股票的最佳时机含手续费&quot;&gt;714.买卖股票的最佳时机含手续费&lt;/h3&gt;
</summary>
      
    
    
    
    <category term="leetcode" scheme="https://mackz-maxw.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 4.5 内核数据结构-内核模块</title>
    <link href="https://mackz-maxw.github.io/2025/08/12/oper_sys19/"/>
    <id>https://mackz-maxw.github.io/2025/08/12/oper_sys19/</id>
    <published>2025-08-12T16:14:02.804Z</published>
    <updated>2025-08-15T22:49:37.717Z</updated>
    
    <content type="html"><![CDATA[<h3 id="linux-内核模块开发简介">Linux 内核模块开发简介</h3><h4 id="设备类型分类">设备类型分类</h4><table><colgroup><col style="width: 15%" /><col style="width: 9%" /><col style="width: 26%" /><col style="width: 26%" /><col style="width: 20%" /></colgroup><thead><tr><th><strong>类型</strong></th><th><strong>缩写</strong></th><th><strong>访问方式</strong></th><th><strong>典型设备</strong></th><th><strong>特殊文件</strong></th></tr></thead><tbody><tr><td><strong>块设备</strong></td><td>blkdevs</td><td>按块随机访问（支持寻址）</td><td>硬盘/SSD/光驱</td><td><code>/dev/sda1</code></td></tr><tr><td><strong>字符设备</strong></td><td>cdevs</td><td>字节流顺序访问</td><td>键盘/打印机/伪设备</td><td><code>/dev/ttyS0</code></td></tr><tr><td><strong>网络设备</strong></td><td>-</td><td>套接字API（破坏"一切皆文件"原则）</td><td>网卡/无线适配器</td><td>无设备节点</td></tr><tr><td><strong>混杂设备</strong></td><td>miscdevs</td><td>字符设备简化形式</td><td>简单专用设备</td><td><code>/dev/random</code> 等</td></tr></tbody></table><p><strong>伪设备示例</strong>： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/dev/random   <span class="comment"># 内核随机数生成器</span></span><br><span class="line">/dev/null     <span class="comment"># 空设备（丢弃所有写入）</span></span><br><span class="line">/dev/zero     <span class="comment"># 零设备（提供无限\0字节）</span></span><br><span class="line">/dev/full     <span class="comment"># 满设备（写入总返回ENOSPC错误）</span></span><br><span class="line">/dev/mem      <span class="comment"># 物理内存访问设备</span></span><br></pre></td></tr></table></figure></p><hr /><h3 id="内核模块开发">内核模块开发</h3><h4 id="hello-world-模块示例">Hello World 模块示例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 模块加载时执行 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">hello_init</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;I bear a charmed life.\n&quot;</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 返回0表示成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 模块卸载时执行 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">hello_exit</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Out, out, brief candle!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册入口/出口函数 */</span></span><br><span class="line">module_init(hello_init);  <span class="comment">// 不是函数调用，而是宏定义</span></span><br><span class="line">module_exit(hello_exit);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 模块元信息 */</span></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);                  <span class="comment">// 必须声明许可证</span></span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;Shakespeare&quot;</span>);           <span class="comment">// 作者信息</span></span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;Hello World Module&quot;</span>); <span class="comment">// 模块描述</span></span><br></pre></td></tr></table></figure><h4 id="关键机制解析">关键机制解析</h4><ol type="1"><li><strong>入口函数</strong>：<ul><li>形式：<code>int init_func(void)</code></li><li>职责：注册资源/初始化硬件/分配数据结构</li><li>返回值：0=成功，非0=失败</li></ul></li><li><strong>出口函数</strong>：<ul><li>形式：<code>void exit_func(void)</code></li><li>职责：释放资源/复位硬件/清理状态</li></ul></li><li><strong>许可证声明</strong>： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);  <span class="comment">// 合法选项：GPL/MIT/BSD等</span></span><br></pre></td></tr></table></figure><ul><li>非GPL模块会导致内核标记为"tainted"</li><li>无法调用GPL-only符号</li></ul></li></ol><hr /><h3 id="模块构建指南">模块构建指南</h3><h4 id="集成到内核源码树推荐">集成到内核源码树（推荐）</h4><ol type="1"><li><strong>选择路径</strong>：<ul><li>字符设备 → <code>drivers/char/</code></li><li>块设备 → <code>drivers/block/</code></li><li>USB设备 → <code>drivers/usb/</code></li></ul></li><li><strong>修改Makefile</strong>： <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># drivers/char/Makefile 添加</span></span><br><span class="line">obj-<span class="variable">$(CONFIG_FISHING_POLE)</span> += fishing/</span><br><span class="line"></span><br><span class="line"><span class="comment"># drivers/char/fishing/Makefile 内容</span></span><br><span class="line">obj-<span class="variable">$(CONFIG_FISHING_POLE)</span> += fishing.o</span><br><span class="line">fishing-objs := main.o line.o  <span class="comment"># 多文件模块</span></span><br><span class="line">EXTRA_CFLAGS += -DTITANIUM_POLE  <span class="comment"># 自定义编译标志</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="外部独立构建">外部独立构建</h4><ol type="1"><li><p><strong>Makefile示例</strong>： <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">obj-m := fishing.o</span><br><span class="line">fishing-objs := fishing-main.o fishing-line.o</span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    make -C /path/to/kernel/source M=<span class="variable">$(PWD)</span> modules</span><br></pre></td></tr></table></figure></p></li><li><p><strong>构建命令</strong>： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在模块目录执行</span></span><br><span class="line">make -C /lib/modules/$(<span class="built_in">uname</span> -r)/build M=<span class="variable">$PWD</span> modules</span><br></pre></td></tr></table></figure> ### 模块管理</p></li></ol><h4 id="模块安装路径规范">模块安装路径规范</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标准安装路径模板</span></span><br><span class="line">/lib/modules/$(<span class="built_in">uname</span> -r)/kernel/&lt;源码树路径&gt;/&lt;模块名&gt;.ko</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：2.6.34内核的钓鱼竿模块</span></span><br><span class="line">/lib/modules/2.6.34/kernel/drivers/char/fishing.ko</span><br></pre></td></tr></table></figure><p><strong>安装命令</strong>： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make modules_install  <span class="comment"># 需root权限</span></span><br></pre></td></tr></table></figure></p><hr /><h3 id="模块依赖管理">模块依赖管理</h3><h4 id="依赖关系生成">1. 依赖关系生成</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成完整依赖关系</span></span><br><span class="line">sudo depmod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增量更新（仅处理新模块）</span></span><br><span class="line">sudo depmod -A</span><br></pre></td></tr></table></figure><h4 id="依赖存储位置">2. 依赖存储位置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 依赖关系文件路径</span></span><br><span class="line">/lib/modules/$(<span class="built_in">uname</span> -r)/modules.dep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件内容示例</span></span><br><span class="line">kernel/drivers/char/fishing.ko: kernel/drivers/net/bait.ko</span><br></pre></td></tr></table></figure><blockquote><p><strong>智能加载原理</strong>：<br />当加载 <code>chum.ko</code> 时，系统自动解析其依赖并先加载<code>bait.ko</code></p></blockquote><hr /><h3 id="模块加载与卸载">模块加载与卸载</h3><h4 id="基础工具不推荐">基础工具（不推荐）</h4><table><colgroup><col style="width: 12%" /><col style="width: 27%" /><col style="width: 29%" /><col style="width: 30%" /></colgroup><thead><tr><th><strong>操作</strong></th><th><strong>命令</strong></th><th><strong>缺陷</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>加载</td><td><code>insmod module.ko</code></td><td>无依赖解析</td><td><code>insmod fishing.ko</code></td></tr><tr><td>卸载</td><td><code>rmmod module_name</code></td><td>不检查依赖</td><td><code>rmmod fishing</code></td></tr></tbody></table><h4 id="高级工具推荐">高级工具（推荐）</h4><p><strong>1. 智能加载</strong>： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载模块（自动处理依赖）</span></span><br><span class="line">sudo modprobe fishing pole_length=300 material=titanium</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看加载的模块</span></span><br><span class="line">lsmod | grep fishing</span><br></pre></td></tr></table></figure></p><p><strong>2. 安全卸载</strong>： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载模块（自动移除未用依赖）</span></span><br><span class="line">sudo modprobe -r fishing</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制卸载（危险！）</span></span><br><span class="line">sudo modprobe -rf fishing  <span class="comment"># 可能破坏依赖树</span></span><br></pre></td></tr></table></figure></p><h3 id="内核配置与模块开发高级指南">内核配置与模块开发高级指南</h3><h4 id="配置选项管理-kconfig">配置选项管理 (Kconfig)</h4><p>linux使用kbuild系统，可以通过修改Kconfig文件便捷地管理配置选项<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># drivers/char/Kconfig 示例</span><br><span class="line">config FISHING_POLE</span><br><span class="line">    tristate &quot;Fish Master 3000 support&quot;  # 三态选项，表示模块在编译配置中可以内置编译到内核（Y），作为模块编译（M）或者不编译（N）</span><br><span class="line">    default n                            # 默认禁用</span><br><span class="line">    depends on FISH_TANK &amp;&amp; !NO_FISHING  # 依赖条件</span><br><span class="line">    select BAIT                          # 强制关联选项</span><br><span class="line">    help                                 # 帮助文档</span><br><span class="line">        Enable support for the Fish Master 3000 computer interface.</span><br><span class="line">        Choose Y to build into kernel, M for module (fishing.ko), or N to disable.</span><br></pre></td></tr></table></figure></p><p><strong>核心指令解析</strong>： | <strong>指令</strong> |<strong>功能</strong> | <strong>示例</strong> ||----------------|----------------------------------|-----------------------------------|| <code>tristate</code> | 三态选项 (Y/M/N) | 驱动标准配置 | |<code>bool</code> | 布尔选项 (Y/N) | 特性开关 | | <code>default</code> |默认值 | <code>default y</code> 默认启用 | | <code>depends on</code> |依赖关系 | <code>depends on NET</code> 需网络支持 | |<code>select</code> | 强制启用其他选项 | <code>select CRC32</code>自动启用CRC校验 | | <code>if</code> | 条件显示 |<code>if EMBEDDED</code> 嵌入式场景可见 | | <code>help</code> | 帮助文档| 用户配置时的说明文本 |</p><hr /><h3 id="模块参数系统">模块参数系统</h3><h4 id="基础参数声明">1. 基础参数声明</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> pole_length = <span class="number">200</span>;  <span class="comment">// 默认值</span></span><br><span class="line">module_param(pole_length, <span class="type">int</span>, <span class="number">0644</span>);  <span class="comment">// 整型参数</span></span><br><span class="line">MODULE_PARM_DESC(pole_length, <span class="string">&quot;Pole length in cm&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="高级参数类型">2. 高级参数类型</h4><table><colgroup><col style="width: 20%" /><col style="width: 32%" /><col style="width: 47%" /></colgroup><thead><tr><th><strong>类型</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><code>charp</code></td><td>字符串指针</td><td><code>module_param(name, charp, 0);</code></td></tr><tr><td><code>bool</code></td><td>布尔值</td><td><code>module_param(enable, bool, 0);</code></td></tr><tr><td><code>module_param_string</code></td><td>直接复制到数组</td><td><code>char target[32]; module_param_string(dest, target, sizeof(target), 0);</code></td></tr><tr><td><code>module_param_array</code></td><td>数组参数</td><td><code>int ids[5]; int count; module_param_array(ids, int, &amp;count, 0);</code></td></tr></tbody></table><h4 id="参数传递方式">3. 参数传递方式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载时指定参数</span></span><br><span class="line">sudo modprobe fishing pole_length=300 material=carbon</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看参数信息</span></span><br><span class="line">modinfo fishing</span><br><span class="line">parm:           pole_length:Pole length <span class="keyword">in</span> cm (int)</span><br><span class="line">parm:           material:Construction material (charp)</span><br></pre></td></tr></table></figure><h4 id="sysfs集成">4. sysfs集成</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数自动暴露到sysfs</span></span><br><span class="line">/sys/module/fishing/parameters/pole_length  <span class="comment"># 权限0644=rwr--r--</span></span><br></pre></td></tr></table></figure><hr /><h3 id="符号导出机制">符号导出机制</h3><h4 id="基础导出">1. 基础导出</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明可被模块调用的函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_pole_strength</span><span class="params">(<span class="keyword">struct</span> pole *p)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;load_capacity;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(get_pole_strength);  <span class="comment">// 全局导出</span></span><br></pre></td></tr></table></figure><h4 id="gpl受限导出">2. GPL受限导出</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPORT_SYMBOL_GPL(calculate_bait_ratio);  <span class="comment">// 仅GPL模块可用</span></span><br></pre></td></tr></table></figure><h4 id="导出规则">3. 导出规则</h4><table><colgroup><col style="width: 29%" /><col style="width: 35%" /><col style="width: 35%" /></colgroup><thead><tr><th><strong>导出类型</strong></th><th><strong>调用权限</strong></th><th><strong>典型场景</strong></th></tr></thead><tbody><tr><td><code>EXPORT_SYMBOL</code></td><td>所有模块</td><td>通用内核API</td></tr><tr><td><code>EXPORT_SYMBOL_GPL</code></td><td>仅GPL许可证模块</td><td>核心子系统接口</td></tr><tr><td>未导出符号</td><td>仅内核内部使用</td><td>静态函数/私有实现</td></tr></tbody></table><hr /><h3 id="配置系统元选项">配置系统元选项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">config EXPERIMENTAL</span><br><span class="line">    bool &quot;Enable experimental features&quot;  # 高风险功能开关</span><br><span class="line">    default n</span><br><span class="line"></span><br><span class="line">config DEBUG_KERNEL</span><br><span class="line">    bool &quot;Kernel debugging&quot;  # 调试选项总开关</span><br><span class="line">    default y if DEBUG</span><br></pre></td></tr></table></figure><p><strong>关键元选项</strong>： -<code>CONFIG_EMBEDDED</code>：嵌入式系统优化选项 -<code>CONFIG_BROKEN_ON_SMP</code>：标记非SMP安全驱动 -<code>CONFIG_EXPERIMENTAL</code>：实验性功能入口</p><hr /><h3 id="开发工作流示例">开发工作流示例</h3><h4 id="添加新驱动">1. 添加新驱动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建Kconfig</span></span><br><span class="line"><span class="comment"># drivers/char/fishing/Kconfig</span></span><br><span class="line">config FISHING_PRO</span><br><span class="line">    tristate <span class="string">&quot;Professional Fishing Module&quot;</span></span><br><span class="line">    select FISHING_ADVANCED</span><br><span class="line">    <span class="built_in">help</span></span><br><span class="line">      Support <span class="keyword">for</span> professional-grade fishing equipment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改上级Kconfig</span></span><br><span class="line"><span class="comment"># drivers/char/Kconfig</span></span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;drivers/char/fishing/Kconfig&quot;</span></span><br></pre></td></tr></table></figure><h4 id="实现参数化模块">2. 实现参数化模块</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/moduleparam.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> material[<span class="number">20</span>] = <span class="string">&quot;fiberglass&quot;</span>;</span><br><span class="line">module_param_string(material, material, <span class="keyword">sizeof</span>(material), <span class="number">0644</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> lengths[] = &#123;<span class="number">180</span>, <span class="number">240</span>&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> nr_lengths = <span class="number">2</span>;</span><br><span class="line">module_param_array(lengths, <span class="type">int</span>, &amp;nr_lengths, <span class="number">0444</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> enable_ai;</span><br><span class="line">module_param(enable_ai, <span class="type">bool</span>, <span class="number">0644</span>);</span><br></pre></td></tr></table></figure><h4 id="编译验证">3. 编译验证</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置内核</span></span><br><span class="line">make menuconfig</span><br><span class="line"><span class="comment"># -&gt; Device Drivers -&gt; Character devices -&gt; Professional Fishing Module (M)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">make -j$(<span class="built_in">nproc</span>) modules</span><br><span class="line">sudo make modules_install</span><br></pre></td></tr></table></figure><hr /><h3 id="生产环境最佳实践">生产环境最佳实践</h3><ol type="1"><li><p><strong>参数安全</strong>： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> max_load = <span class="number">100</span>;</span><br><span class="line">module_param(max_load, <span class="type">int</span>, <span class="number">0644</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">init_func</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (max_load &gt; MAX_SAFE_LIMIT) &#123;</span><br><span class="line">        pr_warn(<span class="string">&quot;Dangerous load limit %d, capping at %d\n&quot;</span>, </span><br><span class="line">                max_load, MAX_SAFE_LIMIT);</span><br><span class="line">        max_load = MAX_SAFE_LIMIT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p><strong>版本兼容</strong>： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/version.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> LINUX_VERSION_CODE &gt;= KERNEL_VERSION(5,15,0)</span></span><br><span class="line"><span class="comment">// 新版内核API</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">// 旧版兼容实现</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></p></li><li><p><strong>错误处理</strong>： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> err = register_device();</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="comment">// 彻底回滚初始化</span></span><br><span class="line">    unregister_previous();</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ol><blockquote><p><strong>性能提示</strong>：高频访问的模块参数应复制到局部变量，避免频繁查sysfs</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;linux-内核模块开发简介&quot;&gt;Linux 内核模块开发简介&lt;/h3&gt;
&lt;h4 id=&quot;设备类型分类&quot;&gt;设备类型分类&lt;/h4&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 15%&quot; /&gt;
&lt;col style=&quot;width</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 4.4 内核数据结构-二叉树</title>
    <link href="https://mackz-maxw.github.io/2025/08/12/oper_sys18/"/>
    <id>https://mackz-maxw.github.io/2025/08/12/oper_sys18/</id>
    <published>2025-08-12T14:25:51.460Z</published>
    <updated>2025-08-12T16:13:25.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二叉树">二叉树</h3><h4 id="二叉搜索树bst核心特性">1. 二叉搜索树（BST）核心特性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">根节点左子树的所有节点值 &lt; 根节点值</span><br><span class="line">根节点右子树的所有节点值 &gt; 根节点值</span><br><span class="line">所有子树都是二叉搜索树</span><br></pre></td></tr></table></figure><ul><li><strong>操作复杂度</strong>：<ul><li>查找：O(log n)<br /></li><li>有序遍历：O(n)</li></ul></li><li><strong>缺陷</strong>：不平衡树可能导致操作退化到O(n)</li></ul><h4 id="自平衡二叉搜索树">2. 自平衡二叉搜索树</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">叶子节点深度差 ≤ 1   →   树高度 = O(log n)</span><br></pre></td></tr></table></figure><ul><li><strong>平衡机制</strong>：在插入/删除时自动调整结构</li><li><strong>常见类型</strong>：<ul><li>AVL树（严格平衡）</li><li><strong>红黑树</strong>（半平衡，Linux首选）</li></ul></li></ul><hr /><h3 id="红黑树red-black-trees">红黑树（Red-Black Trees）</h3><h4 id="六大约束条件">六大约束条件</h4><ol type="1"><li>节点非红即黑</li><li>叶子节点（NIL）为黑</li><li>叶子节点不存储数据</li><li>非叶子节点必有双子</li><li><strong>红节点的子节点必为黑</strong>（核心约束）</li><li>根到任意叶子的黑节点数相同</li></ol><h4 id="优势">优势</h4><ul><li>插入/删除只需O(1)次旋转（AVL需O(log n)）</li><li>查找效率稳定在O(log n)</li><li>内存开销小（仅1bit存储颜色）</li></ul><hr /><h3 id="linux实现rbtree">Linux实现（rbtree）</h3><h4 id="初始化">初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/rbtree.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">root</span> =</span> RB_ROOT;  <span class="comment">// 声明并初始化根节点</span></span><br></pre></td></tr></table></figure><h4 id="节点定义">节点定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">rb</span>;</span>  <span class="comment">// 嵌入红黑树节点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="查找实现页缓存示例">查找实现（页缓存示例）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> page *<span class="title function_">rb_search_page_cache</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="type">unsigned</span> <span class="type">long</span> offset)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> *<span class="title">n</span> =</span> inode-&gt;i_rb_page_cache.rb_node;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">page</span> =</span> rb_entry(n, <span class="keyword">struct</span> page, rb_page_cache);</span><br><span class="line">        <span class="keyword">if</span> (offset &lt; page-&gt;offset)</span><br><span class="line">            n = n-&gt;rb_left;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (offset &gt; page-&gt;offset)</span><br><span class="line">            n = n-&gt;rb_right;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> page;  <span class="comment">// 命中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;  <span class="comment">// 未命中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入实现">插入实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> page *<span class="title function_">rb_insert_page_cache</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="type">unsigned</span> <span class="type">long</span> offset, </span></span><br><span class="line"><span class="params">                                  <span class="keyword">struct</span> rb_node *node)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> **<span class="title">p</span> =</span> &amp;inode-&gt;i_rb_page_cache.rb_node;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> *<span class="title">parent</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 查找插入位置</span></span><br><span class="line">    <span class="keyword">while</span> (*p) &#123;</span><br><span class="line">        parent = *p;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">page</span> =</span> rb_entry(parent, <span class="keyword">struct</span> page, rb_page_cache);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (offset &lt; page-&gt;offset)</span><br><span class="line">            p = &amp;(*p)-&gt;rb_left;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (offset &gt; page-&gt;offset)</span><br><span class="line">            p = &amp;(*p)-&gt;rb_right;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> page;  <span class="comment">// 已存在</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行插入</span></span><br><span class="line">    rb_link_node(node, parent, p);      <span class="comment">// 链接新节点</span></span><br><span class="line">    rb_insert_color(node, &amp;inode-&gt;i_rb_page_cache);  <span class="comment">// 重平衡</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;  <span class="comment">// 插入成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><h3 id="xarray对比说明">XArray对比说明</h3><h4 id="适用场景差异">适用场景差异</h4><table><colgroup><col style="width: 16%" /><col style="width: 34%" /><col style="width: 26%" /><col style="width: 21%" /></colgroup><thead><tr><th><strong>数据结构</strong></th><th><strong>最佳场景</strong></th><th><strong>内核应用实例</strong></th><th><strong>XArray替代性</strong></th></tr></thead><tbody><tr><td>红黑树</td><td>范围查询/有序遍历</td><td>进程调度CFS</td><td>❌ 不可替代</td></tr><tr><td>XArray</td><td>稀疏ID映射/快速点查</td><td>页缓存/文件描述符</td><td>✅ 专精领域</td></tr></tbody></table><h4 id="性能对比">性能对比</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">操作        红黑树        XArray</span><br><span class="line">---------------------------------</span><br><span class="line">插入        O(log n)      O(k)  // k=键长</span><br><span class="line">范围查询     O(log n + m)  O(m)  // m=结果数</span><br><span class="line">内存开销     40字节/节点   8字节/条目</span><br></pre></td></tr></table></figure><h4 id="xarray替代红黑树的条件">XArray替代红黑树的条件</h4><ol type="1"><li><strong>键为整数类型</strong>（非复杂比较键）</li><li><strong>无需有序遍历</strong></li><li><strong>超高并发需求</strong>（XArray内置RCU） <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// XArray实现类似功能</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">xa_store</span><span class="params">(<span class="keyword">struct</span> xarray *xa, <span class="type">unsigned</span> <span class="type">long</span> index, <span class="type">void</span> *entry)</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">xa_load</span><span class="params">(<span class="keyword">struct</span> xarray *xa, <span class="type">unsigned</span> <span class="type">long</span> index)</span>;</span><br></pre></td></tr></table></figure></li></ol><hr /><h3 id="关键结论">关键结论</h3><ol type="1"><li><strong>红黑树适用场景</strong>：<ul><li>VFS目录树（<code>dentry</code>缓存）</li><li>进程调度器（CFS运行队列）</li><li>EPoll事件管理</li></ul></li><li><strong>XArray优先场景</strong>：<ul><li>文件页缓存（<code>address_space</code>）</li><li>内存反向映射</li><li>UID到指针映射</li></ul></li></ol><blockquote><p><strong>迁移建议</strong>：新代码中整数键映射优先采用XArray；复杂键/范围查询仍需红黑树。<br /><strong>性能数据</strong>：XArray在ext4文件系统中减少40%缓存操作耗时（内核5.15测试）</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;二叉树&quot;&gt;二叉树&lt;/h3&gt;
&lt;h4 id=&quot;二叉搜索树bst核心特性&quot;&gt;1. 二叉搜索树（BST）核心特性&lt;/h4&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>代码随想录 | 刷题-动态规划8</title>
    <link href="https://mackz-maxw.github.io/2025/08/11/kamacode35/"/>
    <id>https://mackz-maxw.github.io/2025/08/11/kamacode35/</id>
    <published>2025-08-11T16:46:58.061Z</published>
    <updated>2025-08-19T17:04:30.486Z</updated>
    
    <content type="html"><![CDATA[<h3 id="买卖股票的最佳时机">121. 买卖股票的最佳时机</h3><p>贪心方法：取最左最小值，取最右最大值 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.<span class="built_in">size</span>() == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> profit = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j&lt;prices.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((prices[j] - prices[i])&gt;profit)profit = prices[j] - prices[i];</span><br><span class="line">            <span class="keyword">if</span>(prices[j] &lt; prices[i])i = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>动态规划方法：每天保存两个数值 - 当天持有股票的最大值 -第i-1天就持有股票，那么就保持现状，所得现金就是昨天持有股票的所得现金即：dp[i - 1][0] -第i天买入股票，所得现金就是买入今天的股票后所得现金即：-prices[i] -当天不持有股票的最大值 -第i-1天就不持有股票，那么就保持现状，所得现金就是昨天不持有股票的所得现金即：dp[i - 1][1] -第i天卖出股票，所得现金就是按照今天股票价格卖出后所得现金即：prices[i] +dp[i - 1][0]</p><h3 id="买卖股票的最佳时机ii">122.买卖股票的最佳时机II</h3><p>尝试一下动态规划方法 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printdp</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i: dp)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> j: i)&#123;</span><br><span class="line">                cout&lt;&lt;j&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.<span class="built_in">size</span>() == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(prices.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="comment">// printdp(dp);</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] -= prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">1</span>]+prices[i], dp[i<span class="number">-1</span>][<span class="number">0</span>]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">1</span>], dp[i<span class="number">-1</span>][<span class="number">0</span>]-prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printdp(dp);</span></span><br><span class="line">        <span class="keyword">return</span> dp[prices.<span class="built_in">size</span>()<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="买卖股票的最佳时机iii">123.买卖股票的最佳时机III</h3><p>为什么“选择两个最大的上升区间”这种解决方式不正确：由于交易次数限制，并不是所有上升区间都需要被单独考虑。有时一笔交易可能覆盖多个上升区间</p><p>本题建议使用动态规划，推导四个状态： - 第一次持有股票 -第一次不持有股票 - 第二次持有股票 - 第二次不持有股票 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.<span class="built_in">size</span>() == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(prices.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">5</span>, <span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] -= prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">3</span>] -= prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i&lt;prices.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>]-prices[i], dp[i<span class="number">-1</span>][<span class="number">1</span>]);</span><br><span class="line">            dp[i][<span class="number">2</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">1</span>]+prices[i], dp[i<span class="number">-1</span>][<span class="number">2</span>]);</span><br><span class="line">            dp[i][<span class="number">3</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">2</span>]-prices[i], dp[i<span class="number">-1</span>][<span class="number">3</span>]);</span><br><span class="line">            dp[i][<span class="number">4</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">3</span>]+prices[i], dp[i<span class="number">-1</span>][<span class="number">4</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[prices.<span class="built_in">size</span>()<span class="number">-1</span>][<span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;买卖股票的最佳时机&quot;&gt;121. 买卖股票的最佳时机&lt;/h3&gt;
&lt;p&gt;贪心方法：取最左最小值，取最右最大值 &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="leetcode" scheme="https://mackz-maxw.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 4.3 内核数据结构-映射</title>
    <link href="https://mackz-maxw.github.io/2025/08/08/oper_sys17/"/>
    <id>https://mackz-maxw.github.io/2025/08/08/oper_sys17/</id>
    <published>2025-08-08T18:01:45.484Z</published>
    <updated>2025-08-10T16:18:43.222Z</updated>
    
    <content type="html"><![CDATA[<h3 id="映射maps">映射（Maps）</h3><h4 id="基本概念">基本概念</h4><p>映射（又称关联数组）是由唯一键组成的集合，每个键关联一个特定值。键与值的关系称为<strong>映射关系</strong>，支持以下基本操作：<br />- <strong>添加</strong>（Add）：插入键值对<br />- <strong>移除</strong>（Remove）：删除指定键<br />- <strong>查找</strong>（Lookup）：通过键获取值</p><p>尽管哈希表是一种映射实现，但并非所有映射都基于哈希。映射也可使用<strong>自平衡二叉搜索树</strong>存储数据：<br />-<strong>哈希表</strong>：平均时间复杂度更优（O(1)），但最坏情况为线性（O(n)）<br />- <strong>二叉搜索树</strong>：最坏情况为对数复杂度（O(logn)），且支持有序遍历，无需哈希函数（仅需定义比较操作符）</p><p>在Linux内核中，映射的特定实现称为<code>idr</code>（ID RadixTree-旧版实现，现为XArray），专用于将唯一ID（UID）映射到指针。</p><hr /><h4 id="初始化idr">初始化idr</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/idr.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">idr</span> <span class="title">id_huh</span>;</span>       <span class="comment">// 静态定义  </span></span><br><span class="line">idr_init(&amp;id_huh);      <span class="comment">// 初始化  </span></span><br></pre></td></tr></table></figure><hr /><h4 id="分配uid">分配UID</h4><h5 id="预分配资源">1. 预分配资源</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">idr_pre_get</span><span class="params">(<span class="keyword">struct</span> idr *idp, <span class="type">gfp_t</span> gfp_mask)</span>;  </span><br><span class="line">```  </span><br><span class="line">- **功能**：必要时调整底层树结构，准备分配新UID  </span><br><span class="line">- **参数**：  </span><br><span class="line">  - `idp`：目标idr结构  </span><br><span class="line">  - `gfp_mask`：内存分配标志（如`GFP_KERNEL`）  </span><br><span class="line">- **返回值**：成功返回<span class="number">1</span>，失败返回<span class="number">0</span>（与其他内核函数相反！）  </span><br><span class="line"></span><br><span class="line">##### <span class="number">2.</span> 分配UID并关联指针  </span><br><span class="line">```c</span><br><span class="line"><span class="type">int</span> <span class="title function_">idr_get_new</span><span class="params">(<span class="keyword">struct</span> idr *idp, <span class="type">void</span> *ptr, <span class="type">int</span> *id)</span>;  </span><br><span class="line">```  </span><br><span class="line">- **功能**：分配新UID，将其与`ptr`关联  </span><br><span class="line">- **返回值**：  </span><br><span class="line">  - 成功：返回<span class="number">0</span>，UID存储在`id`中  </span><br><span class="line">  - 失败：返回`-EAGAIN`（需重试`idr_pre_get`）或`-ENOSPC`（idr已满）  </span><br><span class="line"></span><br><span class="line">##### 示例：分配UID  </span><br><span class="line">```c</span><br><span class="line"><span class="type">int</span> id, ret;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!idr_pre_get(&amp;id_huh, GFP_KERNEL)) </span><br><span class="line">        <span class="keyword">return</span> -ENOSPC;</span><br><span class="line">    ret = idr_get_new(&amp;id_huh, ptr, &amp;id); </span><br><span class="line">&#125; <span class="keyword">while</span> (ret == -EAGAIN);</span><br></pre></td></tr></table></figure><h5 id="分配指定最小uid">分配指定最小UID</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">idr_get_new_above</span><span class="params">(<span class="keyword">struct</span> idr *idp, <span class="type">void</span> *ptr, <span class="type">int</span> starting_id, <span class="type">int</span> *id)</span>;  </span><br><span class="line">```  </span><br><span class="line">- **功能**：分配不小于`starting_id`的UID，确保UID单调递增  </span><br><span class="line">```c</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> next_id = <span class="number">1</span>;  <span class="comment">// 全局计数器</span></span><br><span class="line"><span class="keyword">if</span> (!idr_get_new_above(&amp;id_huh, ptr, next_id, &amp;id))</span><br><span class="line">    next_id = id + <span class="number">1</span>;    <span class="comment">// 更新下一个起始ID  </span></span><br></pre></td></tr></table></figure><h5 id="xarray方式-linux-4.2以后">XArray方式 (Linux 4.2以后)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 原子分配 (无需预分配) */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">xa_alloc</span><span class="params">(<span class="keyword">struct</span> xarray *xa, <span class="type">unsigned</span> <span class="type">int</span> *id, </span></span><br><span class="line"><span class="params">             <span class="type">void</span> *entry, <span class="keyword">struct</span> xa_limit limit, <span class="type">gfp_t</span> gfp)</span>;</span><br><span class="line"><span class="comment">/* 分配递增ID示例 */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> next_id = <span class="number">1</span>;</span><br><span class="line">xa_alloc(&amp;xa_huh, &amp;next_id, ptr, XA_LIMIT(next_id, UINT_MAX), GFP_KERNEL);</span><br><span class="line"><span class="comment">// 成功后 next_id 自动递增</span></span><br></pre></td></tr></table></figure><hr /><h4 id="查找与删除">查找与删除</h4><h5 id="查找uid">查找UID</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">idr_find</span><span class="params">(<span class="keyword">struct</span> idr *idp, <span class="type">int</span> id)</span>;  </span><br><span class="line">```  </span><br><span class="line">- **返回值**：成功返回关联指针，失败返回`<span class="literal">NULL</span>`  </span><br><span class="line">- **注意**：在分配UID时，禁止将`<span class="literal">NULL</span>`作为有效idr值映射，否则无法区分查找失败与有效`<span class="literal">NULL</span>`  </span><br><span class="line"></span><br><span class="line">##### 移除UID  </span><br><span class="line">```c</span><br><span class="line"><span class="type">void</span> <span class="title function_">idr_remove</span><span class="params">(<span class="keyword">struct</span> idr *idp, <span class="type">int</span> id)</span>;  </span><br><span class="line">```  </span><br><span class="line">- **注意**：无错误返回值，需调用者确保UID存在  </span><br><span class="line"></span><br><span class="line">##### XArray方式</span><br><span class="line">```c</span><br><span class="line"><span class="comment">/* 查找 */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">xa_load</span><span class="params">(<span class="keyword">struct</span> xarray *xa, <span class="type">unsigned</span> <span class="type">long</span> index)</span>;</span><br><span class="line"><span class="comment">/* 删除并返回删除项 */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">xa_erase</span><span class="params">(<span class="keyword">struct</span> xarray *xa, <span class="type">unsigned</span> <span class="type">long</span> index)</span>;</span><br></pre></td></tr></table></figure><hr /><h4 id="销毁">销毁</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">idr_destroy</span><span class="params">(<span class="keyword">struct</span> idr *idp)</span>;                  <span class="comment">// 释放未使用内存  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">idr_remove_all</span><span class="params">(<span class="keyword">struct</span> idr *idp)</span>;               <span class="comment">// 强制移除所有UID  </span></span><br><span class="line">```  </span><br><span class="line">**典型流程**：  </span><br><span class="line">```c</span><br><span class="line"><span class="title function_">idr_remove_all</span><span class="params">(&amp;id_huh)</span>;  <span class="comment">// 先清空所有映射  </span></span><br><span class="line">idr_destroy(&amp;id_huh);     <span class="comment">// 再释放内存，确保所有idr内存被释放  </span></span><br><span class="line">kfree(user_data_ptr);  <span class="comment">// 释放实际业务数据</span></span><br></pre></td></tr></table></figure><h5 id="xarray方式">XArray方式</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 销毁并释放所有资源 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">xa_destroy</span><span class="params">(<span class="keyword">struct</span> xarray *xa)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 安全销毁流程示例 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">module_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> id;</span><br><span class="line">    <span class="type">void</span> *entry;</span><br><span class="line">    <span class="comment">// 遍历释放关联资源</span></span><br><span class="line">    xa_for_each(&amp;xa_huh, id, entry) &#123;</span><br><span class="line">        xa_erase(&amp;xa_huh, id);</span><br><span class="line">        kfree(entry);</span><br><span class="line">    &#125;</span><br><span class="line">    xa_destroy(&amp;xa_huh); <span class="comment">// 释放XArray管理内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><h4 id="关键注意事项">关键注意事项</h4><ol type="1"><li><strong>并发控制</strong>：<ul><li><code>idr_pre_get</code>无需加锁<br /></li><li><code>idr_get_new</code>等操作需自旋锁保护（参见第9/10章）</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;映射maps&quot;&gt;映射（Maps）&lt;/h3&gt;
&lt;h4 id=&quot;基本概念&quot;&gt;基本概念&lt;/h4&gt;
&lt;p&gt;映射（又称关联数组）是由唯一键组成的集合，每个键关联一个特定值。键与值的关系称为&lt;strong&gt;映射关系&lt;/strong&gt;，支持以下基本操作：&lt;br /&gt;
- </summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 4.2 内核数据结构-队列</title>
    <link href="https://mackz-maxw.github.io/2025/08/07/oper_sys16/"/>
    <id>https://mackz-maxw.github.io/2025/08/07/oper_sys16/</id>
    <published>2025-08-07T16:28:10.195Z</published>
    <updated>2025-08-08T16:28:09.294Z</updated>
    
    <content type="html"><![CDATA[<h3 id="队列">队列</h3><p>任何操作系统内核中常见的编程模式是<strong>生产者与消费者</strong>。实现此模式的最简单方式通常是使用队列，即<strong>先进先出</strong>（FIFO）。</p><p>Linux内核的通用队列实现称为<code>kfifo</code>，代码位于<code>kernel/kfifo.c</code>，头文件为<code>&lt;linux/kfifo.h&gt;</code>。本节讨论2.6.33版本更新后的API（早期版本用法略有不同，编写代码前请确认头文件）。</p><hr /><h4 id="kfifo">kfifo</h4><p>Linux的<code>kfifo</code>与其他队列抽象类似，提供两个核心操作：<br />- <strong>入队</strong>（<code>in</code>）：将数据写入队列<br />- <strong>出队</strong>（<code>out</code>）：从队列中读取数据</p><p><code>kfifo</code>对象维护两个偏移量：<br />- <strong>in偏移量</strong>：下一次入队的起始位置<br />- <strong>out偏移量</strong>：下一次出队的起始位置</p><p><strong>规则</strong>：<br />1.<code>out</code>偏移量始终≤<code>in</code>偏移量（否则会读取未入队的数据）。<br />2. 当<code>out == in</code>时，队列为空（无法出队）。<br />3. 当<code>in</code>到达队列末尾时，需重置队列才能继续入队。</p><hr /><h4 id="创建队列">创建队列</h4><h5 id="动态初始化常用">动态初始化（常用）</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">kfifo_alloc</span><span class="params">(<span class="keyword">struct</span> kfifo *fifo, <span class="type">unsigned</span> <span class="type">int</span> size, <span class="type">gfp_t</span> gfp_mask)</span>;</span><br><span class="line">```  </span><br><span class="line">- **功能**：分配大小为`size`字节的队列（`size`必须为<span class="number">2</span>的幂次），内存分配标志为`gfp_mask`（参见第<span class="number">12</span>章“内存管理”）。  </span><br><span class="line">- **返回值**：成功返回`<span class="number">0</span>`，失败返回错误码。  </span><br><span class="line">- **示例**：  </span><br><span class="line">  ```c</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">kfifo</span> <span class="title">fifo</span>;</span></span><br><span class="line">  <span class="type">int</span> ret = kfifo_alloc(&amp;fifo, PAGE_SIZE, GFP_KERNEL);</span><br><span class="line">  <span class="keyword">if</span> (ret)</span><br><span class="line">      <span class="keyword">return</span> ret; <span class="comment">// 初始化失败</span></span><br></pre></td></tr></table></figure><h5 id="自定义缓冲区">自定义缓冲区</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">kfifo_init</span><span class="params">(<span class="keyword">struct</span> kfifo *fifo, <span class="type">void</span> *buffer, <span class="type">unsigned</span> <span class="type">int</span> size)</span>;</span><br><span class="line">```  </span><br><span class="line">- **功能**：使用用户提供的`buffer`初始化队列，`size`必须为<span class="number">2</span>的幂次。  </span><br><span class="line"></span><br><span class="line">##### 静态声明（较少用）  </span><br><span class="line">```c</span><br><span class="line"><span class="title function_">DECLARE_KFIFO</span><span class="params">(name, size)</span>;  <span class="comment">// 声明队列</span></span><br><span class="line">INIT_KFIFO(name);           <span class="comment">// 初始化队列</span></span><br><span class="line">```  </span><br><span class="line">- **要求**：`size`必须为<span class="number">2</span>的幂次。  </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">#### 数据入队  </span><br><span class="line">```c</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">kfifo_in</span><span class="params">(<span class="keyword">struct</span> kfifo *fifo, <span class="type">const</span> <span class="type">void</span> *from, <span class="type">unsigned</span> <span class="type">int</span> len)</span>;</span><br><span class="line">```  </span><br><span class="line">- **功能**：从`from`复制`len`字节到队列`fifo`。  </span><br><span class="line">- **返回值**：实际入队的字节数（若空间不足，可能小于`len`）。  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 数据出队  </span><br><span class="line">##### 标准出队  </span><br><span class="line">```c</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">kfifo_out</span><span class="params">(<span class="keyword">struct</span> kfifo *fifo, <span class="type">void</span> *to, <span class="type">unsigned</span> <span class="type">int</span> len)</span>;</span><br><span class="line">```  </span><br><span class="line">- **功能**：从队列`fifo`复制最多`len`字节到`to`缓冲区。  </span><br><span class="line">- **返回值**：实际出队的字节数。  </span><br><span class="line">- **注意**：出队后数据不再保留在队列中。  </span><br><span class="line"></span><br><span class="line">##### 查看数据（不删除）  </span><br><span class="line">```c</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">kfifo_out_peek</span><span class="params">(<span class="keyword">struct</span> kfifo *fifo, <span class="type">void</span> *to, <span class="type">unsigned</span> <span class="type">int</span> len, <span class="type">unsigned</span> offset)</span>;</span><br><span class="line">```  </span><br><span class="line">- **功能**：与`kfifo_out`类似，但**不移动out偏移量**，数据仍可后续读取。  </span><br><span class="line">- **参数**：`offset`指定队列中的起始位置（<span class="number">0</span>表示队头）。  </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">#### 获取队列信息</span><br><span class="line"><span class="number">1.</span> **获取队列总容量**</span><br><span class="line">```c</span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">kfifo_size</span><span class="params">(<span class="keyword">struct</span> kfifo *fifo)</span>;</span><br></pre></td></tr></table></figure><ul><li>返回队列底层缓冲区的总字节数</li></ul><ol start="2" type="1"><li><strong>获取已入队数据量</strong> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">kfifo_len</span><span class="params">(<span class="keyword">struct</span> kfifo *fifo)</span>;</span><br></pre></td></tr></table></figure></li></ol><ul><li>返回当前队列中已存储的字节数</li><li>（注：内核命名存在不一致性，需特别注意）</li></ul><ol start="3" type="1"><li><strong>获取剩余空间</strong> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">kfifo_avail</span><span class="params">(<span class="keyword">struct</span> kfifo *fifo)</span>;</span><br></pre></td></tr></table></figure></li></ol><ul><li>返回可继续写入的剩余字节数</li></ul><ol start="4" type="1"><li><strong>队列状态检查</strong> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">kfifo_is_empty</span><span class="params">(<span class="keyword">struct</span> kfifo *fifo)</span>;</span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">kfifo_is_full</span><span class="params">(<span class="keyword">struct</span> kfifo *fifo)</span>;</span><br></pre></td></tr></table></figure></li></ol><ul><li>返回非零值表示队列为空/满</li><li>返回零表示非空/非满</li></ul><h4 id="重置与销毁队列">重置与销毁队列</h4><ol type="1"><li><strong>重置队列</strong> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">kfifo_reset</span><span class="params">(<span class="keyword">struct</span> kfifo *fifo)</span>;</span><br></pre></td></tr></table></figure></li></ol><ul><li>清空队列所有内容（不释放内存）</li></ul><ol start="2" type="1"><li><strong>销毁动态分配的队列</strong> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">kfifo_free</span><span class="params">(<span class="keyword">struct</span> kfifo *fifo)</span>;</span><br></pre></td></tr></table></figure></li></ol><ul><li>释放通过<code>kfifo_alloc()</code>创建的队列</li><li>注意：使用<code>kfifo_init()</code>创建的队列需手动释放关联缓冲区</li></ul><h4 id="实际应用示例">实际应用示例</h4><p>创建8KB大小的kfifo队列： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kfifo.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kfifo</span> <span class="title">my_fifo</span>;</span>  <span class="comment">// 声明 kfifo 结构体</span></span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"><span class="comment">// 分配 8KB 队列</span></span><br><span class="line">ret = kfifo_alloc(&amp;my_fifo, <span class="number">8192</span>, GFP_KERNEL);  <span class="comment">// 8192 = 8 * 1024</span></span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">    pr_err(<span class="string">&quot;Failed to allocate kfifo: error %d\n&quot;</span>, ret);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 验证大小</span></span><br><span class="line">pr_info(<span class="string">&quot;Created FIFO size: %u bytes\n&quot;</span>, kfifo_size(&amp;my_fifo));  <span class="comment">// 输出 8192</span></span><br></pre></td></tr></table></figure> &gt; 队列总容量 = 8 KB = 8 ×1024 字节 = 8192 字节（环形缓冲区无需减一） &gt;<code>unsigned int</code>大小 = 4字节（也可能是8字节，可以通过<code>sizeof(unsigned int)</code>获取）&gt; 这样一个队列最多可以容纳8192 字节 / 4 字节 = 2048个<code>unsigned int</code></p><p><strong>入队操作</strong>： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 入队0-31的整数 */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    kfifo_in(fifo, &amp;i, <span class="keyword">sizeof</span>(i));</span><br></pre></td></tr></table></figure></p><p><strong>查看队首元素（不移除）</strong>： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> val;</span><br><span class="line"><span class="type">int</span> ret = kfifo_out_peek(fifo, &amp;val, <span class="keyword">sizeof</span>(val), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="keyword">sizeof</span>(val))</span><br><span class="line">    <span class="keyword">return</span> -EINVAL;</span><br><span class="line">printk(KERN_INFO <span class="string">&quot;%u\n&quot;</span>, val); <span class="comment">/* 输出: 0 */</span></span><br></pre></td></tr></table></figure></p><p><strong>完整出队操作</strong>： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (kfifo_avail(fifo)) &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="type">int</span> ret = kfifo_out(fifo, &amp;val, <span class="keyword">sizeof</span>(val));</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="keyword">sizeof</span>(val))</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;%u\n&quot;</span>, val); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出: 0 1 2 ... 31 (严格保持FIFO顺序) */</span></span><br></pre></td></tr></table></figure> -输出顺序为0→31证明是标准的FIFO队列 - 若输出为31→0则变为栈结构（LIFO） -所有操作均保持原子性，适合生产者-消费者场景（注：实际开发中通常入队复杂结构体而非基础类型）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;队列&quot;&gt;队列&lt;/h3&gt;
&lt;p&gt;任何操作系统内核中常见的编程模式是&lt;strong&gt;生产者与消费者&lt;/strong&gt;。实现此模式的最简单方式通常是使用队列，即&lt;strong&gt;先进先出&lt;/strong&gt;（FIFO）。&lt;/p&gt;
&lt;p&gt;Linux内核的通用队列实现称为&lt;</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 4.1 内核数据结构-链表</title>
    <link href="https://mackz-maxw.github.io/2025/08/06/oper_sys15/"/>
    <id>https://mackz-maxw.github.io/2025/08/06/oper_sys15/</id>
    <published>2025-08-06T16:30:09.182Z</published>
    <updated>2025-08-07T16:27:55.823Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链表linked-lists">链表（Linked Lists）</h3><h4 id="单链表与双链表">单链表与双链表</h4><ul><li><strong>单链表</strong>：每个节点只包含指向下一个节点的指针。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_element</span> &#123;</span></span><br><span class="line">    <span class="type">void</span> *data;                   <span class="comment">// 数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_element</span> *<span class="title">next</span>;</span>    <span class="comment">// 指向下一个节点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><strong>双链表</strong>：每个节点包含指向前一个和后一个节点的指针。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_element</span> &#123;</span></span><br><span class="line">    <span class="type">void</span> *data;                   <span class="comment">// 数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_element</span> *<span class="title">next</span>;</span>    <span class="comment">// 指向下一个节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_element</span> *<span class="title">prev</span>;</span>    <span class="comment">// 指向前一个节点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="循环链表circular-linked-lists">循环链表（Circular LinkedLists）</h4><ul><li>普通链表的最后一个节点的 next 指针通常指向 NULL，表示结束。</li><li>循环链表的最后一个节点的 next指针指向第一个节点，形成环状结构。循环链表可以是单向或双向的。</li><li>Linux 内核的链表实现本质上是循环双链表，灵活性最高。</li></ul><h4 id="链表的遍历">链表的遍历</h4><ul><li>链表的遍历是线性的：从头节点开始，依次通过 next指针访问每个节点。</li><li>非循环链表的最后一个节点 next 为 NULL；循环链表的最后一个节点 next指向头节点。</li><li>双链表可以支持从尾节点向前遍历。</li><li>链表适合需要频繁插入、删除和遍历全部元素的场景，不适合随机访问。</li></ul><h3 id="linux-内核链表实现方式">Linux 内核链表实现方式</h3><h4 id="与传统链表的区别">1. 与传统链表的区别</h4><ul><li>传统链表通常是在数据结构里直接加 <code>next</code> 和<code>prev</code> 指针，把结构本身变成链表节点。</li><li>Linux内核采用<strong>嵌入链表节点</strong>的方式：在自定义结构体里嵌入一个<code>struct list_head</code> 成员，而不是直接用<code>next</code>/<code>prev</code> 指针。</li></ul><h4 id="内核链表节点结构">2. 内核链表节点结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">prev</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>只包含指向前后节点的指针，不存储数据。</li></ul><h4 id="如何使用">3. 如何使用</h4><ul><li>在你的结构体里嵌入 <code>struct list_head</code> 成员，例如：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fox</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> tail_length;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> weight;</span><br><span class="line">    <span class="type">bool</span> is_fantastic;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span> <span class="comment">// 链表节点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>这样，<code>fox.list.next</code> 指向下一个fox，<code>fox.list.prev</code> 指向上一个 fox。</li></ul><h4 id="链表操作">4. 链表操作</h4><ul><li>内核提供了丰富的链表操作函数（如<code>list_add()</code>），这些函数只操作<code>list_head</code>，不关心具体数据类型。</li><li>通过 <code>container_of</code> 宏，可以从 <code>list_head</code>指针反查到包含它的结构体： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> container_of(ptr, type, member) \</span></span><br><span class="line"><span class="meta">    ((type *)((char *)(ptr) - offsetof(type, member)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> list_entry(ptr, type, member) \</span></span><br><span class="line"><span class="meta">    container_of(ptr, type, member)</span></span><br></pre></td></tr></table></figure></li><li>用 <code>list_entry()</code>可以从链表节点指针获取到完整的结构体数据。</li></ul><h4 id="链表初始化">5. 链表初始化</h4><ul><li>动态分配结构体后，用 <code>INIT_LIST_HEAD(&amp;obj-&gt;list)</code>在运行时初始化链表节点。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">fox</span> *red_fox; </span><br><span class="line">red_fox = <span class="built_in">kmalloc</span>(<span class="built_in">sizeof</span>(*red_fox), GFP_KERNEL); </span><br><span class="line">red_fox-&gt;tail_length = <span class="number">40</span>; </span><br><span class="line">red_fox-&gt;weight = <span class="number">6</span>; </span><br><span class="line">red_fox-&gt;is_fantastic = <span class="literal">false</span>; </span><br><span class="line"><span class="built_in">INIT_LIST_HEAD</span>(&amp;red_fox-&gt;list);</span><br></pre></td></tr></table></figure></li><li>静态定义时可用 <code>LIST_HEAD_INIT()</code> 宏在编译时初始化。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">fox</span> red_fox = &#123; </span><br><span class="line">   .tail_length = <span class="number">40</span>, </span><br><span class="line">   .weight = <span class="number">6</span>, </span><br><span class="line">   .list  = <span class="built_in">LIST_HEAD_INIT</span>(red_fox.list),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="链表头">6. 链表头</h4><ul><li>通常会定义一个专门的 <code>list_head</code>变量作为链表头，用于管理整个链表： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="title function_">LIST_HEAD</span><span class="params">(fox_list)</span>;</span><br></pre></td></tr></table></figure></li><li>这个链表头本质上也是一个 <code>list_head</code>节点，但不存储实际数据，只作为入口。</li></ul><h3 id="linux-内核链表的操作方法">Linux 内核链表的操作方法</h3><ol type="1"><li><p><strong>所有链表操作函数都只操作 <code>struct list_head</code>指针，和具体数据类型无关。</strong></p><ul><li>这些函数都定义在<code>&lt;linux/list.h&gt;</code>，实现为内联函数，效率高。</li><li>所有操作都是 O(1)常数时间，无论链表长度如何，插入、删除等操作速度都一样。</li></ul></li><li><p><strong>常用操作函数：</strong></p><ul><li><strong>添加节点</strong>（底层的循环链表特性，每一个节点都可以填入head）<ul><li><code>list_add(new, head)</code>：把新节点插入到 head节点之后（将最后一个节点填入head，实现栈）。</li><li><code>list_add_tail(new, head)</code>：把新节点插入到 head节点之前（将第一个节点填入head，实现队列）。</li></ul></li><li><strong>删除节点</strong><ul><li><code>list_del(entry)</code>：把 entry节点从链表中移除，但不释放内存。</li><li><code>list_del_init(entry)</code>：移除节点并重新初始化它，方便后续复用。</li></ul></li><li><strong>移动节点</strong><ul><li><code>list_move(list, head)</code>：把节点 list 移到 head节点之后。</li><li><code>list_move_tail(list, head)</code>：把节点 list 移到 head节点之前。</li></ul></li><li><strong>拼接链表</strong><ul><li><code>list_splice(list, head)</code>：把 list 指向的链表拼接到 head节点之后。</li><li><code>list_splice_init(list, head)</code>：拼接后把原链表重新初始化。</li></ul></li><li><strong>判断链表是否为空</strong><ul><li><code>list_empty(head)</code>：判断链表是否为空，返回非零表示空。</li></ul></li></ul></li><li><p><strong>内部函数优化</strong></p><ul><li>如果你已经有了节点的 next 和 prev 指针，可以直接调用内部函数（如<code>__list_del(prev, next)</code>），省去多余的指针解引用。</li><li>这些内部函数一般以双下划线 <code>__</code>开头，只有在你已经拿到指针时才建议用。</li></ul></li></ol><h3 id="linux-内核链表的遍历">Linux 内核链表的遍历</h3><p>完整遍历包含n个节点的链表是O(n)时间复杂度操作。</p><h4 id="基础遍历方法">基础遍历方法</h4><p>最基础的遍历宏是<code>list_for_each()</code>，接收两个<code>list_head</code>参数：-<strong>第一个参数</strong>：指向当前项的指针（需调用者提供的临时变量）- <strong>第二个参数</strong>：要遍历的链表头节点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">p</span>;</span></span><br><span class="line">list_for_each(p, fox_list) &#123;</span><br><span class="line">    <span class="comment">/* p指向链表中的某个节点 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但仅获取<code>list_head</code>指针通常无用，我们需要的是包含该链表节点的结构体（前文已讨论）指针。此时应使用<code>list_entry()</code>宏：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">p</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fox</span> *<span class="title">f</span>;</span></span><br><span class="line">list_for_each(p, &amp;fox_list) &#123;</span><br><span class="line">    f = list_entry(p, <span class="keyword">struct</span> fox, <span class="built_in">list</span>); <span class="comment">// 获取包含list_head的fox结构体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实用遍历方法">实用遍历方法</h4><p>上述方法不够直观，因此内核主要使用<code>list_for_each_entry()</code>宏，该宏自动完成<code>list_entry()</code>转换：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_for_each_entry(pos, head, member)</span><br></pre></td></tr></table></figure><p>参数说明： -<code>pos</code>：包含<code>list_head</code>的结构体指针（相当于<code>list_entry()</code>返回值）- <code>head</code>：链表头节点指针（如<code>fox_list</code>） -<code>member</code>：<code>list_head</code>在结构体中的成员名（如<code>list</code>）</p><p>示例： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fox</span> *<span class="title">f</span>;</span></span><br><span class="line">list_for_each_entry(f, &amp;fox_list, <span class="built_in">list</span>) &#123;</span><br><span class="line">    <span class="comment">/* 每次迭代f指向下一个fox结构体 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>实际案例</strong>（来自内核文件系统通知系统inotify）：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> inotify_watch *<span class="title function_">inode_find_handle</span><span class="params">(<span class="keyword">struct</span> inode *inode, </span></span><br><span class="line"><span class="params">                                              <span class="keyword">struct</span> inotify_handle *ih)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">inotify_watch</span> *<span class="title">watch</span>;</span></span><br><span class="line">    list_for_each_entry(watch, &amp;inode-&gt;inotify_watches, i_list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (watch-&gt;ih == ih)</span><br><span class="line">            <span class="keyword">return</span> watch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>此函数遍历<code>inode-&gt;inotify_watches</code>链表，查找匹配<code>inotify_handle</code>的节点。</p><h4 id="反向遍历">反向遍历</h4><p><code>list_for_each_entry_reverse()</code>功能与正向遍历相同，但沿<code>prev</code>指针逆向移动：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_for_each_entry_reverse(pos, head, member)</span><br></pre></td></tr></table></figure> 适用场景： 1. 性能优化：当目标节点更靠近链表尾部时 2.顺序要求：如实现LIFO栈操作 若无特殊需求，建议使用正向遍历。</p><h4 id="安全删除遍历">安全删除遍历</h4><p>标准遍历方法在迭代过程中删除节点会导致问题（后续迭代无法获取正确的next/prev指针）。内核提供安全版本：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_for_each_entry_safe(pos, next, head, member)</span><br></pre></td></tr></table></figure>参数<code>next</code>用于临时存储下一节点指针，确保当前节点可安全删除。</p><p><strong>inotify示例</strong>： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">inotify_inode_is_dead</span><span class="params">(<span class="keyword">struct</span> inode *inode)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">inotify_watch</span> *<span class="title">watch</span>, *<span class="title">next</span>;</span></span><br><span class="line">    mutex_lock(&amp;inode-&gt;inotify_mutex);</span><br><span class="line">    list_for_each_entry_safe(watch, next, &amp;inode-&gt;inotify_watches, i_list) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">inotify_handle</span> *<span class="title">ih</span> =</span> watch-&gt;ih;</span><br><span class="line">        mutex_lock(&amp;ih-&gt;mutex);</span><br><span class="line">        inotify_remove_watch_locked(ih, watch); <span class="comment">// 删除watch节点</span></span><br><span class="line">        mutex_unlock(&amp;ih-&gt;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">    mutex_unlock(&amp;inode-&gt;inotify_mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>逆向安全遍历版本： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_for_each_entry_safe_reverse(pos, n, head, member)</span><br></pre></td></tr></table></figure></p><h4 id="注意事项">注意事项</h4><ol type="1"><li>"safe"宏仅防护循环体内的删除操作，若存在并发操作仍需加锁</li><li>更多链表操作方法详见<code>&lt;linux/list.h&gt;</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;链表linked-lists&quot;&gt;链表（Linked Lists）&lt;/h3&gt;
&lt;h4 id=&quot;单链表与双链表&quot;&gt;单链表与双链表&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单链表&lt;/strong&gt;：每个节点只包含指向下一个节点的指针。
&lt;figure cla</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>代码随想录 | 刷题-动态规划7</title>
    <link href="https://mackz-maxw.github.io/2025/08/05/kamacode34/"/>
    <id>https://mackz-maxw.github.io/2025/08/05/kamacode34/</id>
    <published>2025-08-05T20:52:02.062Z</published>
    <updated>2025-08-11T16:45:01.577Z</updated>
    
    <content type="html"><![CDATA[<h3 id="打家劫舍">198.打家劫舍</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size()+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">1</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-2</span>]+nums[i<span class="number">-1</span>], dp[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="打家劫舍ii">213.打家劫舍II</h3><p>三种情况的动态规划： - 不考虑头尾元素 - 考虑头元素，不考虑尾元素 -考虑尾元素，不考虑头元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">1</span>)<span class="keyword">return</span> nums[nums.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">        <span class="type">int</span> res_front = <span class="built_in">rob_range</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>()<span class="number">-2</span>);</span><br><span class="line">        <span class="type">int</span> res_back = <span class="built_in">rob_range</span>(nums, <span class="number">1</span>, nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">max</span>(res_front, res_back);</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() &gt;= <span class="number">3</span>)res = <span class="built_in">max</span>(res,<span class="built_in">rob_range</span>(nums, <span class="number">1</span>, nums.<span class="built_in">size</span>()<span class="number">-2</span>));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob_range</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> start, <span class="type">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size()+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(start == end)<span class="keyword">return</span> nums[start];</span><br><span class="line">        dp[start] = nums[start];</span><br><span class="line">        dp[start+<span class="number">1</span>] = <span class="built_in">max</span>(nums[start], nums[start+<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>((start+<span class="number">1</span>) == end)<span class="keyword">return</span> dp[start+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = start+<span class="number">2</span>; i&lt;=end; i++)&#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-2</span>]+nums[i], dp[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[end];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="打家劫舍iii">337.打家劫舍III</h3><p>直接使用递归，计算抢当前节点还是不抢当前节点时，对相同的子树进行了多次独立的递归调用。会超时，推荐记忆化：利用递归，每层返回一个保存当前节点偷还是不偷的数组 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// struct TreeNode&#123;</span></span><br><span class="line"><span class="comment">//     int val;</span></span><br><span class="line"><span class="comment">//     TreeNode* left;</span></span><br><span class="line"><span class="comment">//     TreeNode* right;</span></span><br><span class="line"><span class="comment">//     TreeNode(int v) : val(v), left(nullptr), right(nullptr)&#123;&#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rob_tree</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)<span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; left = <span class="built_in">rob_tree</span>(root-&gt;left);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; right = <span class="built_in">rob_tree</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ↓不抢当前节点时，既可以选择抢子节点，也可选择不抢，可能会有跳过两个节点抢更优的情况</span></span><br><span class="line">        <span class="type">int</span> next_h = <span class="built_in">max</span>(left[<span class="number">0</span>], left[<span class="number">1</span>])+<span class="built_in">max</span>(right[<span class="number">0</span>], right[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span> this_h = root-&gt;val+left[<span class="number">0</span>]+right[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;next_h, this_h&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res = <span class="built_in">rob_tree</span>(root);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(res[<span class="number">0</span>], res[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;打家劫舍&quot;&gt;198.打家劫舍&lt;/h3&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="leetcode" scheme="https://mackz-maxw.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>代码随想录 | 八股-TCP机制</title>
    <link href="https://mackz-maxw.github.io/2025/07/31/kamabagu6/"/>
    <id>https://mackz-maxw.github.io/2025/07/31/kamabagu6/</id>
    <published>2025-07-31T16:14:16.338Z</published>
    <updated>2025-08-02T01:01:52.581Z</updated>
    
    <content type="html"><![CDATA[<h3 id="tcp连接如何确保可靠性">TCP连接如何确保可靠性</h3><p><strong>序列号与确认应答：</strong> * <strong>序列号：</strong>发送方为每个<strong>字节</strong>的数据分配一个唯一的序列号。TCP报文段的首部包含该报文段中<strong>第一个数据字节的序列号</strong>。* <strong>确认号：</strong>接收方收到数据后，会发送一个<strong>确认报文段</strong>。该报文段中的<strong>确认号</strong>字段表示接收方<strong>期望收到的下一个字节的序列号</strong>。例如，接收方正确收到了序列号为1001-2000 的数据，它会发送确认号 2001，表示“我已正确收到序列号 2000及之前的所有字节，请从序列号 2001 开始发送”。 * <strong>机制：</strong>发送方发送数据后，会等待接收方的确认。如果收到预期的确认，说明数据已成功送达。这是可靠性的基石。</p><p><strong>校验和：</strong> * <strong>计算：</strong>发送方在发送数据前，会计算报文段（首部和数据）的<strong>校验和</strong>，并将结果放入首部的校验和字段。* <strong>验证：</strong>接收方收到报文段后，会使用相同的算法重新计算校验和。 *<strong>丢弃：</strong>如果接收方计算出的校验和与报文段首部中的校验和不匹配，说明数据在传输过程中发生了比特错误（比特翻转）。接收方会<strong>丢弃</strong>该损坏的报文段，并且<strong>不会发送任何确认</strong>。* <strong>触发重传：</strong>由于发送方没有收到确认（见第1、2点），最终会触发超时重传。</p><p><strong>流量控制：</strong> * <strong>目的：</strong>防止发送方发送数据过快，导致接收方缓冲区溢出而丢失数据。 *<strong>滑动窗口：</strong>接收方通过TCP首部中的<strong>窗口大小</strong>字段告知发送方自己当前<strong>接收缓冲区</strong>的可用空间大小。这个值称为<strong>接收窗口</strong>。* <strong>发送窗口限制：</strong>发送方维护一个<strong>发送窗口</strong>，其大小不能超过接收方通告的接收窗口大小。发送窗口内的数据是允许发送但尚未被确认的数据。* <strong>动态调整：</strong>随着接收方处理数据并释放缓冲区空间，它会通过后续的确认报文段更新其通告的窗口大小，发送方据此调整自己的发送窗口。这确保了发送速率不会超过接收方的处理能力。</p><p><strong>拥塞控制：</strong> * <strong>目的：</strong>防止发送方发送数据过快，导致网络中间设备（如路由器）的缓冲区溢出，引发网络拥塞和数据包丢失。这是对整个网络的保护机制。* <strong>核心机制：</strong>发送方维护一个<strong>拥塞窗口</strong>，它限制了在任何时候可以发送但未被确认的数据量。发送窗口的实际大小是<code>min(接收窗口, 拥塞窗口)</code>。</p><p><strong>超时重传：</strong> * <strong>核心思想：</strong>发送方发送一个报文段后启动一个<strong>重传计时器</strong>。如果在计时器超时之前没有收到该报文段的确认，发送方就认为该报文段已丢失或损坏，会<strong>重新发送</strong>该报文段。* <strong>动态计算超时时间：</strong>超时时间是根据历史数据包往返时间动态计算出来的，称为<strong>RTO</strong>。这确保了在网络状况变化时也能有效工作。</p><h3 id="拥塞控制是怎么实现的">拥塞控制是怎么实现的</h3><ul><li><strong>慢启动：</strong>连接开始时，拥塞窗口从一个很小的值开始，并随着每个成功确认的报文段而<strong>指数增长</strong>（每收到一个ACK，cwnd增加1个MSS），快速探测可用带宽。</li><li><strong>拥塞避免：</strong>当拥塞窗口增长到某个<strong>阈值</strong>时，进入拥塞避免阶段，窗口变为<strong>线性增长</strong>（每收到一个RTT内的所有ACK，cwnd增加1个MSS），增速放缓。</li><li><strong>拥塞检测：</strong><ul><li><strong>超时：</strong>如果发生超时（表明有严重丢包），阈值被设置为当前拥塞窗口的一半（<code>ssthresh = cwnd / 2</code>），拥塞窗口被重置为1（或一个很小的值），重新进入慢启动。</li><li><strong>快速重传与快速恢复：</strong>如果发送方收到<strong>3个重复的ACK</strong>（表明有单个数据包丢失，但后续数据包接收方还能收到），它立即重传丢失的报文段（快速重传），并将阈值设置为当前拥塞窗口的一半（<code>ssthresh = cwnd / 2</code>），拥塞窗口设置为阈值加3（或类似算法），然后进入<strong>快速恢复</strong>阶段。在快速恢复阶段，每收到一个重复ACK，拥塞窗口增加1个MSS。当收到一个新数据的ACK时（表明重传成功），退出快速恢复，将拥塞窗口设置为阈值大小，进入拥塞避免阶段。这比超时恢复要快得多。</li></ul></li></ul><h3 id="tcp流量控制是怎么实现的">TCP流量控制是怎么实现的</h3><p>TCP流量控制的实现核心在于<strong>滑动窗口协议（Sliding WindowProtocol）</strong>，其目的是<strong>防止发送方发送数据过快导致接收方缓冲区溢出</strong>。这是通过接收方动态通告其<strong>接收窗口大小</strong>来实现的。</p><ol type="1"><li><strong>初始通告：</strong><ul><li>连接建立时（三次握手阶段），接收方在其<code>SYN+ACK</code>报文段中设置<code>窗口大小</code>字段，告知发送方其初始接收缓冲区大小。</li></ul></li><li><strong>动态窗口通告：</strong><ul><li><strong>接收方处理数据：</strong>当接收方应用程序从缓冲区读取数据后，缓冲区空间被释放，可用空间增加。</li><li><strong>发送更新窗口：</strong>接收方在发送给发送方的<strong>任何报文段</strong>（包括数据报文段、纯ACK确认报文段）中，都会携带最新的<code>窗口大小</code>值。</li><li><strong>即时生效：</strong>发送方收到包含新窗口大小的报文段后，<strong>立即更新</strong>其对接收方接收窗口的理解。</li></ul></li><li><strong>发送方行为 - 滑动窗口：</strong><ul><li><strong>维护状态：</strong> 发送方维护三个指针：<ul><li><code>SND.UNA</code>：最早未确认字节的序列号。</li><li><code>SND.NXT</code>：下一个要发送字节的序列号。</li><li><strong>发送窗口大小(<code>swnd</code>)</strong>：<code>swnd = min(接收方通告的接收窗口, 拥塞窗口)</code>。流量控制关注的是接收窗口部分。</li></ul></li><li><strong>发送约束：</strong> 发送方只能发送序列号在<code>[SND.UNA, SND.UNA + swnd)</code> 范围内的数据。</li><li><strong>窗口滑动：</strong><ul><li>当发送方收到新的ACK确认（推进了<code>SND.UNA</code>），并且接收方通告了新的（可能更大的）窗口大小时，发送窗口会向右“滑动”。</li><li>滑动后，<code>SND.NXT</code>可能可以继续发送新的数据（如果可用窗口&gt; 0）。</li></ul></li></ul></li><li><strong>关键操作示例：</strong><ul><li>假设接收方初始通告<code>rwnd = 4000</code>字节。</li><li>发送方发送2000字节（<code>SND.NXT</code>前进2000）。</li><li>接收方收到这2000字节，但应用程序只读取了1000字节。此时接收缓冲区：<ul><li>已用空间 = 1000字节（2000收到 - 1000被读走）</li><li>可用空间 = 3000字节（初始4000 - 1000占用）。</li><li>接收方在ACK中设置<code>rwnd = 3000</code>。</li></ul></li><li>发送方收到ACK和<code>rwnd=3000</code>：<ul><li><code>SND.UNA</code>前进2000（假设ACK确认了前2000字节）。</li><li>更新<code>swnd = min(3000, cwnd)</code>。</li><li>新发送窗口变为 <code>[新SND.UNA, 新SND.UNA + 3000)</code>。</li><li><code>SND.NXT</code>可能指向新窗口内的位置，允许发送最多3000字节新数据（减去已在传输中的）。</li></ul></li></ul></li><li><strong>处理零窗口 - 死锁预防：</strong><ul><li><strong>问题：</strong>如果接收方缓冲区满，它会通告<code>rwnd = 0</code>。发送方必须立即停止发送数据。但如果之后接收方应用程序读取数据释放了缓冲区，它需要通知发送方<code>rwnd &gt; 0</code>。如果这个通知（携带新<code>rwnd</code>的ACK）丢失了怎么办？双方会陷入死锁：发送方在等待窗口更新，接收方以为发送方知道窗口已打开。</li><li><strong>解决方案：零窗口探测：</strong><ul><li>当发送方收到<code>rwnd = 0</code>时，启动一个<strong>持续计时器</strong>。</li><li>计时器超时后，发送方发送一个<strong>1字节的探测报文段</strong>。</li><li>接收方收到探测报文段：<ul><li>如果缓冲区仍满，再次回复<code>rwnd = 0</code>，发送方重置持续计时器。</li><li>如果缓冲区已有空间，回复包含当前<code>rwnd &gt; 0</code>的ACK。</li></ul></li><li>探测报文段确保即使窗口更新ACK丢失，死锁也能被打破。</li></ul></li></ul></li></ol><h3 id="udp怎么实现可靠传输">UDP怎么实现可靠传输</h3><p>（参考QUIC）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;tcp连接如何确保可靠性&quot;&gt;TCP连接如何确保可靠性&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;序列号与确认应答：&lt;/strong&gt; * &lt;strong&gt;序列号：&lt;/strong&gt;
发送方为每个&lt;strong&gt;字节&lt;/strong&gt;的数据分配一个唯一的序列号。TCP报文</summary>
      
    
    
    
    <category term="comp basic" scheme="https://mackz-maxw.github.io/categories/comp-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>代码随想录 | 八股-HTTP安全与TCP连接</title>
    <link href="https://mackz-maxw.github.io/2025/07/30/kamabagu5/"/>
    <id>https://mackz-maxw.github.io/2025/07/30/kamabagu5/</id>
    <published>2025-07-30T20:30:07.831Z</published>
    <updated>2025-07-31T03:43:31.865Z</updated>
    
    <content type="html"><![CDATA[<h3 id="https和http有哪些区别">HTTPS和HTTP有哪些区别</h3><ol type="1"><li><strong>加密性</strong><ul><li>HTTP：数据明文传输，容易被窃听和篡改。<br /></li><li>HTTPS：在 HTTP 基础上增加了 SSL/TLS 加密层，数据传输安全。</li></ul></li><li><strong>连接建立流程</strong><ul><li>HTTP：TCP 三次握手后即可传输数据。<br /></li><li>HTTPS：TCP 三次握手后，还需进行 SSL/TLS握手，协商密钥后才能加密传输数据。</li></ul></li><li><strong>端口号</strong><ul><li>HTTP：默认端口 80<br /></li><li>HTTPS：默认端口 443</li></ul></li><li><strong>证书机制</strong><ul><li>HTTP：不需要证书。<br /></li><li>HTTPS：需要向 CA 申请数字证书，验证服务器身份，防止伪造。</li></ul></li></ol><h3id="https的工作原理https建立连接的过程">HTTPS的工作原理（HTTPS建立连接的过程）</h3><ol type="1"><li><p><strong>密钥交换</strong><br />客户端发起HTTPS请求，服务器发送公钥证书给客户端。</p></li><li><p><strong>证书验证</strong><br />客户端验证服务器证书是否由受信任的CA签发，并检查证书有效性。</p></li><li><p><strong>加密通信协商</strong><br />客户端生成一个随机的对称加密密钥，用服务器公钥加密后发送给服务器。</p></li><li><p><strong>建立安全连接</strong><br />服务器用私钥解密，得到对称加密密钥。此时双方拥有相同密钥，可以进行加密通信。</p></li><li><p><strong>数据传输</strong><br />双方用对称加密密钥对数据进行加密传输，保证安全性。</p></li><li><p><strong>完整性校验</strong><br />SSL/TLS协议还会对数据进行完整性校验，防止数据被篡改。</p></li><li><p><strong>结束连接</strong><br />通信结束后，会话密钥被销毁，避免安全隐患。</p></li></ol><h3 id="tcp和udp的区别">TCP和UDP的区别</h3><ol type="1"><li><strong>连接方式</strong><ul><li>TCP：面向连接，传输前需建立连接（三次握手）。<br /></li><li>UDP：无连接，直接发送数据。</li></ul></li><li><strong>可靠性</strong><ul><li>TCP：可靠传输，保证数据顺序和完整性，丢包会重传。<br /></li><li>UDP：不保证可靠性，可能丢包、乱序、不重传。</li></ul></li><li><strong>流量与拥塞控制</strong><ul><li>TCP：有流量控制（滑动窗口）和拥塞控制，能根据网络状况调整速率。<br /></li><li>UDP：没有流量和拥塞控制，发送速率固定。</li></ul></li><li><strong>报文头部</strong><ul><li>TCP：头部复杂，包含序列号、确认号等。<br /></li><li>UDP：头部简单，只有基本信息。</li></ul></li><li><strong>性能开销</strong><ul><li>TCP：机制多，性能开销大，延迟高。<br /></li><li>UDP：机制简单，开销小，延迟低。</li></ul></li><li><strong>适用场景</strong><ul><li>TCP：适合需要可靠传输的场景，如网页浏览、文件传输等。<br /></li><li>UDP：适合对实时性要求高的场景，如语音通话、视频会议等。</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;https和http有哪些区别&quot;&gt;HTTPS和HTTP有哪些区别&lt;/h3&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;strong&gt;加密性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;HTTP：数据明文传输，容易被窃听和篡改。&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;HT</summary>
      
    
    
    
    <category term="comp basic" scheme="https://mackz-maxw.github.io/categories/comp-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>代码随想录 | 八股-c++动态内存分配</title>
    <link href="https://mackz-maxw.github.io/2025/07/25/kamabagu26/"/>
    <id>https://mackz-maxw.github.io/2025/07/25/kamabagu26/</id>
    <published>2025-07-26T01:32:48.081Z</published>
    <updated>2025-07-26T02:04:00.839Z</updated>
    
    <content type="html"><![CDATA[<h3 id="new和malloc有什么区别">new和malloc有什么区别</h3><p>new和malloc在C++中都用于动态内存分配，但它们之间有几个关键的区别：</p><p>语法层面： new是C++的操作符，可以直接用来分配对象或数组。malloc是一个函数，通常需要包含头文件<cstdlib>，并且只分配原始内存。类型安全：new是类型安全的，它会根据分配的对象类型进行正确的内存分配和构造函数调用。malloc 不是类型安全的，它只分配原始内存，不调用构造函数。返回类型是void*，需要强制类型转换为具体的指针类型。 构造与析构： 使用 new分配的对象在对象生命周期结束时需要使用 delete 来释放，delete会自动调用对象的析构函数。 使用 malloc 分配的内存需要使用 free来释放，free不会自动调用析构函数，因此如果分配的是对象数组，需要手动调用析构函数。异常安全性： new在分配失败时会抛出std::bad_alloc异常。malloc在分配失败时返回NULL指针。 管理机制：C++中的new和delete通常由编译器实现，可能包含一些额外的内存管理机制。C语言的malloc和free由C标准库提供，与编译器无关。总结来说，new和malloc都是动态内存分配的手段，但new提供了类型安全和构造/析构的自动化，而malloc则提供了更底层的内存分配方式，需要手动管理构造和析构。在C++中，推荐使用new来分配对象，以保持类型安全和自动化的资源管理。</p><h3 id="delete-和-free-有什么区别">delete 和 free 有什么区别？</h3><p>delete和free都是用来释放动态分配的内存，但它们有不同的使用方式：</p><p>语法：</p><p>delete是C++中的关键字，用于释放由new分配的对象。free是C语言中的函数，通常包含在&lt;stdlib.h&gt;头文件中，用于释放由malloc分配的内存。对象销毁：</p><p>当使用 delete 释放对象内存时，C++编译器会自动调用对象的析构函数，释放与对象相关的资源，并执行对象的清理工作。free 仅释放内存，不调用析构函数。因此，如果使用 malloc 分配了 C++对象的内存，需要手动调用析构函数后再调用 free。 数组处理：</p><p>如果是数组，C++提供了delete[]来释放整个数组的内存，而C语言中仍然使用free，没有区分单个对象和数组。返回值:</p><p>free 没有返回值，即使内存释放失败，也不会反馈任何信息。</p><p>delete 之后，指针会自动置为 nullptr</p><p>类型检查:</p><p>delete 进行类型检查，确保删除的对象类型与 new 分配时的类型一致。</p><p>free 不进行类型检查，因为它只处理 void* 类型的指针。</p><p>总结来说，delete和free都是用来释放动态内存的，但它们分别用于C++和C语言中的内存管理。delete适用于C++对象，会自动调用析构函数；而free适用于C语言分配的内存，不涉及对象的析构。</p><h3 id="堆区和栈区的区别">堆区和栈区的区别</h3><p>堆 （Heap） 和栈 （Stack） 是程序运行时两种不同的内存分配区域</p><p>内存分配：</p><p>栈 是由编译器自动管理的，用于存储局部变量和函数调用的上下文信息。栈上的对象在定义它们的块或函数调用结束后自动销毁。栈的内存分配和释放速度很快，因为栈的内存管理是连续的，不需要搜索空闲内存。堆 由程序员手动管理的，用于存储动态分配的对象。堆上的对象需要程序员手动释放，否则可能导致内存泄漏。堆的内存分配和释放速度通常比栈慢，因为可能需要搜索合适的内存块，并且涉及内存碎片整理。大小限制：</p><p>栈的大小通常有限制，远小于堆的大小，且在不同系统和编译器中可能不同。堆的大小通常很大，受限于系统可用内存。 使用场景：</p><p>栈主要用于存储函数参数、局部变量等。堆用于存储生存期不受限于单个函数调用的对象，如使用 new 或 malloc分配的对象。</p><h3 id="补充-如何定义只能在堆上或栈上生成对象的类">补充：如何定义只能在堆上或栈上生成对象的类</h3><p>在 C++中，可以通过控制构造函数和析构函数的访问权限来限制对象只能在堆上或栈上创建。以下是两种实现方式的详细说明和代码示例：</p><h4 id="只能在堆上创建对象禁止栈上创建">1.只能在堆上创建对象（禁止栈上创建）</h4><p><strong>核心原理</strong>：私有析构函数 + 智能指针管理生命周期<br /><strong>关键点</strong>： - 私有析构函数阻止栈对象自动销毁 -静态工厂函数返回智能指针 - 智能指针自定义删除器调用<code>destroy()</code> - <code>destroy()</code> 调用<code>delete this</code>（需谨慎使用） - 禁用拷贝构造/赋值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeapOnly</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 工厂函数：返回带有自定义删除器的 unique_ptr</span></span><br><span class="line">    <span class="function"><span class="type">static</span> std::unique_ptr&lt;HeapOnly, <span class="title">void</span><span class="params">(*)</span><span class="params">(HeapOnly*)</span>&gt; <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">HeapOnly</span>(), </span><br><span class="line">            [](HeapOnly* p) &#123; p-&gt;<span class="built_in">destroy</span>(); &#125; <span class="comment">// 自定义删除器</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁函数（必须公开）</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>; <span class="comment">// 调用私有析构函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用拷贝操作</span></span><br><span class="line">    <span class="built_in">HeapOnly</span>(<span class="type">const</span> HeapOnly&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    HeapOnly&amp; <span class="keyword">operator</span>=(<span class="type">const</span> HeapOnly&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">HeapOnly</span>() = <span class="keyword">default</span>;       <span class="comment">// 私有构造</span></span><br><span class="line">    ~<span class="built_in">HeapOnly</span>() = <span class="keyword">default</span>;      <span class="comment">// 私有析构</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">auto</span> obj = HeapOnly::<span class="built_in">create</span>();  <span class="comment">// 只能在堆上创建</span></span><br></pre></td></tr></table></figure><h4 id="只能在栈上创建对象禁止堆上创建">2.只能在栈上创建对象（禁止堆上创建）</h4><p><strong>核心原理</strong>：禁用 <code>new</code> 操作符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StackOnly</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">StackOnly</span>() = <span class="keyword">default</span>;</span><br><span class="line">    ~<span class="built_in">StackOnly</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 禁用 new 操作符</span></span><br><span class="line">    <span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span>)</span> </span>= <span class="keyword">delete</span>;</span><br><span class="line">    <span class="type">void</span>* <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="type">size_t</span>) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span>, <span class="type">void</span>* p)</span> </span>= <span class="keyword">delete</span>; <span class="comment">// 禁用 malloc + placement new</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line">StackOnly stackObj;           <span class="comment">// 合法：栈上创建</span></span><br><span class="line"><span class="comment">// auto heapObj = new StackOnly(); // 编译错误：new 被禁用</span></span><br></pre></td></tr></table></figure><blockquote><p>⚠️ 注意：<code>delete this</code> 是特殊技术，必须确保： - 对象通过<code>new</code> 创建 - 调用 <code>delete this</code> 后不再访问任何成员- 通常只用于精确控制生命周期的场景</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;new和malloc有什么区别&quot;&gt;new和malloc有什么区别&lt;/h3&gt;
&lt;p&gt;new和malloc在C++中都用于动态内存分配，但它们之间有几个关键的区别：&lt;/p&gt;
&lt;p&gt;语法层面： new是C++的操作符，可以直接用来分配对象或数组。
malloc是一</summary>
      
    
    
    
    <category term="comp basic" scheme="https://mackz-maxw.github.io/categories/comp-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 3.4 系统调用实验</title>
    <link href="https://mackz-maxw.github.io/2025/07/22/oper_sys14/"/>
    <id>https://mackz-maxw.github.io/2025/07/22/oper_sys14/</id>
    <published>2025-07-22T20:34:49.492Z</published>
    <updated>2025-08-06T03:11:14.368Z</updated>
    
    <content type="html"><![CDATA[<h3 id="必做练习"><strong>必做练习</strong></h3><p><strong>练习1</strong><br />准备好实验报告</p><p><strong>练习2</strong><br />我们将通过 libc包装器发起系统调用（标准用户程序调用内核的方式）。系统调用完整列表可通过<code>man 2 syscalls</code> 查看手册页。<br />1. 启动树莓派，在终端中<strong>脱离 Linux源码目录</strong>新建用户程序目录<br />2. 创建文件 <code>lib_call.c</code>，编写 C 程序：<br />- 使用库函数 <code>getuid</code> 读取并打印用户 ID<br />- 尝试用 <code>setuid</code> 将 ID 设为 0（root）并报告是否成功<br />- 再次读取并打印用户 ID<br />3. 通过 <code>man 2 getuid</code> 和 <code>man 2 setuid</code>查阅：<br />- 函数调用语法和返回值类型<br />- 编译所需的头文件<br />4. 错误检查：若 <code>setuid</code> 失败，输出错误原因（使用<code>strerror(errno)</code>）。<br />- 相关手册页：<code>man 3 printf</code>, <code>man 3 strerror</code>,<code>man 3 errno</code><br />5. 在实验机上编译运行：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">   gcc lib_call.c -o lib_call &amp;&amp; ./lib_call</span><br><span class="line">   ```  </span><br><span class="line">**提示**：</span><br><span class="line">直接写 `usr_id = getuid()` 实际上**不是直接使用系统调用**，而是调用了**libc库的封装函数**（即 glibc 提供的 getuid），它内部会帮你完成系统调用的参数准备和陷入内核的过程。</span><br><span class="line">如果想**直接使用系统调用**，需要用 `syscall` 函数或者汇编指令，并传入系统调用号（如 `__NR_getuid`），而不是用库函数。例如：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**练习3**  </span><br><span class="line">从树莓派用户程序目录执行：  </span><br><span class="line">1. 通过 sftp 从 `shell.cec.学校简称.edu` 获取 `lib_call.c`  </span><br><span class="line">2. 在树莓派上编译并运行程序（分别用普通用户和 `sudo` 权限运行）  </span><br><span class="line">**答案**：粘贴两种运行方式的输出，并对比实验机与树莓派的差异（编译/运行等）。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**练习4**  </span><br><span class="line">修改程序使用原生系统调用接口（`man 2 syscall`）：  </span><br><span class="line">1. 复制 `lib_call.c` 为 `native_call.c`  </span><br><span class="line">2. 将 `getuid/setuid` 替换为 `syscall`  </span><br><span class="line">3. 通过 Linux 源码确定 ARM 系统调用号：  </span><br><span class="line">   - 查看 `<span class="built_in">arch</span>/arm/include/uapi/asm/unistd.h`  </span><br><span class="line">   - 查看生成的 `<span class="built_in">arch</span>/arm/include/generated/uapi/asm/unistd-common.h`  </span><br><span class="line">4. **使用常量**（如 `__NR_getuid`）而非硬编码数字  </span><br><span class="line">5. 可能需包含头文件 `asm/unistd.h`  </span><br><span class="line">6. 在树莓派上编译运行  </span><br><span class="line">**答案**：粘贴新程序的输出。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**练习5**  </span><br><span class="line">为内核添加两个新系统调用（各打印一条内核日志）：  </span><br><span class="line">**任务清单**  </span><br><span class="line">1. 在内核中声明函数原型  </span><br><span class="line">2. 实现函数逻辑  </span><br><span class="line">3. 分配系统调用号  </span><br><span class="line">4. 更新 ARM 系统调用表  </span><br><span class="line">5. 更新系统调用总数  </span><br><span class="line"></span><br><span class="line">**操作步骤**  </span><br><span class="line">1. SSH 登录 `shell.cec.学校简称.edu` → `qlogin -q all.q` → 进入 Linux 源码目录  </span><br><span class="line">2. **修改前备份文件**（如 `<span class="built_in">cp</span> syscalls.h syscalls.h.072325`）  </span><br><span class="line"></span><br><span class="line">**声明函数原型**（在 `include/linux/syscalls.h` 底部添加）：  </span><br><span class="line">```c</span><br><span class="line">// CSE422 072325</span><br><span class="line">asmlinkage long sys_noargs(void); </span><br><span class="line">asmlinkage long sys_onearg(int arg);</span><br><span class="line">```  </span><br><span class="line">**答案**：粘贴添加的函数原型。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**练习6**  </span><br><span class="line">**实现系统调用函数**：  </span><br><span class="line">1. 在 `<span class="built_in">arch</span>/arm/kernel/` 创建文件：  </span><br><span class="line">   - `sys_noargs.c`（无参数函数）  </span><br><span class="line">   - `sys_onearg.c`（带参数函数）  </span><br><span class="line">2. `sys_noargs.c` 内容参考[此文件](https://example.com/sys_noargs.c)  </span><br><span class="line">3. `sys_onearg.c` 模板：  </span><br><span class="line">   ```c</span><br><span class="line">   SYSCALL_DEFINE1(sys_onearg, int, arg) &#123;</span><br><span class="line">       printk(<span class="string">&quot;Received argument: %d\n&quot;</span>, arg); </span><br><span class="line">       <span class="built_in">return</span> 0; // 返回适当值</span><br><span class="line">   &#125;</span><br><span class="line">   ```  </span><br><span class="line">**答案**：粘贴 `sys_onearg` 的实现代码。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**练习7**  </span><br><span class="line">**添加文件到构建系统**：  </span><br><span class="line">修改 `<span class="built_in">arch</span>/arm/kernel/Makefile`：  </span><br><span class="line">1. 备份原文件  </span><br><span class="line">2. 在 `obj-y` 列表末尾添加（**不在 `\` 后**）：  </span><br><span class="line">   ```makefile</span><br><span class="line">   obj-y += sys_noargs.o sys_onearg.o</span><br><span class="line">   ```  </span><br><span class="line">**答案**：粘贴修改后的 `obj-y` 行。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**练习8**  </span><br><span class="line">**更新系统调用表**：  </span><br><span class="line">修改 `<span class="built_in">arch</span>/arm/tools/syscall.tbl`：  </span><br><span class="line">1. 备份原文件  </span><br><span class="line">2. 在末尾添加（分配新调用号）：  </span><br><span class="line">   ```plaintext</span><br><span class="line">   456  common  sys_noargs    sys_noargs</span><br><span class="line">   457  common  sys_onearg     sys_onearg</span><br><span class="line">   ```  </span><br><span class="line">**答案**：粘贴添加的两行内容。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**练习9**  </span><br><span class="line">**编译并验证新内核**：  </span><br><span class="line">1. 在 Linux 源码根目录执行：  </span><br><span class="line">   ```bash</span><br><span class="line">   make clean</span><br><span class="line">   ```  </span><br><span class="line">2. 修改本地版本标识：  </span><br><span class="line">   - 编辑 `.config` 文件  </span><br><span class="line">   - 更新 `CONFIG_LOCALVERSION` 值（如 `-syscallstudio`）  </span><br><span class="line">3. 按实验1/2的步骤编译安装内核  </span><br><span class="line">4. 树莓派上运行：  </span><br><span class="line">   ```bash</span><br><span class="line">   <span class="built_in">uname</span> -a</span><br><span class="line">   ```  </span><br><span class="line">**答案**：粘贴 `<span class="built_in">uname</span> -a` 输出结果。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**练习10**  </span><br><span class="line">**调用新系统调用**：  </span><br><span class="line">1. 通过 sftp 获取 `<span class="built_in">arch</span>/arm/include/generated/uapi/asm/unistd-common.h`  </span><br><span class="line">2. 复制到 GCC 头文件目录：  </span><br><span class="line">   ```bash</span><br><span class="line">   sudo <span class="built_in">cp</span> unistd-common.h /usr/include/arm-linux-gnueabihf/asm</span><br><span class="line">   ```  </span><br><span class="line">3. 创建 `new_call.c`（基于 `native_call.c`）：  </span><br><span class="line">   - 将 `getuid` 调用号替换为 `__NR_sys_noargs`  </span><br><span class="line">   - 将 `setuid` 调用号替换为 `__NR_sys_onearg`  </span><br><span class="line">   - 为单参数调用声明变量（勿直接传常量）  </span><br><span class="line">4. 编译运行后检查内核日志：  </span><br><span class="line">   ```bash</span><br><span class="line">   dmesg</span><br><span class="line">   ```  </span><br><span class="line">**答案**：粘贴 `dmesg` 中包含系统调用输出的日志行。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment">### **需提交的文件**  </span></span><br><span class="line">1. 必做练习答案  </span><br><span class="line">2. 源代码：`lib_call.c`, `native_call.c`, `new_call.c`  </span><br><span class="line">3. 系统调用实现文件：`sys_noargs.c`, `sys_onearg.c`  </span><br><span class="line">4. 修改文件的 diff（对比备份）：  </span><br><span class="line">   ```bash</span><br><span class="line">   diff -up syscalls.h syscalls.h.072325 &gt; syscalls.h.diff</span><br><span class="line">   diff -up syscall.tbl syscall.tbl.072325 &gt; syscall.tbl.diff</span><br></pre></td></tr></table></figure></p><hr /><h3 id="可选拓展练习"><strong>可选拓展练习</strong></h3><p>完成任意拓展练习后简述收获（附问题答案）。</p><p><strong>练习1</strong><br />用汇编接口实现系统调用（参考课堂 ARM 调用流程），使用 GCC内联汇编（<code>asm</code> 扩展）。<br />&gt; 提示：详细流程见 <code>man 2 syscall</code>，内核入口代码见<code>arch/arm/kernel/entry-common.S</code>。</p><p><strong>练习2</strong><br />实现读取周期计数器（CCNT）的系统调用：<br />1. 下载<a href="https://example.com/perf_regs.h">性能监控头文件</a> 至<code>arch/arm/include/asm</code><br />2.声明函数原型：<code>asmlinkage long sys_read_ccnt(unsigned long long *val)</code><br />3. 创建 <code>sys_read_ccnt.c</code>（参考<ahref="https://example.com/sys_read_ccnt.c">模板</a>）<br />4. 更新 <code>Makefile</code> 和 <code>syscall.tbl</code><br />5. 编写程序连续调用两次，计算调用耗时（周期数）<br /><strong>答案</strong>：报告系统调用消耗的周期数。</p><p><strong>练习3</strong><br />修复 <code>read_ccnt</code> 的安全缺陷：<br />1. 使用 <code>copy_to_user()</code> 替代直接写入用户指针<br />2. 失败时返回 <code>-EFAULT</code><br /><strong>答案</strong>：粘贴修复后的 <code>sys_read_ccnt</code>实现代码。</p><hr /><blockquote><p>注意：<br />- 所有内核修改需添加注释<code>//CSE422 MMDDYY</code>（日期格式：月日年）<br />- 推荐在实验机开发代码，通过 sftp 同步至树莓派以防崩溃丢失</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;必做练习&quot;&gt;&lt;strong&gt;必做练习&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;练习1&lt;/strong&gt;&lt;br /&gt;
准备好实验报告&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;练习2&lt;/strong&gt;&lt;br /&gt;
我们将通过 libc
包装器发起系统调用（标</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    <category term="lab" scheme="https://mackz-maxw.github.io/categories/os-basic/lab/"/>
    
    
  </entry>
  
  <entry>
    <title>代码随想录 | 刷题-动态规划6</title>
    <link href="https://mackz-maxw.github.io/2025/07/22/kamacode33/"/>
    <id>https://mackz-maxw.github.io/2025/07/22/kamacode33/</id>
    <published>2025-07-22T19:55:11.170Z</published>
    <updated>2025-08-05T20:43:52.875Z</updated>
    
    <content type="html"><![CDATA[<h3 id="零钱兑换">322. 零钱兑换</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> <span class="comment">// 包含 std::min 和 std::max</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount+<span class="number">1</span>, std::numeric_limits&lt;<span class="type">int</span>&gt;::max())</span></span>;<span class="comment">// 每个amount需要的最少coin数</span></span><br><span class="line">        <span class="comment">// 第一遍遍历需要把coins中有的coin数置1，所以dp[0] = 0方便+1</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 针对每个amount, 遍历减去coin看哪一种最少</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;=amount; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j&lt; coins.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>((i - coins[j]) &gt;= <span class="number">0</span> &amp;&amp; dp[i - coins[j]] &lt; std::numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">max</span>())&#123;</span><br><span class="line">                    dp[i] = <span class="built_in">min</span>(dp[i], dp[i - coins[j]] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount] == std::numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">max</span>() ? <span class="number">-1</span> : dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="完全平方数">279.完全平方数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSquares</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 完全平方数就是物品（可以无限件使用），凑个正整数n就是背包，问凑满这个背包最少有多少物品？</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, INT_MAX)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123; <span class="comment">// 遍历背包</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j * j &lt;= i; j++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">                dp[i] = <span class="built_in">min</span>(dp[i - j * j] + <span class="number">1</span>, dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="单词拆分">139.单词拆分</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wordBreak</span><span class="params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="function">unordered_set&lt;string&gt; <span class="title">wordSet</span><span class="params">(wordDict.begin(), wordDict.end())</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">dp</span><span class="params">(s.size()+<span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i&lt;=s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j&lt;i; j++)&#123;</span><br><span class="line">                string subS = s.<span class="built_in">substr</span>(j, i-j);</span><br><span class="line">                <span class="keyword">if</span>(wordSet.<span class="built_in">find</span>(subS) != wordSet.<span class="built_in">end</span>() &amp;&amp; dp[j])&#123;</span><br><span class="line">                    dp[i] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;零钱兑换&quot;&gt;322. 零钱兑换&lt;/h3&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="leetcode" scheme="https://mackz-maxw.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统项目 | perf验证性能瓶颈</title>
    <link href="https://mackz-maxw.github.io/2025/07/18/rust_os/"/>
    <id>https://mackz-maxw.github.io/2025/07/18/rust_os/</id>
    <published>2025-07-18T19:58:52.686Z</published>
    <updated>2025-07-18T20:01:06.221Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用-perf-验证性能瓶颈">使用 <code>perf</code> 验证性能瓶颈</h3><p>用 <code>perf</code>找系统慢在哪，就像给系统做一次‘全身CT扫描’加‘血液化验’。在我那个操作系统框架项目里，我们特别关心调度算法在任务多到快‘撑爆’的时候表现如何（超负荷场景）。这个过程大概是这样的：</p><ol type="1"><li><strong>‘挂号’与‘检查’ (启动Perf &amp; 记录数据)：</strong><ul><li>我先给系统‘挂号’，告诉 <code>perf</code> 我要检查什么：CPU干了啥、内存怎么用的、任务等了多久、程序内部函数调用了多少次等等。这些信息就是‘检查项目’（<code>perf</code>事件，如 <code>cycles</code>, <code>instructions</code>,<code>cache-misses</code>, <code>context-switches</code>,<code>sched:sched_stat_runtime</code>,<code>sched:sched_stat_wait</code> 等）。</li><li>然后，我让系统开始‘干活’（运行特定负载，模拟超负荷），同时<code>perf</code>就像个精密的仪器在旁边‘抽血化验’、‘拍片子’，全程记录下所有关键指标（<code>perf record -e &lt;事件列表&gt; -ag -- sleep 30</code>或针对特定进程/命令）。</li><li>这个负载是精心设计的，包含不同类型（CPU计算狂、慢悠悠的I/O读写手、要求准时完成的‘急脾气’任务）和不同数量的任务，把它们一股脑儿塞给系统，看它啥时候‘顶不住’。</li></ul></li><li><strong>‘看化验单’与‘读CT片’ (分析Perf报告)：</strong><ul><li>等系统跑完，<code>perf</code>会生成一份厚厚的‘检查报告’（<code>perf report</code>）。这份报告特别有用：<ul><li><strong>‘谁最累？’ (CPU时间分布)：</strong>报告会列出哪个程序、哪个函数吃掉最多的CPU时间（<code>Overhead</code>列）。如果某个调度器函数或者内核里处理任务切换/通信(IPC)的函数占比异常高，那它可能就是‘罪魁祸首’。</li><li><strong>‘效率高不高？’ (指令效率)：</strong> 我重点看<code>CPI</code> 或 <code>IPC</code>。<code>CPI</code>是说CPU执行一条指令平均花了多少个时钟周期，<code>IPC</code>是反过来（一个周期执行多少条指令）。<strong>理想值：</strong>现代CPU在跑得很顺的代码时，<code>IPC</code>应该接近1甚至更高（比如1.5-2.0+）。<strong>瓶颈信号：</strong>如果整个系统或者关键函数的 <code>IPC</code>掉得很低（比如低于0.5），或者 <code>CPI</code>飙升（比如&gt;2.0），那CPU可能没在高效干活，而是在‘空等’或者‘干杂活’。</li><li><strong>‘等得久不久？’ (调度延迟)：</strong>报告里能看到任务从‘准备好’到‘真正上CPU跑’等了多久（<code>sched:sched_stat_wait</code>）。<strong>合理范围：</strong>在超负荷前，这个等待时间应该比较稳定且符合预期（比如微秒到毫秒级，看系统要求）。<strong>瓶颈信号：</strong>如果这个等待时间在超负荷时急剧增加（比如从毫秒级跳到几十甚至几百毫秒），或者大量时间花在<code>sched</code>相关的内核函数上，说明调度器本身或者任务太多成了瓶颈，任务在‘排队等CPU等太久’。</li><li><strong>‘找东西慢不慢？’ (缓存失效)：</strong><code>cache-misses</code>事件特别重要。CPU从自己高速缓存(<code>L1/L2/L3</code>)拿数据比去慢悠悠的主内存(<code>RAM</code>)拿快百倍。<strong>合理范围：</strong>有一定比例的 <code>cache-misses</code>是正常的。<strong>瓶颈信号：</strong> 如果 <code>cache-misses</code>率非常高（比如LLC Last Level Cache miss rate &gt;5-10%，具体看CPU和负载），或者某个关键数据结构相关的代码段<code>cache-misses</code>特别多，说明CPU经常‘找不到需要的东西’，得跑去慢速内存取，这会<strong>严重拖慢速度</strong>，是内存访问瓶颈的典型标志。</li><li><strong>‘沟通顺畅吗？’ (IPC开销)：</strong>在微内核里，任务间沟通(<code>IPC</code>)是大事。我会专门看花在内核处理IPC消息的函数（比如消息复制、权限检查、调度切换）上的时间占比。<strong>合理范围：</strong>IPC本身就有成本，时间占比应该相对稳定。<strong>瓶颈信号：</strong>如果IPC处理时间占比在超负荷时不成比例地暴增，或者<code>context-switches</code> (上下文切换次数)高得吓人，说明系统资源大量消耗在‘传话’和‘换人’上了，任务本身的‘正事’反而没时间做，这就是<strong>通信开销过大或调度切换太频繁</strong>的瓶颈。</li></ul></li></ul></li><li><strong>‘病灶’在哪？ (我们发现的瓶颈)：</strong>在我们的超负荷测试中，<code>perf</code>的‘化验单’清晰地指出了几个‘病灶’：<ul><li><strong>‘沟通成本’太高 (IPC开销陡增)：</strong>当任务数量超过某个阈值，花在内核处理IPC上的CPU时间占比从正常的 ~15%一下子跳到 40%+！<code>perf report</code> 显示 <code>ipc_send</code>,<code>ipc_receive</code> 及相关内核锁函数耗时剧增。同时<code>context-switches</code>也翻倍了。这说明微内核架构的‘双刃剑’——隔离性好但沟通成本高——在重压下成了主要瓶颈。</li><li><strong>‘找东西’越来越慢 (Cache效率下降)：</strong><code>LLC cache-misses</code> 率在超负荷时从 ~3% 升高到 12%+。结合<code>annotate</code>功能看热点代码，发现是调度器内部的任务队列数据结构访问冲突加剧，导致多个CPU核心频繁互相使对方的缓存失效(<code>False Sharing</code>)，逼得CPU频繁去慢速内存找数据。</li><li><strong>‘急脾气’任务被耽误 (调度延迟波动)：</strong><code>sched:sched_stat_wait</code>显示实时任务的等待时间方差(<code>jitter</code>)在超负荷时变得很大，偶尔出现远超截止期限的等待峰值。<code>perf</code>指向调度器在重载下决策变慢，以及非实时任务过多挤占了CPU资源。</li></ul></li><li><strong>‘化验单’靠谱吗？ (判断数据合理性)：</strong>光看一次‘化验’结果不行，得判断数据靠不靠谱：<ul><li><strong>‘对照实验’：</strong>我会在<strong>相同硬件、相同负载</strong>下，跑不同的调度算法配置或内核版本，用<code>perf</code> 收集数据对比。如果瓶颈指标（如IPC耗时、CacheMiss率）的变化趋势一致，且能解释性能差异（如吞吐量下降、延迟上升），数据就合理。</li><li><strong>‘符合常识’：</strong> 数据要符合计算机原理。比如：<ul><li><code>CPI</code> 不可能无限低（受限于CPU物理极限）。</li><li>一个纯计算任务如果 <code>IPC</code> 很低且 <code>cache-misses</code>不高，那瓶颈可能在指令依赖或分支预测失败(<code>branch-misses</code>)。</li><li>调度延迟不可能为0，总有个基础开销。</li></ul></li><li><strong>‘多指标印证’：</strong> 单一指标可能误导。比如高<code>%sys</code> (内核态CPU占用) 是瓶颈信号，但必须结合<code>perf report</code> 看具体是内核哪部分耗时。高<code>cache-misses</code> 是信号，但要看 <code>annotate</code>确认热点代码位置是否合理。</li><li><strong>‘可重复性’：</strong>多次运行测试，关键指标（如平均延迟、最大延迟、瓶颈函数占比）的波动应在小范围内，结果要能稳定复现。</li><li><strong>‘符合理论模型’ (效用边界分析)：</strong> 我们用<code>perf</code>采集的响应时间、CPU利用率等数据，输入到调度理论模型（如排队论模型）中计算‘效用边界’。如果模型预测的系统饱和点、性能拐点与<code>perf</code>观测到的实际瓶颈出现点（如IPC开销暴增、延迟突变的负载阈值）能<strong>吻合</strong>，那这些<code>perf</code> 数据及其揭示的瓶颈就非常可信了。</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;使用-perf-验证性能瓶颈&quot;&gt;使用 &lt;code&gt;perf&lt;/code&gt; 验证性能瓶颈&lt;/h3&gt;
&lt;p&gt;用 &lt;code&gt;perf&lt;/code&gt;
找系统慢在哪，就像给系统做一次‘全身CT扫描’加‘血液化验’。在我那个操作系统框架项目里，我们特别关心调度算法在任务</summary>
      
    
    
    
    <category term="rust os" scheme="https://mackz-maxw.github.io/categories/rust-os/"/>
    
    
  </entry>
  
  <entry>
    <title>代码随想录 | 刷题-动态规划5</title>
    <link href="https://mackz-maxw.github.io/2025/07/12/kamacode32/"/>
    <id>https://mackz-maxw.github.io/2025/07/12/kamacode32/</id>
    <published>2025-07-12T14:51:02.889Z</published>
    <updated>2025-07-22T19:54:52.506Z</updated>
    
    <content type="html"><![CDATA[<h3 id="零钱兑换-ii">518. 零钱兑换 II</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">change</span><span class="params">(<span class="type">int</span> amount, vector&lt;<span class="type">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">uint64_t</span>&gt; <span class="title">dp</span><span class="params">(amount + <span class="number">1</span>, <span class="number">0</span>)</span></span>; <span class="comment">// 防止相加数据超int</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 第一轮循环应该将所有j = coins[i]置1</span></span><br><span class="line">        <span class="comment">// 想清楚这一点，就可以明确组合数的状态转移方程和排列数不一样</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;coins.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="type">int</span> coin = coins[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = coin; j&lt;(amount+<span class="number">1</span>); j++)&#123;</span><br><span class="line">                dp[j] += dp[j - coins[i]];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;&quot;coins[i]=&quot;&lt;&lt;coins[i]&lt;&lt;endl;</span></span><br><span class="line">            <span class="comment">// for(int d:dp)cout&lt;&lt;d&lt;&lt;&#x27; &#x27;;</span></span><br><span class="line">            <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="组合总和-ⅳ">377. 组合总和 Ⅳ</h3><p>如果求组合数就是外层for循环遍历物品，内层for遍历背包，因为物品处理顺序固定。如果求排列数就是外层for遍历背包，内层for循环遍历物品，因为每个容量下都重新扫描所有物品。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">combinationSum4</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(target + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;=target;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>((j - nums[i])&gt;=<span class="number">0</span> &amp;&amp; dp[j] &lt;= INT_MAX - dp[j - nums[i]])&#123;</span><br><span class="line">                    dp[j] += dp[j - nums[i]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// for(auto d:dp)cout&lt;&lt;d&lt;&lt;&#x27; &#x27;;</span></span><br><span class="line">            <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="爬楼梯-进阶">70. 爬楼梯 （进阶）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j&lt;=<span class="number">2</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>((i-j) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i] += dp[i - j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;零钱兑换-ii&quot;&gt;518. 零钱兑换 II&lt;/h3&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    <category term="leetcode" scheme="https://mackz-maxw.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>代码随想录 | 刷题-动态规划4</title>
    <link href="https://mackz-maxw.github.io/2025/07/10/kamacode31/"/>
    <id>https://mackz-maxw.github.io/2025/07/10/kamacode31/</id>
    <published>2025-07-10T14:59:08.692Z</published>
    <updated>2025-07-12T23:05:11.780Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背包问题中一维和二维-dp-的遍历顺序">01背包问题中一维和二维 dp的遍历顺序</h3><h4 id="一维-dp倒序遍历容量">一维 dp：<strong>倒序遍历容量</strong></h4><ul><li><strong>原因</strong>：倒序遍历可以保证每个物品只被放入一次。</li><li><strong>原理</strong>：每次更新 <code>dp[j]</code>时，使用的是上一轮（未加入当前物品）的状态，避免重复加入同一个物品。</li><li><strong>举例</strong>：<ul><li>物品0，重量1，价值15<br /></li><li>正序遍历：<code>dp[2] = dp[1] + 15 = 30</code>（物品0被加了两次，错误！）</li><li>倒序遍历：<code>dp[2] = dp[1] + 15 = 15</code>，<code>dp[1] = dp[0] + 15 = 15</code>（每个容量只加一次物品0）</li></ul></li></ul><h4 id="二维-dp正序遍历容量">二维 dp：<strong>正序遍历容量</strong></h4><ul><li><strong>原因</strong>：二维 dp 的 <code>dp[i][j]</code>都是通过上一层 <code>dp[i-1][j]</code>计算的，本层不会覆盖上一层，所以不会重复加入物品。</li><li><strong>原理</strong>：每一层代表一个物品，状态转移只依赖于上一层，天然保证每个物品只选一次。</li></ul><h3 id="最后一块石头的重量-ii">1049. 最后一块石头的重量 II</h3><ul><li>目标：将所有石头分成两组，使两组总重量尽量接近，最后剩下的石头重量就是两组重量差的绝对值。</li><li>转化为<strong>01背包问题</strong>：每个石头只能选一次，背包容量为所有石头重量和的一半，尽量让一组的重量最大且不超过容量。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lastStoneWeightII</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> hlf_sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> s: stones)&#123;</span><br><span class="line">            sum += s;</span><br><span class="line">        &#125;</span><br><span class="line">        hlf_sum = sum / <span class="number">2</span>; <span class="comment">// 注意hlf_sum / 2是向下取整的</span></span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">1501</span>, <span class="number">0</span>)</span></span>; <span class="comment">// 一定要保证dp[j]是可以比较的，所以我们选择重量为j</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;stones.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = hlf_sum; j&gt;=stones[i]; j--)&#123;</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j - stones[i]] + stones[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sum - dp[hlf_sum] * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="目标和">494. 目标和</h3><p>该问题可以转化为一个子集和问题：在数组中找到一些数字，使它们的和等于<code>(target + sum(nums)) / 2</code>（记为<code>bagSize</code>），每个数字只能使用一次。以下是详细步骤：</p><ol type="1"><li><strong>问题转化</strong>：<ul><li>设加法总和为 <code>x</code>，则减法总和为<code>sum - x</code>。</li><li>根据条件 <code>x - (sum - x) = target</code>，解得<code>x = (target + sum) / 2</code>。</li><li>问题转化为：在 <code>nums</code> 中选取若干数字，使它们的和等于<code>bagSize</code>，求选取方案数。</li></ul></li><li><strong>边界条件</strong>：<ul><li>若 <code>abs(target) &gt; sum</code>，无解。</li><li>若 <code>(target + sum)</code> 为奇数，无解（<code>bagSize</code>必须是整数）。</li></ul></li><li><strong>动态规划</strong>：<ul><li>使用一维数组 <code>dp[j]</code> 表示装满容量 <code>j</code>的背包的方案数。</li><li>初始化 <code>dp[0] = 1</code>（空集方案）。</li><li>遍历每个数字，逆序更新 <code>dp</code>数组（避免重复使用数字）。</li></ul></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 回溯法容易超时</span></span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:nums)&#123;</span><br><span class="line">            sum += n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sz = (target + sum) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>((target + sum) % <span class="number">2</span> == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(target) &gt; sum)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(sz+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = sz; j &gt;= nums[i]; j--)&#123;</span><br><span class="line">                dp[j] += dp[j-nums[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[sz];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="代码解释">代码解释</h4><ol type="1"><li><strong>初始化</strong>：<ul><li><code>dp[0] = 1</code>：表示容量为0的背包有1种方案（不选任何数字）。</li><li>其他位置初始化为0。</li></ul></li><li><strong>遍历更新</strong>：<ul><li>对每个数字 <code>num</code>，从 <code>bagSize</code> 到<code>num</code> 逆序遍历。</li><li>更新公式：<code>dp[j] += dp[j - num]</code>，表示：<ul><li><strong>不选 <code>num</code>达成j</strong>：方案数保持<code>dp[j]</code>。</li><li><strong>选 <code>num</code>达成j</strong>：方案数加上<code>dp[j - num]</code>（剩余容量 <code>j - num</code>的方案数）。</li></ul></li></ul></li><li><strong>示例</strong>：<ul><li><code>nums = [1, 1, 1, 1, 1]</code>, <code>target = 3</code>：<ul><li><code>total = 5</code>,<code>bagSize = (3 + 5) / 2 = 4</code>。</li><li><code>dp</code> 数组初始为 <code>[1, 0, 0, 0, 0]</code>。</li><li>遍历每个 <code>1</code>后，<code>dp[4] = 5</code>（5种组合方式）。</li></ul></li></ul></li></ol><h4 id="复杂度">复杂度</h4><ul><li><strong>时间复杂度</strong>：O(n × bagSize)，其中 <code>n</code>为数组长度。</li><li><strong>空间复杂度</strong>：O(bagSize)。</li></ul><h3 id="一和零">474.一和零</h3><p>本题容易被看成多重背包问题，识别清楚问题本质就容易做了<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; cnt;</span><br><span class="line">        <span class="type">int</span> zeroes = <span class="number">0</span>, ones = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;0&#x27;</span>)zeroes++;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;1&#x27;</span>)ones++;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt.<span class="built_in">push_back</span>(zeroes);</span><br><span class="line">        cnt.<span class="built_in">push_back</span>(ones);</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaxForm</span><span class="params">(vector&lt;string&gt;&amp; strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;strs.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; cnt = <span class="built_in">count</span>(strs[i]);</span><br><span class="line">            <span class="keyword">if</span>(cnt[<span class="number">0</span>] &gt; m || cnt[<span class="number">1</span>] &gt; n)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> a = m; a &gt;= cnt[<span class="number">0</span>]; a--)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> b = n; b &gt;= cnt[<span class="number">1</span>]; b--)&#123;</span><br><span class="line">                    dp[a][b] = <span class="built_in">max</span>(dp[a][b], dp[a-cnt[<span class="number">0</span>]][b-cnt[<span class="number">1</span>]] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;背包问题中一维和二维-dp-的遍历顺序&quot;&gt;01背包问题中一维和二维 dp
的遍历顺序&lt;/h3&gt;
&lt;h4 id=&quot;一维-dp倒序遍历容量&quot;&gt;一维 dp：&lt;strong&gt;倒序遍历容量&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原因&lt;/str</summary>
      
    
    
    
    <category term="leetcode" scheme="https://mackz-maxw.github.io/categories/leetcode/"/>
    
    
  </entry>
  
</feed>
