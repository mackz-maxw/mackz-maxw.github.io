<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Maxw的小站</title>
  
  <subtitle>Maxw学习记录</subtitle>
  <link href="https://mackz-maxw.github.io/atom.xml" rel="self"/>
  
  <link href="https://mackz-maxw.github.io/"/>
  <updated>2025-07-10T22:48:26.506Z</updated>
  <id>https://mackz-maxw.github.io/</id>
  
  <author>
    <name>Mackz-Maxw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代码随想录 | 刷题-动态规划4</title>
    <link href="https://mackz-maxw.github.io/2025/07/10/kamacode31/"/>
    <id>https://mackz-maxw.github.io/2025/07/10/kamacode31/</id>
    <published>2025-07-10T14:59:08.692Z</published>
    <updated>2025-07-10T22:48:26.506Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最后一块石头的重量-ii">1049. 最后一块石头的重量 II</h3><ul><li>目标：将所有石头分成两组，使两组总重量尽量接近，最后剩下的石头重量就是两组重量差的绝对值。</li><li>转化为<strong>01背包问题</strong>：每个石头只能选一次，背包容量为所有石头重量和的一半，尽量让一组的重量最大且不超过容量。</li><li>为什么<strong>倒序遍历</strong>：<ul><li>在01背包中，正向遍历会导致同一个物品被多次使用（即变成完全背包），而倒序遍历可以保证每个物品只用一次。</li><li>例如：stones = [2, 3,5]，如果正向遍历，dp[4]=dp[2]+2=4，石头2被用了两次，违背了01背包的约束。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lastStoneWeightII</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> hlf_sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> s: stones)&#123;</span><br><span class="line">            sum += s;</span><br><span class="line">        &#125;</span><br><span class="line">        hlf_sum = sum / <span class="number">2</span>; <span class="comment">// 注意hlf_sum / 2是向下取整的</span></span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">1501</span>, <span class="number">0</span>)</span></span>; <span class="comment">// 一定要保证dp[j]是可以比较的，所以我们选择重量为j</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;stones.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = hlf_sum; j&gt;=stones[i]; j--)&#123;</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j - stones[i]] + stones[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sum - dp[hlf_sum] * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;最后一块石头的重量-ii&quot;&gt;1049. 最后一块石头的重量 II&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;目标：将所有石头分成两组，使两组总重量尽量接近，最后剩下的石头重量就是两组重量差的绝对值。&lt;/li&gt;
&lt;li&gt;转化为&lt;strong&gt;01背包问题&lt;/strong&gt;：</summary>
      
    
    
    
    <category term="leetcode" scheme="https://mackz-maxw.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 信号量和条件变量</title>
    <link href="https://mackz-maxw.github.io/2025/07/04/oper_sys13/"/>
    <id>https://mackz-maxw.github.io/2025/07/04/oper_sys13/</id>
    <published>2025-07-04T21:06:20.574Z</published>
    <updated>2025-07-07T20:36:44.598Z</updated>
    
    <content type="html"><![CDATA[<h3 id="信号量-semaphore---停车场模型">🚦 <strong>信号量 (Semaphore) -停车场模型</strong></h3><p><strong>口诀</strong>：<strong>“计数资源，进出加减”</strong><br />- 像一个停车场管理员： - <code>wait()</code> =抬起杆子放车进（<strong>资源-1</strong>） - <code>post()</code> =落下杆子放车出（<strong>资源+1</strong>） -<strong>核心</strong>：管<strong>数量</strong>（剩余车位）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 超简版信号量实现（C++20标准）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore&gt;</span></span></span><br><span class="line"><span class="function">std::counting_semaphore&lt;5&gt; <span class="title">parking</span><span class="params">(<span class="number">5</span>)</span></span>; <span class="comment">// 5个车位</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">car</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">    parking.<span class="built_in">acquire</span>();      <span class="comment">// 等车位（杆子抬起）</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Car &quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; parked\n&quot;</span>;</span><br><span class="line">    parking.<span class="built_in">release</span>();      <span class="comment">// 开走（杆子落下）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><h3 id="条件变量-condition-variable---奶茶店模型">🚥 <strong>条件变量(Condition Variable) - 奶茶店模型</strong></h3><p><strong>口诀</strong>：<strong>“条件不满足，解锁等通知”</strong><br />- 像奶茶店取餐： - <code>wait()</code> =没奶茶时<strong>放下号码牌睡觉</strong> - <code>notify()</code> =奶茶做好后<strong>叫号唤醒顾客</strong> -<strong>核心</strong>：管<strong>条件</strong>（奶茶是否做好）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件变量基本结构</span></span><br><span class="line">std::mutex mtx;</span><br><span class="line">std::condition_variable cv;</span><br><span class="line"><span class="type">bool</span> milktea_ready = <span class="literal">false</span>; <span class="comment">// 关键条件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 顾客线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::unique_lock <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">    cv.<span class="built_in">wait</span>(lock, []&#123; <span class="keyword">return</span> milktea_ready; &#125;); <span class="comment">// 没奶茶就睡</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Got milktea!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 店员线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">staff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">std::lock_guard <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        milktea_ready = <span class="literal">true</span>; <span class="comment">// 奶茶做好</span></span><br><span class="line">    &#125;</span><br><span class="line">    cv.<span class="built_in">notify_all</span>(); <span class="comment">// 大喊：奶茶好了！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><h3 id="对比记忆表">🔑 <strong>对比记忆表</strong></h3><table><colgroup><col style="width: 20%" /><col style="width: 41%" /><col style="width: 38%" /></colgroup><thead><tr><th><strong>特征</strong></th><th>信号量</th><th>条件变量</th></tr></thead><tbody><tr><td><strong>核心思想</strong></td><td>资源计数器（还剩几个？）</td><td>条件检查（事情发生了吗？）</td></tr><tr><td><strong>操作</strong></td><td><code>wait()</code>减资源，<code>post()</code>加资源</td><td><code>wait()</code>休眠，<code>notify()</code>唤醒</td></tr><tr><td><strong>锁依赖</strong></td><td>自带锁机制</td><td><strong>必须搭配mutex使用</strong></td></tr><tr><td><strong>适用场景</strong></td><td>连接池/限流</td><td>任务协调/事件等待</td></tr><tr><td><strong>生活比喻</strong></td><td>停车场进出系统</td><td>奶茶店叫号系统</td></tr></tbody></table><hr /><h3 id="记忆技巧">🧠 <strong>记忆技巧</strong></h3><ol type="1"><li><strong>信号量记数字</strong>：<ul><li>看到“允许N个线程访问” → 选信号量</li><li>代码看到<code>.acquire()/.release()</code> → 信号量</li></ul></li><li><strong>条件变量查状态</strong>：<ul><li>看到“当XX发生时唤醒” → 选条件变量</li><li>代码看到<code>cv.wait(锁, lambda条件)</code> → 条件变量</li></ul></li><li><strong>必背两句话</strong>：<ul><li>信号量：<strong>“资源不够就阻塞，释放资源就加一”</strong></li><li>条件变量：<strong>“条件不满足时解锁等待，满足时加锁执行”</strong></li></ul></li></ol><hr /><h3 id="分钟实战场景">🌰 1分钟实战场景</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 场景：仅允许3个线程同时下载</span></span><br><span class="line"><span class="function">std::counting_semaphore <span class="title">down_sem</span><span class="params">(<span class="number">3</span>)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">download</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    down_sem.<span class="built_in">acquire</span>();    <span class="comment">// 占位</span></span><br><span class="line">    <span class="comment">// ...下载操作...</span></span><br><span class="line">    down_sem.<span class="built_in">release</span>();    <span class="comment">// 释放</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景：线程等待服务器启动</span></span><br><span class="line">std::condition_variable cv;</span><br><span class="line"><span class="type">bool</span> server_ready = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">client</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::unique_lock <span class="title">lk</span><span class="params">(mtx)</span></span>;</span><br><span class="line">    cv.<span class="built_in">wait</span>(lk, []&#123; <span class="keyword">return</span> server_ready; &#125;); <span class="comment">// 等就绪</span></span><br><span class="line">    <span class="comment">// ...连接服务器...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">server</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...启动服务...</span></span><br><span class="line">    server_ready = <span class="literal">true</span>;</span><br><span class="line">    cv.<span class="built_in">notify_all</span>(); <span class="comment">// 通知所有客户端</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用条件变量实现信号量">用条件变量实现信号量</h3><p>即用条件变量（condition variable）和互斥锁（mutex）来模拟信号量的 P/V操作。</p><p>如果多个资源场景，<strong>各线程对资源的要求条件复杂，容易发生死锁</strong>的话，建议使用条件变量的实现</p><p>例如哲学家吃饭问题，每个哲学家都先拿起自己右手边的叉子，就会产生死锁，没有哲学家再能拿起左手边的叉子并吃饭。</p><ul><li><strong>P 操作（等待/获取资源）</strong><br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">P</span><span class="params">(<span class="type">sem_t</span> *sem)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">hold</span>(&amp;sem-&gt;mutex) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!COND)</span><br><span class="line">            <span class="built_in">cond_wait</span>(&amp;sem-&gt;cv, &amp;sem-&gt;mutex);</span><br><span class="line">        sem-&gt;count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>先加锁（hold mutex），保证对信号量的操作是原子的。</li><li>如果条件不满足（如 count &lt;=0），就用条件变量等待（cond_wait），并自动释放 mutex，直到被唤醒。</li><li>被唤醒后再次加锁，检查条件，满足则 count--，表示获取一个资源。</li></ul></li><li><strong>V 操作（释放/归还资源）</strong><br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">V</span><span class="params">(<span class="type">sem_t</span> *sem)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">hold</span>(&amp;sem-&gt;mutex) &#123;</span><br><span class="line">        sem-&gt;count++;</span><br><span class="line">        <span class="built_in">cond_broadcast</span>(&amp;sem-&gt;cv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>加锁，count++，表示释放一个资源。</li><li>用条件变量唤醒所有等待线程（cond_broadcast）。</li></ul></li></ul><h3 id="用信号量实现条件变量">用信号量实现条件变量</h3><p>用信号量实现条件变量的 wait/broadcast 操作：</p><p><strong>1. <code>wait</code> 函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">wait</span><span class="params">(<span class="keyword">struct</span> condvar *cv, <span class="type">mutex_t</span> *mutex)</span> &#123;</span><br><span class="line">    mutex_lock(&amp;cv-&gt;lock);</span><br><span class="line">    cv-&gt;nwait++;</span><br><span class="line">    mutex_unlock(&amp;cv-&gt;lock);</span><br><span class="line"></span><br><span class="line">    mutex_unlock(mutex);</span><br><span class="line">    P(&amp;cv-&gt;sleep);</span><br><span class="line">    mutex_lock(mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>cv-&gt;nwait++</code>：记录当前有多少线程在等待条件变量（进入等待队列）。</li><li><code>mutex_unlock(mutex)</code>：释放主互斥锁，允许其他线程进入临界区修改条件。</li><li><code>P(&amp;cv-&gt;sleep)</code>：在信号量 sleep上等待（阻塞），直到被唤醒。</li><li><code>mutex_lock(mutex)</code>：被唤醒后，重新获得主互斥锁，继续执行。</li></ul><p><strong>2. <code>broadcast</code> 函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">broadcast</span><span class="params">(<span class="keyword">struct</span> condvar *cv)</span> &#123;</span><br><span class="line">    mutex_lock(&amp;cv-&gt;lock);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cv-&gt;nwait; i++) &#123;</span><br><span class="line">        V(&amp;cv-&gt;sleep);</span><br><span class="line">    &#125;</span><br><span class="line">    cv-&gt;nwait = <span class="number">0</span>;</span><br><span class="line">    mutex_unlock(&amp;cv-&gt;lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>mutex_lock(&amp;cv-&gt;lock)</code>：保护 nwait变量，防止并发修改。</li><li><code>for (int i = 0; i &lt; cv-&gt;nwait; i++) V(&amp;cv-&gt;sleep);</code>：唤醒所有等待的线程（每个线程对应一次V 操作）。</li><li><code>cv-&gt;nwait = 0;</code>：重置等待计数。</li><li><code>mutex_unlock(&amp;cv-&gt;lock)</code>：释放锁。</li></ul><h4 id="信号量实现条件变量出现的问题">信号量实现条件变量出现的问题</h4><ul><li>线程T2调用wait()，此时已经把自己标记为等待（nwait++），但还没真正阻塞（还没执行P）。</li><li>这时，因为其它线程的操作，另一个线程T1调用broadcast()，唤醒了所有等待线程（V操作），并继续执行。</li><li>此时nwait已经归零，T2就会睡死</li></ul><p>从理论上来说，我们希望<code>nwait++</code>,<code>mutex_unlock</code>和P操作是原子性的，并且<code>mutex_unlock</code>和P操作不可以互换位置（会在睡时一直持有锁，死锁了），但是实际上我们需要操作系统用类似条件变量的机制帮我们实现wait和release的原子性，这样就套娃了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;信号量-semaphore---停车场模型&quot;&gt;🚦 &lt;strong&gt;信号量 (Semaphore) -
停车场模型&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;口诀&lt;/strong&gt;：&lt;strong&gt;“计数资源，进出加减”&lt;/strong&gt;&lt;br /&gt;</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>代码随想录 | 八股-HTTP版本</title>
    <link href="https://mackz-maxw.github.io/2025/07/03/kamabagu4/"/>
    <id>https://mackz-maxw.github.io/2025/07/03/kamabagu4/</id>
    <published>2025-07-04T00:06:11.270Z</published>
    <updated>2025-07-11T02:05:49.917Z</updated>
    
    <content type="html"><![CDATA[<h3 id="http1.0和http1.1的区别">HTTP1.0和HTTP1.1的区别</h3><ol type="1"><li><strong>🚗 连接方式：从“一次一清”到“多次复用”</strong><ul><li><strong>HTTP 1.0：</strong><strong>默认短连接</strong>。浏览器每请求一个资源（图片、CSS、JS等），都要和服务器<strong>建立一次新的TCP连接</strong>，用完后立即关闭。</li><li><strong>HTTP 1.1：</strong><strong>默认持久连接</strong>。浏览器和服务器建立一个TCP连接后，可以在这个连接上<strong>连续发送多个请求和接收多个响应</strong>通过Connection:keep-alive头来实现持久连接。</li></ul></li><li><strong>🏠 Host头：从“单间平房”到“共享公寓”</strong><ul><li><strong>HTTP 1.0：</strong>请求中<strong>没有<code>Host</code>请求头</strong>。服务器认为一个IP地址就对应一个网站（一个“主机”）。想象成：一个门牌号只住一户人家。</li><li><strong>HTTP 1.1：</strong><strong>请求中必须包含<code>Host</code>请求头</strong>。指明请求要访问的是服务器上的哪个<strong>虚拟主机/域名</strong>。这使<strong>虚拟主机托管</strong>成为可能（一台服务器托管多个不同域名的网站）。想象成：一个门牌号（服务器IP）里住了好几户人家（不同网站），送快递必须写明收件人姓名（<code>Host</code>头）才知道送到哪户。</li></ul></li><li><strong>🧊 缓存控制：从“简单指示”到“精细管理”</strong><ul><li><strong>HTTP 1.0：</strong>主要用<code>If-Modified-Since/Expires</code>（绝对过期时间）和<code>Pragma: no-cache</code>（简单不缓存）控制缓存。功能简单，不够灵活。</li><li><strong>HTTP 1.1：</strong>引入了更强大、更精细的<strong><code>Cache-Control</code>头</strong>。可以指定<code>max-age</code>（相对过期时间）、<code>no-cache</code>（需重新验证）、<code>no-store</code>（禁止存储）、<code>public</code>/<code>private</code>等众多指令。<strong>（缓存控制能力大大增强！）</strong>也可使用<code>If-None-Match/Etag</code></li></ul></li><li><strong>⏳ 带宽优化：从“全有全无”到“按需取件”</strong><ul><li><strong>HTTP 1.0：</strong>如果下载大文件中断，<strong>必须从头开始重新下载</strong>。</li><li><strong>HTTP 1.1：</strong>支持<strong>断点续传</strong>。使用<code>Range</code>请求头可以指定只请求资源的一部分（如从第1000个字节开始），服务器用<code>206 Partial Content</code>状态码和<code>Content-Range</code>响应头返回部分内容。想象成：下载电影断网了，续播时可以从上次断开的地方继续下载，不用重头看。</li></ul></li><li><strong>🚀 请求处理：从“排队等”到“连续发”（理论上）</strong><ul><li><strong>HTTP 1.0：</strong>客户端必须<strong>等前一个请求的响应完全返回后，才能发送下一个请求</strong>。想象成：收费站，前一辆车完全通过栏杆落下再抬起，后一辆车才能进。</li><li><strong>HTTP 1.1：</strong>支持<strong>管道化</strong>。客户端可以<strong>在一个连接上连续发送多个请求，而不用等待每个响应</strong>。服务器必须按照收到请求的顺序返回响应。想象成：收费站允许连续进多辆车，但出来的顺序必须和进去的顺序一致。<strong>（理论上提升速度，但实践中问题多，较少用）</strong></li></ul></li><li><strong>📦 分块传输：从“等菜齐”到“边做边上”</strong><ul><li><strong>HTTP 1.0：</strong>服务器必须在知道资源的<strong>完整长度</strong>（<code>Content-Length</code>）后才能开始发送响应。对于动态生成的内容，需要等全部生成完才能发送。</li><li><strong>HTTP 1.1：</strong>引入了<strong>分块传输编码</strong>。服务器可以将响应分成多个“块”发送，并在最后一个块发送完毕后标记结束。使用<code>Transfer-Encoding: chunked</code>响应头。想象成：厨房边做菜边端上桌，不用等所有菜都做好。<strong>（提升动态内容响应速度，减少延迟）</strong></li></ul></li><li><strong>📝 错误处理：从“模糊”到“更明确”</strong><ul><li><strong>HTTP 1.1：</strong> 新增了一些状态码，提供更精确的错误信息：<ul><li><code>409 Conflict</code>：请求与服务器当前状态冲突。</li><li><code>410 Gone</code>：资源被永久删除（比<code>404 Not Found</code>更明确）。</li><li><code>100 Continue</code>：客户端发送大请求体前，先询问服务器是否愿意接收，服务器同意（<code>100 Continue</code>）后再发完整请求。避免带宽浪费。</li></ul></li><li><strong>响应格式：</strong> HTTP 1.1要求响应行中必须包含<strong>原因短语</strong>（如<code>HTTP/1.1 200 OK</code>），而 1.0只要求状态码是可选的（虽然实践中通常都有）。</li></ul></li></ol><h3 id="http2.0与http1.1的区别">HTTP2.0与HTTP1.1的区别？</h3><blockquote><p><strong>一句话记忆：HTTP/2 = 更快、更智能、更省资源！</strong></p></blockquote><h4 id="传输方式从文本排队到二进制分帧">1️⃣<strong>传输方式：从“文本排队”到“二进制分帧”</strong></h4><ul><li><strong>HTTP/1.1：</strong><ul><li>用<strong>纯文本格式</strong>发送请求和响应（比如<code>GET /index.html HTTP/1.1</code>）。<br /></li><li>多个请求必须<strong>排队串行处理</strong>（即使开了管道化也有队头阻塞问题）。<br /></li><li><strong>想象：</strong>邮局用明信片寄信，一次只能寄一张，必须等回信才能寄下一张，效率低。✉️➡️✉️➡️✉️</li></ul></li><li><strong>HTTP/2：</strong><ul><li>将数据拆分成更小的<strong>二进制帧（Frame）</strong>（头部帧 HEADERS+ 数据帧 DATA）。<br /></li><li>同一个连接上，<strong>多个请求/响应的帧可以混合发送、并行传输</strong>，互不阻塞！<br /></li><li><strong>想象：</strong>快递公司把包裹拆成小件，打上标签，通过立体分拣通道同时运输，到目的地再组装。📦📦📦→ 🚚💨</li></ul></li></ul><p>👉<strong>核心价值：彻底解决队头阻塞，大幅提升并发效率！</strong></p><h4 id="连接方式从多路排队到真多路复用">2️⃣<strong>连接方式：从“多路排队”到“真·多路复用”</strong></h4><ul><li><strong>HTTP/1.1：</strong><ul><li>虽然支持持久连接（一个TCP连多个请求），但<strong>响应必须按顺序返回</strong>（队头阻塞）。<br /></li><li>浏览器通常开 <strong>6~8个TCP连接</strong>并行请求资源（但占用资源多）。</li></ul></li><li><strong>HTTP/2：</strong><ul><li><strong>一个TCP连接</strong> 上即可实现<strong>成百上千个流的并行传输</strong>（每个流是一个请求/响应）。<br /></li><li>帧自带流ID标识，接收方能按ID重组数据，无需排队等待！<br /></li><li><strong>想象：</strong> 从多条乡间小路 →升级成一条双向十车道高速路，所有车辆（请求）畅通无阻。🛣️🚗🚙🚕</li></ul></li></ul><p>👉<strong>核心价值：一个连接解决所有请求，省资源、低延迟！</strong></p><h4 id="头部信息从重复臃肿到高效压缩">3️⃣<strong>头部信息：从“重复臃肿”到“高效压缩”</strong></h4><ul><li><strong>HTTP/1.1：</strong><ul><li>每次请求都携带大量<strong>重复的文本头部</strong>（如Cookie、User-Agent），不压缩。<br /></li><li><strong>浪费带宽</strong>（尤其小文件请求时，头部可能比数据还大）。</li></ul></li><li><strong>HTTP/2：</strong><ul><li>使用 <strong>HPACK 算法压缩头部</strong>：<ul><li>客户端和服务端维护<strong>“头部字典”</strong>，相同头部只传索引；<br /></li><li>用霍夫曼编码压缩文本。<br /></li></ul></li><li><strong>头部大小减少 30%~90%</strong>！<br /></li><li><strong>想象：</strong> 从每次寄信都手写完整地址 →改用电子二维码扫码寄件，地址库自动匹配。📮→📲</li></ul></li></ul><p>👉 <strong>核心价值：大幅节省带宽，加快小资源加载！</strong></p><h4 id="服务器主动推送从被动响应到主动送货">4️⃣<strong>服务器主动推送：从“被动响应”到“主动送货”</strong></h4><ul><li><strong>HTTP/1.1：</strong><ul><li>服务器<strong>只能被动响应</strong>客户端请求。<br /></li><li>浏览器需解析HTML后，再请求CSS/JS/图片等依赖资源。</li></ul></li><li><strong>HTTP/2：</strong><ul><li>服务器可<strong>主动推送</strong>客户端可能需要的资源（如CSS/JS）！<br /></li><li>客户端可缓存推送内容，下次直接使用。<br /></li><li><strong>想象：</strong>点外卖时，商家不仅送米饭，还主动附赠了筷子和纸巾（你知道你一定会需要）。🍚+🥢+🧻</li></ul></li></ul><p>👉 <strong>核心价值：减少请求往返次数，加速页面渲染！</strong></p><h4 id="优先级与流量控制更智能的资源调度">5️⃣<strong>优先级与流量控制：更智能的资源调度</strong></h4><ul><li><strong>HTTP/2：</strong><ul><li>客户端可为请求标记<strong>优先级</strong>（如CSS &gt;图片），服务器优先处理高优先级流。<br /></li><li>支持精细的<strong>流量控制</strong>（基于每个流控制传输速率）。<br /></li></ul></li><li><strong>HTTP/1.1：</strong>无法真正实现优先级调度（依赖浏览器启发式策略）。</li></ul><h4 id="注意">⚠️ 注意：</h4><ol type="1"><li>HTTP/2 <strong>未加密</strong>，但所有主流浏览器只支持<strong>HTTP/2 Over TLS</strong>（即 HTTPS）。<br /></li><li>HTTP/2 解决了应用层队头阻塞，但 <strong>TCP层仍有队头阻塞</strong>（丢包会阻塞所有流）。<br /></li><li>这是 HTTP/3（基于QUIC/UDP）要解决的下一代问题！</li></ol><h3 id="http3.0有了解过吗">HTTP3.0有了解过吗？</h3><p>🚀 <strong>核心一句话：HTTP/3 = 抛弃TCP！拥抱QUIC！</strong> &gt;<strong>解决 HTTP/2 的终极痛点：TCP 的队头阻塞！</strong></p><h4 id="底层协议革命从-tcp-到-quic基于udp">1️⃣ <strong>底层协议革命：从TCP 到 QUIC（基于UDP）</strong></h4><ul><li><strong>HTTP/1.1 &amp; HTTP/2：</strong> 都跑在 <strong>TCP</strong>协议之上。<ul><li><strong>TCP 问题：</strong>如果传输中<strong>丢了一个包</strong>，后续所有包都要等待重传（即使它们属于不同请求），这就是<strong>TCP 队头阻塞</strong>。<br /></li><li><strong>想象：</strong>快递车队走一条单行道，前一辆车抛锚，后面所有车都得堵着等（无论是不是同一批货物）。🚚❌🚛🚗🚐<br /></li></ul></li><li><strong>HTTP/3：</strong> 彻底抛弃 TCP，改用全新协议<strong>QUIC（Quick UDP Internet Connections）</strong>，运行在<strong>UDP</strong> 之上。<ul><li><strong>QUIC 优势：</strong>每个请求/响应流是<strong>独立传输的</strong>，丢包只影响当前流，其他流畅通无阻！<br /></li><li><strong>想象：</strong>快递改用无人机配送，每件包裹独立飞行路线，一个包裹出问题，其他包裹照常送达。✈️📦➡️🏠| ✈️📦➡️🏠 | 💥📦❌ | ✈️📦➡️🏠<br />👉<strong>核心价值：彻底消灭传输层队头阻塞，网络波动时性能大幅提升！</strong></li></ul></li></ul><h4 id="建连速度飞跃0-rtt-与-1-rtt-握手">2️⃣ <strong>建连速度飞跃：0-RTT与 1-RTT 握手</strong></h4><ul><li><strong>HTTP/1.1 &amp; HTTP/2（TCP+TLS）：</strong><ul><li>首次连接需 <strong>TCP 三次握手（1.5 RTT） + TLS 握手（1~2 RTT） =总计 2~3.5 RTT</strong> 延迟才能发送数据。<br /></li></ul></li><li><strong>HTTP/3（QUIC）：</strong><ul><li><strong>首次连接：1-RTT 握手</strong>（QUIC将传输和加密握手合并）。<br /></li><li><strong>重连用户：0-RTT握手</strong>！客户端缓存了服务器密钥，首次请求可直接带上加密数据。<br /></li><li><strong>想象：</strong>进地铁站——旧方式：先排队买票（TCP握手），再安检（TLS握手）；新方式：刷脸直接进（0-RTT）！🎫→🛂→🚇→ 😃🔜🚇<br />👉 <strong>核心价值：首次访问更快，重复访问“闪电启动”！</strong></li></ul></li></ul><h4 id="连接迁移网络切换不断线">3️⃣<strong>连接迁移：网络切换不断线</strong></h4><ul><li><strong>HTTP/1.1 &amp; HTTP/2：</strong><ul><li>连接绑定 <strong>IP + 端口 +TCP协议</strong>。切换网络（如WiFi→4G）会导致IP变化，连接必须重建！<br /></li></ul></li><li><strong>HTTP/3（QUIC）：</strong><ul><li>使用 <strong>连接ID（Connection ID）</strong> 唯一标识连接。<br /></li><li>切换网络时，只要客户端能通信，连接ID不变，会话无缝延续！<br /></li><li><strong>想象：</strong>旧手机卡换手机要重新插卡激活；eSIM卡换手机自动联网，号码不变。📱➡️📱 =❌ vs 📱➡️📱 = ✅<br />👉<strong>核心价值：移动端福音！地铁进隧道、WiFi切5G，视频会议不中断！</strong></li></ul></li></ul><h4 id="内嵌加密安全是强制要求">4️⃣<strong>内嵌加密：安全是强制要求</strong></h4><ul><li><strong>QUIC 协议设计之初就强制加密</strong>（使用 TLS 1.3）。<br /></li><li><strong>没有明文的 QUIC！</strong> 所有头部和载荷默认加密。<br /></li><li><strong>对比：</strong> HTTP/2的加密（HTTPS）是可选但事实强制，HTTP/3 直接内嵌到协议层。<br />👉<strong>核心价值：提升安全性，防止运营商劫持、降低中间设备干扰。</strong></li></ul><h4 id="改进的多路复用-头部压缩">5️⃣ <strong>改进的多路复用 &amp;头部压缩</strong></h4><ul><li><strong>多路复用：</strong> 继承 HTTP/2的流多路复用（一个连接并发多个流），且由于基于QUIC，<strong>无队头阻塞</strong>。<br /></li><li><strong>头部压缩：</strong> 升级为 <strong>QPACK</strong> 算法（类似HTTP/2 的 HPACK，但适应 QUIC 乱序特性）。<br />👉 <strong>核心价值：在 HTTP/2 高效基础上，更稳定！</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;http1.0和http1.1的区别&quot;&gt;HTTP1.0和HTTP1.1的区别&lt;/h3&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;strong&gt;🚗 连接方式：从“一次一清”到“多次复用”&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTP 1.0：</summary>
      
    
    
    
    <category term="comp basic" scheme="https://mackz-maxw.github.io/categories/comp-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>代码随想录 | 刷题-动态规划3</title>
    <link href="https://mackz-maxw.github.io/2025/06/29/kamacode30/"/>
    <id>https://mackz-maxw.github.io/2025/06/29/kamacode30/</id>
    <published>2025-06-29T22:25:40.627Z</published>
    <updated>2025-07-02T01:08:29.002Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分割等和子集">416. 分割等和子集</h3><p><strong>动态规划的正确性</strong>： -每次迭代考虑一个新物品的所有可能组合 -在使用一维dp数组时，倒序遍历保证状态转移只依赖<strong>上一轮</strong>结果</p><p>原始思路主要问题： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="type">int</span> cnt = target;</span><br><span class="line"><span class="keyword">for</span> (遍历每个数字) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt;= 当前数字) cnt -= 当前数字; <span class="comment">// 强制选择</span></span><br><span class="line">    <span class="keyword">if</span> (dp[cnt]) ... <span class="comment">// 但dp从未更新！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>贪心选择错误</strong>：强制按顺序选择数字，不能处理非连续选择也可以使用布尔值判断： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canPartition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> eq = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n : nums)&#123;</span><br><span class="line">            eq += n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(eq % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            eq = eq / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">dp</span><span class="params">(eq+<span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> cnt = eq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n : nums)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> e = eq; e&gt;=n; e--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[e - n])&#123;</span><br><span class="line">                    dp[e] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(dp[eq])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;分割等和子集&quot;&gt;416. 分割等和子集&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;动态规划的正确性&lt;/strong&gt;： -
每次迭代考虑一个新物品的所有可能组合 -
在使用一维dp数组时，倒序遍历保证状态转移只依赖&lt;strong&gt;上一轮&lt;/strong&gt;结果&lt;/p&gt;</summary>
      
    
    
    
    <category term="leetcode" scheme="https://mackz-maxw.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 3.3 系统调用实现</title>
    <link href="https://mackz-maxw.github.io/2025/06/28/oper_sys12/"/>
    <id>https://mackz-maxw.github.io/2025/06/28/oper_sys12/</id>
    <published>2025-06-28T20:36:58.387Z</published>
    <updated>2025-06-29T15:54:21.851Z</updated>
    
    <content type="html"><![CDATA[<h3 id="uapi-文件位置">UAPI 文件位置</h3><p><strong>问题背景：</strong><br />内核头文件中，内联函数往往需要引用其他头文件的结构体或常量，但这些头文件之间又存在相互依赖，导致无法直接引用，只能用#define 代替，降低了代码质量。</p><p><strong>解决方案：</strong><br />David 提出将内核头文件中的用户空间 API内容（即用户空间可见的定义）拆分到新的 uapi/子目录下的对应头文件中。这样做有以下好处：</p><ul><li>简化内核专用头文件，减少体积。</li><li>明确区分用户空间与内核空间的 API，减少头文件间复杂的相互依赖。</li><li>便于追踪用户空间 API 的变更，方便 C库维护者、脚本语言绑定、测试、文档等相关项目。</li></ul><p><strong>拆分方法：</strong><br />一般头文件结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 头部注释 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _XXXXXX_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _XXXXXX_H</span></span><br><span class="line"></span><br><span class="line">[用户空间定义]</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __KERNEL__</span></span><br><span class="line"></span><br><span class="line">[内核空间定义]</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __KERNEL__ */</span></span></span><br><span class="line"></span><br><span class="line">[用户空间定义]</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* _XXXXXX_H */</span></span></span><br></pre></td></tr></table></figure><ul><li>所有未被 <code>#ifdef __KERNEL__</code> 包裹的内容，移动到 uapi/目录下的新头文件。</li><li><code>#ifdef __KERNEL__</code> 内的内容保留在原头文件，但移除<code>#ifdef</code> 和 <code>#endif</code>。</li><li>头部注释保留并复制到新文件。</li><li>原头文件需添加<code>#include &lt;include/uapi/path/to/header.h&gt;</code>，放在已有<code>#include</code> 之后。</li><li>若原文件没有 <code>#ifdef __KERNEL__</code>，则直接重命名为 uapi/文件。</li></ul><h4 id="技术实现要点">技术实现要点</h4><ul><li><strong>头文件结构调整</strong>：将所有未被<code>#ifdef __KERNEL__</code> 包裹的内容迁移到 <code>uapi/</code>目录下的新头文件，原文件只保留内核专用部分，并通过 <code>#include</code>引用新的 uapi 头文件。</li><li><strong>自动化脚本辅助</strong>：由于头文件风格多样，David Howell编写了大量 shell/Perl脚本自动完成拆分，并对特殊情况通过预处理标记进行“辅导”。</li><li><strong>兼容性与构建保证</strong>：拆分后，内核和用户空间的构建流程保持兼容，确保包含关系和功能不变。</li></ul><h4 id="社区讨论与挑战">社区讨论与挑战</h4><ul><li><strong>大规模变更的审查难题</strong>：一次性修改数千文件、数十万行代码，难以人工逐行审查。社区建议主要审查思路和脚本实现，并通过自动化构建和对比二进制产物来验证正确性。</li><li><strong>头文件包含路径的争议</strong>：有开发者质疑 uapi头文件是否应包含内核头文件，实际实现中为兼容性和构建需要，uapi头文件在内核构建时会包含内核头文件，但用户空间只见到 uapi 头文件。</li><li><strong>隐式依赖与编译优化</strong>：有建议借此机会清理隐式包含、优化编译速度，但这属于更大范围的重构，超出了本次拆分的目标。</li><li><strong>自动化工具的局限</strong>：与 Java 等语言不同，C语言的预处理器和头文件机制更为复杂，自动化脚本难以覆盖所有边界情况，仍需人工干预和后续维护。</li></ul><h3 id="系统调用源码指引以-arm-架构为例">系统调用源码指引（以 ARM架构为例）</h3><p>系统调用的实现高度依赖于具体架构，包括调用方式和可用的系统调用种类。以下是ARM 架构下与系统调用密切相关的核心源码文件：</p><ul><li><p><strong>include/linux/syscalls.h</strong><br />提供所有内核系统调用的架构无关的前向声明。该文件定义了内核内部调用系统调用函数的接口。</p></li><li><p><strong>arch/arm/include/uapi/asm/unistd.h</strong><br />定义了 ARM 架构下系统调用号的相关内容。</p></li><li><p><strong>arch/arm/kernel/entry-common.S</strong><br />提供 ARM 架构下系统调用的入口汇编实现。</p></li><li><p><strong>arch/arm/tools/syscall.tbl</strong><br />负责将系统调用号及其对应的函数地址注册到 ARM硬件的系统调用表中。</p></li></ul><p>此外，以下文件虽然与系统调用无关，但涉及系统启动（这是内核执行的另一种方式）：</p><ul><li><p><strong>init 目录</strong><br />包含内核初始化相关代码。</p></li><li><p><strong>init/main.c</strong><br />提供了 <code>start_kernel</code> 函数，这是 Linux 内核启动后执行的第一个C语言函数，且一旦调用永不返回。在此之前，内核仅通过架构相关的汇编代码和固件运行。<br />（参考：《Linux 设备驱动》第16章对 main.c 和 start_kernel的介绍）</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;uapi-文件位置&quot;&gt;UAPI 文件位置&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;问题背景：&lt;/strong&gt;&lt;br /&gt;
内核头文件中，内联函数往往需要引用其他头文件的结构体或常量，但这些头文件之间又存在相互依赖，导致无法直接引用，只能用
#define 代替，降</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 3.2 系统调用实现</title>
    <link href="https://mackz-maxw.github.io/2025/06/27/oper_sys11/"/>
    <id>https://mackz-maxw.github.io/2025/06/27/oper_sys11/</id>
    <published>2025-06-27T23:22:48.265Z</published>
    <updated>2025-06-27T23:39:30.268Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统调用的实现">系统调用的实现</h2><p>在 Linux 中，实际实现一个系统调用时，不需要关心系统调用处理器（systemcall handler）的具体行为。因此，向 Linux添加一个新的系统调用相对容易。难点在于设计和实现系统调用本身，而将其注册到内核则很简单。下面是编写新系统调用的主要步骤。</p><h3 id="实现系统调用的步骤">实现系统调用的步骤</h3><ol type="1"><li><p><strong>明确目的</strong><br />首先要定义系统调用的用途。系统调用应该只做一件事。Linux不鼓励“多路复用”系统调用（即通过一个参数让同一个系统调用做完全不同的事情），如ioctl() 就是反面教材。</p></li><li><p><strong>参数、返回值和错误码设计</strong><br />系统调用应有简洁、清晰的接口，参数数量应尽量少。其语义和行为必须稳定，不能随意更改，因为已有应用会依赖这些行为。要有前瞻性，考虑未来是否需要扩展功能，是否能在不破坏兼容性的前提下修复bug。很多系统调用会设计一个 flag参数，用于将来扩展功能（不是用来多路复用行为，而是为了兼容性和可扩展性）。</p></li><li><p><strong>接口设计要通用、可移植</strong><br />不要让接口过于局限当前用途。系统调用的用途可能会变化，但其本质目的应保持不变。要考虑可移植性，不要假设特定架构的字长或字节序。Unix的设计哲学是“提供机制，不规定策略”。</p></li><li><p><strong>关注可移植性和健壮性</strong><br />编写系统调用时要考虑未来的可移植性和健壮性。Unix的基本系统调用经受住了时间考验，几十年后依然适用。</p></li></ol><hr /><h3 id="参数校验">参数校验</h3><p>系统调用必须<strong>严格校验所有参数</strong>，确保其有效和合法。系统调用在内核空间运行，如果用户能随意传递无效参数，系统的安全和稳定性会受到威胁。</p><ul><li><p>例如，文件 I/O系统调用要检查文件描述符是否有效；进程相关函数要检查 PID是否有效。每个参数都要验证其正确性，防止进程请求访问其无权访问的资源。</p></li><li><p><strong>指针参数的校验尤为重要</strong>。如果进程能传递任意指针给内核，可能会让内核访问本不该访问的数据（如其他进程的数据或内核空间数据）。因此，在内核跟随用户空间指针前，必须确保：</p><ol type="1"><li>指针指向用户空间内存，不能让进程让内核访问内核空间。</li><li>指针指向的是本进程的地址空间，不能访问其他进程的数据。</li><li>读操作时内存必须可读，写操作时必须可写，执行操作时必须可执行，不能绕过内存访问权限。</li></ol></li><li><p>内核提供了两种方法来进行这些检查和数据拷贝，<strong>内核代码绝不能直接跟随用户空间指针</strong>，必须使用以下两种方法之一：</p><ul><li><code>copy_to_user()</code>：用于将数据从内核空间写入用户空间。参数分别为用户空间目标地址、内核空间源地址、拷贝字节数。</li><li><code>copy_from_user()</code>：用于从用户空间读取数据到内核空间。参数分别为内核空间目标地址、用户空间源地址、拷贝字节数。</li></ul></li><li><p>这两个函数在出错时返回未拷贝的字节数，成功时返回0。系统调用遇到这种错误时，通常返回 <code>-EFAULT</code>。</p></li></ul><p>下面以一个简单的系统调用 <code>silly_copy()</code>为例，说明如何在内核中安全地从用户空间读取和写入数据。这个系统调用的功能是：将用户空间<code>src</code> 指向的数据拷贝到<code>dst</code>，中间通过内核缓冲区作为中转。虽然实际用途不大，但有助于理解<code>copy_from_user()</code> 和 <code>copy_to_user()</code>的用法。</p><p><strong>核心代码片段：</strong> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE3(silly_copy,</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *, src, </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *, dst, </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> len)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> buf;</span><br><span class="line">    <span class="comment">// 从用户空间 src 拷贝 len 字节到内核缓冲区 buf</span></span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(&amp;buf, src, len))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line">    <span class="comment">// 从内核缓冲区 buf 拷贝 len 字节到用户空间 dst</span></span><br><span class="line">    <span class="keyword">if</span> (copy_to_user(dst, &amp;buf, len))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line">    <span class="comment">// 返回拷贝的字节数</span></span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> -<code>copy_from_user()</code>：将用户空间数据拷贝到内核空间，失败时返回未拷贝的字节数，成功返回0。-<code>copy_to_user()</code>：将内核空间数据拷贝到用户空间，失败时返回未拷贝的字节数，成功返回0。- 如果拷贝失败，系统调用返回 <code>-EFAULT</code>。</p><p><strong>注意：</strong><br />这两个函数在数据页不在物理内存时可能会阻塞（如数据被换出到磁盘），此时进程会休眠直到页面被调入内存。</p><h3 id="权限检查与能力机制">权限检查与能力机制</h3><p>在早期 Linux 版本中，系统调用如果需要超级用户权限，会用<code>suser()</code> 检查是否为 root。现在，Linux使用更细粒度的“能力（capabilities）”机制。通过 <code>capable()</code>函数检查调用进程是否拥有某项能力。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!capable(CAP_SYS_BOOT))</span><br><span class="line">    <span class="keyword">return</span> -EPERM;</span><br></pre></td></tr></table></figure><ul><li><code>capable(CAP_SYS_BOOT)</code>检查调用者是否有重启系统的权限（CAP_SYS_BOOT）。</li><li>超级用户（root）默认拥有所有能力，普通用户默认没有。</li></ul><p><strong>reboot() 系统调用部分实现：</strong> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE4(reboot, <span class="type">int</span> magic1, <span class="type">int</span> magic2, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">void</span> __user *, arg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">    <span class="comment">// 只允许超级用户重启系统</span></span><br><span class="line">    <span class="keyword">if</span> (!capable(CAP_SYS_BOOT))</span><br><span class="line">        <span class="keyword">return</span> -EPERM;</span><br><span class="line">    <span class="comment">// 检查 magic 参数，防止误操作</span></span><br><span class="line">    <span class="keyword">if</span> (magic1 != LINUX_REBOOT_MAGIC1 ||</span><br><span class="line">        (magic2 != LINUX_REBOOT_MAGIC2 &amp;&amp;</span><br><span class="line">         magic2 != LINUX_REBOOT_MAGIC2A &amp;&amp;</span><br><span class="line">         magic2 != LINUX_REBOOT_MAGIC2B &amp;&amp;</span><br><span class="line">         magic2 != LINUX_REBOOT_MAGIC2C))</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    <span class="comment">// ... 省略后续命令处理 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> -首先检查权限，只有拥有 CAP_SYS_BOOT 能力的进程才能重启系统。 - 然后检查magic 参数，只有传入特定的“魔数”才允许执行，防止误操作。</p><p><strong>能力列表</strong>可参考<code>&lt;linux/capability.h&gt;</code>，每种能力对应不同的系统资源访问权限。</p><h3 id="系统调用上下文system-call-context">系统调用上下文（System CallContext）</h3><p>如第3章所述，<strong>在执行系统调用期间，内核处于进程上下文（processcontext）</strong>。此时，<code>current</code>指针指向当前任务（即发起系统调用的进程）。</p><ul><li>在进程上下文中，内核<strong>可以休眠</strong>（比如系统调用阻塞或显式调用<code>schedule()</code>），并且是<strong>完全可抢占的</strong>。<ul><li>能够休眠意味着系统调用可以使用大部分内核功能，这极大简化了内核编程（相比中断处理程序，中断处理程序不能休眠，功能受限）。</li><li>可抢占意味着当前任务可能被其他任务抢占，新的任务可能会执行同一个系统调用，因此系统调用实现必须<strong>可重入</strong>，这和多核并发下的同步问题类似。</li></ul></li></ul><p>当系统调用返回时，控制权回到<code>system_call()</code>，最终切换回用户空间，继续执行用户进程。</p><h3 id="系统调用注册的最后步骤">系统调用注册的最后步骤</h3><p>系统调用代码写好后，将其注册为正式系统调用的过程很简单：</p><ol type="1"><li><strong>在系统调用表中添加条目</strong><ul><li>对于每个支持该系统调用的架构，都要在系统调用表（如entry.S）末尾添加一项。表中每一项的位置（从0开始）就是系统调用号。例如，第10项的系统调用号是9。</li><li>表示例（部分）： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ENTRY(sys_call_table)</span><br><span class="line">.long sys_restart_syscall    /* 0 */</span><br><span class="line">.long sys_exit</span><br><span class="line">.long sys_fork</span><br><span class="line">.long sys_read</span><br><span class="line">.long sys_write</span><br><span class="line">.long sys_open              /* 5 */</span><br><span class="line">...</span><br><span class="line">.long sys_foo               /* 新增的系统调用 */</span><br></pre></td></tr></table></figure></li><li>新系统调用自动获得下一个可用的系统调用号（如338）。</li></ul></li><li><strong>在 &lt;asm/unistd.h&gt; 中定义系统调用号</strong><ul><li>每个架构都要在对应的 <code>&lt;asm/unistd.h&gt;</code>文件中添加宏定义。例如： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_foo 338</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>将系统调用编译进内核镜像</strong><ul><li>系统调用必须编译进核心内核镜像（不能作为模块）。通常把实现代码放在kernel/ 目录下相关的文件中，比如 sys.c。如果和调度相关，可以放在kernel/sched.c。</li></ul></li></ol><p><strong>示例：实现 foo() 系统调用</strong></p><ul><li>在 kernel/sys.c 中实现： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/page.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * sys_foo – 返回每个进程的内核栈大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">asmlinkage <span class="type">long</span> <span class="title function_">sys_foo</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> THREAD_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编译并启动新内核后，用户空间即可通过系统调用号调用 foo()。</li></ul><h3 id="用户空间访问系统调用">用户空间访问系统调用</h3><p>通常，C 标准库（如glibc）会为系统调用提供支持。用户程序只需包含标准头文件并链接 C库，就可以直接调用系统调用（或调用库函数间接使用系统调用）。但如果你刚刚实现了一个新的系统调用，glibc很可能还没有为它提供支持！</p><p>幸运的是，Linux提供了一组宏来帮助用户空间访问系统调用。这些宏会设置好寄存器内容并发出陷阱指令。宏的名字为<code>_syscalln()</code>，其中 n 取 0 到6，表示系统调用参数的个数。宏需要知道参数个数，以便正确地将参数压入寄存器。</p><p>例如，open() 系统调用的原型为： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">int</span> flags, <span class="type">int</span> mode)</span></span><br></pre></td></tr></table></figure>如果没有库支持，可以这样使用宏： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_open 5</span></span><br><span class="line">_syscall3(<span class="type">long</span>, open, <span class="type">const</span> <span class="type">char</span> *, filename, <span class="type">int</span>, flags, <span class="type">int</span>, mode)</span><br></pre></td></tr></table></figure>这样，应用程序就可以直接调用 open() 了。</p><p>每个宏的参数为 2 + 2 ×n：第一个参数是返回类型，第二个是系统调用名，后面依次是每个参数的类型和名字。<code>__NR_open</code>定义在<code>&lt;asm/unistd.h&gt;</code>，表示系统调用号。<code>_syscall3</code>宏会展开为带有内联汇编的 C函数，自动完成系统调用号和参数的传递，并发出软中断进入内核。只需在应用中写这个宏，就能直接使用open() 系统调用。</p><p><strong>示例：用户空间调用自定义 foo() 系统调用</strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_foo 283</span></span><br><span class="line">_syscall0(<span class="type">long</span>, foo)</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">long</span> stack_size;</span><br><span class="line">    stack_size = foo();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The kernel stack size is %ld\n&quot;</span>, stack_size);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3id="为什么不建议随意实现新系统调用">为什么不建议随意实现新系统调用</h3><p>虽然实现新系统调用很容易，但这并不意味着你应该随意添加。实际上，添加新系统调用要非常谨慎。很多情况下，有更合适的替代方案。</p><p><strong>实现新系统调用的优点：</strong> - 实现简单，使用方便。 - 在Linux 上系统调用性能很高。</p><p><strong>缺点：</strong> - 需要分配一个系统调用号，必须官方分配。 -一旦进入稳定内核版本，接口就不能随意更改，否则会破坏用户空间应用的兼容性。- 每个架构都要单独注册和支持该系统调用。 -系统调用不能直接被脚本调用，也不能直接通过文件系统访问。 -需要分配系统调用号，难以在主线内核树之外维护和使用。 -对于简单信息交换，系统调用显得过于繁重。</p><p><strong>常见替代方案：</strong> - 实现一个设备节点，通过read()/write() 进行数据交换，使用 ioctl() 操作特定设置或获取信息。 -某些接口（如信号量）可以用文件描述符表示并进行操作。 -将信息作为文件添加到 sysfs 的合适位置。</p><p>对于许多接口，系统调用确实是正确的选择。但 Linux一直避免为每个新抽象都添加系统调用，这使得系统调用层非常简洁、稳定，很少有废弃接口。新系统调用增加速度慢，说明Linux 已经相对稳定且功能完善。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;系统调用的实现&quot;&gt;系统调用的实现&lt;/h2&gt;
&lt;p&gt;在 Linux 中，实际实现一个系统调用时，不需要关心系统调用处理器（system
call handler）的具体行为。因此，向 Linux
添加一个新的系统调用相对容易。难点在于设计和实现系统调用本身，而</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 3. 系统调用</title>
    <link href="https://mackz-maxw.github.io/2025/06/27/oper_sys10/"/>
    <id>https://mackz-maxw.github.io/2025/06/27/oper_sys10/</id>
    <published>2025-06-27T18:34:45.101Z</published>
    <updated>2025-06-27T21:15:15.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="与内核通信">与内核通信</h2><p>系统调用（systemcall）在硬件和用户空间进程之间提供了一层抽象，这一层有三个主要作用：</p><ol type="1"><li><p><strong>硬件抽象</strong><br />系统调用为用户空间提供了统一的硬件接口。例如，应用程序在读写文件时，无需关心底层的磁盘类型、介质类型，甚至文件所在的文件系统类型。</p></li><li><p><strong>系统安全与稳定</strong><br />有了内核作为中介，内核可以根据权限、用户等标准仲裁资源访问。这防止了应用程序误用硬件、窃取其他进程资源或对系统造成破坏。</p></li><li><p><strong>虚拟化与多任务支持</strong><br />用户空间与系统其他部分之间有统一的接口，便于实现进程虚拟化和多任务。如果应用能直接访问系统资源，将难以实现多任务和虚拟内存，更无法保证系统的稳定和安全。</p></li></ol><p>在 Linux中，系统调用是用户空间与内核交互的唯一合法入口（除了异常和陷阱）。即使是设备文件或<code>/proc</code>这样的接口，最终也要通过系统调用访问。值得一提的是，Linux的系统调用数量比大多数系统要少。</p><h3 id="apiposix-与-c-库">API、POSIX 与 C 库</h3><p>通常，应用程序是基于用户空间的API（应用程序编程接口）开发的，而不是直接调用系统调用。这很重要，因为API 与内核实际提供的接口之间不需要一一对应。API定义了一组供应用程序使用的编程接口，这些接口可以通过一个系统调用实现，也可以通过多个系统调用，甚至完全不依赖系统调用。这样，同样的API 可以在不同系统上实现，应用程序无需关心底层实现细节。</p><p>在 Unix 世界中，最常见的 API 之一是基于 POSIX 标准的。POSIX 是 IEEE制定的一系列标准，旨在提供基于 Unix 的可移植操作系统标准。Linux在适用的地方努力兼容 POSIX 和 SUSv3。</p><p>POSIX 很好地体现了 API 与系统调用的关系。在大多数 Unix 系统中，POSIXAPI 与系统调用高度相关，POSIX 标准本身就是参考早期 Unix系统接口制定的。但有些非 Unix 系统（如 Windows）也提供了 POSIX兼容库。</p><h4 id="c-库的作用">C 库的作用</h4><p>在 Linux 和大多数 Unix 系统中，C 库（如glibc）部分实现了系统调用接口。C 库不仅实现了标准 C库，还实现了系统调用接口，是所有 C 程序的基础。由于 C语言的特性，其他编程语言也可以很方便地调用 C 库。C 库还实现了大部分POSIX API。</p><p>对应用开发者来说，系统调用的细节并不重要，他们只关心API；而内核只关心系统调用，至于哪些库函数或应用程序会用到这些系统调用，内核并不关心。不过，内核需要保证系统调用的通用性和灵活性，以适应各种用途。</p><h3 id="系统调用syscalls">系统调用（Syscalls）</h3><p>在 Linux 中，系统调用（syscall）通常通过 C库中定义的函数进行访问。系统调用可以有零个、一个或多个参数（输入），并可能产生一个或多个副作用，例如写文件或将数据复制到指定指针。系统调用还会返回一个long类型的值，用于表示成功或错误——通常（但并非总是）负值表示错误，返回值为 0通常（但也不是总是）表示成功。</p><p>当系统调用出错时，C 库会将一个特殊的错误码写入全局变量<code>errno</code>。可以通过如 <code>perror()</code> 这样的库函数将<code>errno</code> 转换为可读的错误信息。</p><p>系统调用有明确的行为定义。例如，<code>getpid()</code>系统调用被定义为返回当前进程的 PID。其内核实现大致如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE0(getpid) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> task_tgid_vnr(current); <span class="comment">// 返回 current-&gt;tgid</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：你可能会好奇为什么 <code>getpid()</code> 返回的是tgid（线程组ID）？在普通进程中，TGID 等于PID；而在线程中，同一线程组的所有线程 TGID 相同，这样所有线程调用<code>getpid()</code> 时返回相同的 PID。</p></blockquote><p>需要注意的是，定义只规定了行为，具体实现方式由内核决定，只要结果正确即可。<code>SYSCALL_DEFINE0</code>是一个宏，用于定义无参数的系统调用（0 表示参数个数）。展开后类似于：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asmlinkage <span class="type">long</span> <span class="title function_">sys_getpid</span><span class="params">(<span class="type">void</span>)</span></span><br></pre></td></tr></table></figure><ul><li><code>asmlinkage</code>修饰符告诉编译器只从栈上获取参数，这是所有系统调用都需要的修饰符。</li><li>返回类型为 long，是为了兼容 32 位和 64 位系统。即使用户空间定义为int，内核中也返回 long。</li><li>命名约定：内核中系统调用的实现函数名为 <code>sys_xxx()</code>，如<code>getpid()</code> 对应 <code>sys_getpid()</code>。</li></ul><h4 id="系统调用号system-call-numbers">系统调用号（System CallNumbers）</h4><p>在 Linux 中，每个系统调用都有唯一的系统调用号（syscallnumber），用于标识具体的系统调用。用户空间进程执行系统调用时，实际上是通过系统调用号来指定调用哪个系统调用，而不是用名字。</p><p>系统调用号非常重要，一旦分配就不能更改，否则已编译的应用程序会出错。同样，如果某个系统调用被移除，其编号也不能被回收，否则旧程序会调用到错误的系统调用。Linux提供了一个“未实现”系统调用 <code>sys_ni_syscall()</code>，它只返回-ENOSYS（表示无效系统调用），用于填补被移除或不可用的系统调用号。</p><p>内核通过系统调用表（<code>sys_call_table</code>）维护所有已注册的系统调用。在x86-64 架构下，这个表定义在 <code>arch/i386/kernel/syscall_64.c</code>文件中，每个有效的系统调用都分配有唯一的编号。</p><h4 id="系统调用性能">系统调用性能</h4><p>Linux 的系统调用比许多其他操作系统更快，这部分归功于 Linux的上下文切换速度快，进入和退出内核的过程非常简洁高效，系统调用处理器和各个系统调用本身也很简单。</p><h3 id="系统调用处理器system-call-handler">系统调用处理器（System CallHandler）</h3><p>用户空间的应用程序<strong>无法直接执行内核代码</strong>，也不能直接调用内核空间的方法，因为内核处于受保护的内存空间。如果应用可以直接读写内核地址空间，系统的安全性和稳定性将无法保证。</p><p>因此，用户空间的应用程序必须通过某种方式<strong>通知内核</strong>，让系统切换到内核态，由内核代表应用程序在内核空间执行系统调用。</p><h4 id="进入内核的机制">进入内核的机制</h4><p>这种通知内核的机制是一种<strong>软件中断</strong>：即触发一个异常，系统会切换到内核态并执行异常处理程序。在系统调用的场景下，这个异常处理程序就是<strong>系统调用处理器</strong>（systemcall handler）。</p><ul><li>在 x86 架构上，定义的软件中断号为 128，通过 <code>int $0x80</code>指令触发。这会导致系统切换到内核态，并执行异常向量128（即系统调用处理器）。</li><li>系统调用处理器的函数名通常为<code>system_call()</code>，它是与架构相关的代码（如 x86-64 下在<code>entry_64.S</code> 汇编文件中实现）。</li><li>近年来，x86 处理器增加了 <code>sysenter</code> 指令，这是一种比<code>int $0x80</code>更快、更专用的进入内核执行系统调用的方法。内核很快就支持了这种方式。</li><li>无论采用哪种方式，核心思想都是：用户空间通过异常或陷阱（trap）进入内核。</li></ul><h4 id="指定正确的系统调用">指定正确的系统调用</h4><p>仅仅进入内核空间还不够，因为有很多不同的系统调用，它们都是通过相同的方式进入内核的。因此，<strong>必须将系统调用号传递给内核</strong>。</p><ul><li><p>在 x86 架构上，系统调用号通过 <code>eax</code>32位寄存器传递。在触发陷阱进入内核前，用户空间会把所需系统调用的编号写入<code>eax</code>。</p></li><li><p>系统调用处理器读取 <code>eax</code> 的值，判断其有效性（与<code>NR_syscalls</code> 比较）。如果编号无效，返回 <code>-ENOSYS</code>错误；否则，通过系统调用表调用对应的系统调用函数： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call *sys_call_table(,%rax,8)</span><br></pre></td></tr></table></figure> &gt;rax和eax均为累加器，区别是rax是64位， eax32位</p><p>这里每个表项 8 字节（64 位），所以用 8 乘以系统调用号定位表项（x86-32下用 4 乘以系统调用号）。</p></li></ul><h4 id="参数传递">参数传递</h4><p>除了系统调用号，大多数系统调用还需要传递一个或多个参数。用户空间必须在陷阱捕获过程中时将参数传递给内核。</p><ul><li>最简单的方式是<strong>通过寄存器传递参数</strong>。在 x86-32架构下，<code>ebx</code>、<code>ecx</code>、<code>edx</code>、<code>esi</code>、<code>edi</code>依次存放前五个参数。</li><li>如果参数超过五个，则用一个寄存器传递指向用户空间参数数组的指针。</li><li>返回值也通过寄存器传递，x86 下写入 <code>eax</code>。</li></ul><p><strong>调用系统调用处理器并执行系统调用的流程</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-------------------+         +-------------------+</span><br><span class="line">|    User Space     |         |   Kernel Space    |</span><br><span class="line">|-------------------|         |-------------------|</span><br><span class="line">| Application       |         | Syscall Handler   |</span><br><span class="line">|   call read()     |         |   system_call()   |</span><br><span class="line">|-------------------|         |-------------------|</span><br><span class="line">| C library         |         | sys_read()        |</span><br><span class="line">| read() wrapper    |         |                   |</span><br><span class="line">+-------------------+         +-------------------+</span><br></pre></td></tr></table></figure></p><ul><li>应用程序调用 <code>read()</code>，实际上先调用 C 库的<code>read()</code> 封装函数。</li><li>C 库的 <code>read()</code> 封装函数通过软中断（如<code>int $0x80</code> 或 <code>sysenter</code>）进入内核，调用<code>system_call()</code>。</li><li><code>system_call()</code> 读取系统调用号和参数，查找并调用内核中的<code>sys_read()</code> 实现。</li><li>执行完毕后，返回值通过寄存器传回用户空间，流程反向返回到应用程序。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;与内核通信&quot;&gt;与内核通信&lt;/h2&gt;
&lt;p&gt;系统调用（system
call）在硬件和用户空间进程之间提供了一层抽象，这一层有三个主要作用：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;硬件抽象&lt;/strong&gt;&lt;br /&gt;
系统调用</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 系统编程常用设置2</title>
    <link href="https://mackz-maxw.github.io/2025/06/25/oper_sysn2/"/>
    <id>https://mackz-maxw.github.io/2025/06/25/oper_sysn2/</id>
    <published>2025-06-25T21:46:20.493Z</published>
    <updated>2025-06-25T23:49:32.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="可移植性问题portability-issues">可移植性问题（PortabilityIssues）</h2><h3 id="特性测试宏feature-test-macros">特性测试宏（Feature TestMacros）</h3><ul><li>系统调用和库函数 API 的行为受多种标准规范（如 The Open Group 的Single UNIX Specification、BSD、System V Release 4及其接口定义）约束。</li><li>为了让头文件只暴露符合某一标准的定义（如常量、函数原型等），可以在编译时定义一个或多个特性测试宏。定义方式有两种：<ol type="1"><li>在源代码中包含头文件前定义宏： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _BSD_SOURCE 1</span></span><br></pre></td></tr></table></figure></li><li>用编译器的 <code>-D</code> 选项定义： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cc -D_BSD_SOURCE prog.c</span><br></pre></td></tr></table></figure></li></ol></li><li>“特性测试宏”这个名字的由来是：实现会通过 <code>#if</code>判断这些宏的值，决定头文件中哪些特性对应用可见。</li></ul><h4 id="常用特性测试宏">常用特性测试宏</h4><p>这些宏由相关标准规定，适用于所有支持这些标准的系统：</p><ul><li><code>_POSIX_SOURCE</code><br />定义后暴露符合 POSIX.1-1990 和 ISO C (1990) 的定义。已被<code>_POSIX_C_SOURCE</code> 取代。</li><li><code>_POSIX_C_SOURCE</code><ul><li>值为 1 时，效果同 <code>_POSIX_SOURCE</code>。</li><li>值 ≥ 199309 时，暴露 POSIX.1b（实时）定义。</li><li>值 ≥ 199506 时，暴露 POSIX.1c（线程）定义。</li><li>值为 200112 时，暴露 POSIX.1-2001 基础规范（不含 XSI 扩展）。</li><li>值为 200809 时，暴露 POSIX.1-2008 基础规范。</li></ul></li><li><code>_XOPEN_SOURCE</code><ul><li>定义后暴露 POSIX.1、POSIX.2 和 X/Open (XPG4) 定义。</li><li>值 ≥ 500 时，暴露 SUSv2（UNIX 98 和 XPG5）扩展。</li><li>值 ≥ 600 时，暴露 SUSv3 XSI（UNIX 03）和 C99 扩展。</li><li>值 ≥ 700 时，暴露 SUSv4 XSI 扩展。</li></ul></li></ul><h4 id="glibc-特有的特性测试宏">glibc 特有的特性测试宏</h4><ul><li><code>_BSD_SOURCE</code><br />定义后暴露 BSD 定义，同时定义<code>_POSIX_C_SOURCE=199506</code>。如只定义此宏，部分标准冲突时优先BSD 定义。</li><li><code>_SVID_SOURCE</code><br />定义后暴露 System V 接口定义（SVID）。</li><li><code>_GNU_SOURCE</code><br />定义后暴露所有上述宏的定义及 GNU 扩展。</li></ul><h4 id="默认行为与宏组合">默认行为与宏组合</h4><ul><li>默认情况下，GNU C 编译器会定义<code>_POSIX_SOURCE</code>、<code>_POSIX_C_SOURCE=200809</code>（或更早版本的200112/199506）、<code>_BSD_SOURCE</code> 和<code>_SVID_SOURCE</code>。</li><li>如果单独定义了某些宏，或用标准模式（如 <code>cc -ansi</code> 或<code>cc -std=c99</code>）编译，则只暴露请求的定义。</li><li>多个宏可以叠加定义。例如： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cc -D_POSIX_SOURCE -D_POSIX_C_SOURCE=199506 -D_BSD_SOURCE -D_SVID_SOURCE prog.c</span><br></pre></td></tr></table></figure></li><li><code>&lt;features.h&gt;</code> 头文件和<code>feature_test_macros(7)</code> 手册页有详细说明。</li></ul><h4 id="posix.1sus-相关宏">POSIX.1/SUS 相关宏</h4><ul><li>POSIX.1-2001/SUSv3 只规定了 <code>_POSIX_C_SOURCE</code> 和<code>_XOPEN_SOURCE</code> 两个宏，要求值分别为 200112 和 600。</li><li>POSIX.1-2008/SUSv4 要求值分别为 200809 和 700。</li><li>设置 <code>_XOPEN_SOURCE=600</code> 应包含<code>_POSIX_C_SOURCE=200112</code> 的所有特性，SUSv4也有类似要求。</li></ul><h4id="示例代码与函数原型中的特性测试宏">示例代码与函数原型中的特性测试宏</h4><ul><li>手册页会说明使用某个常量或函数声明时需要定义哪些特性测试宏。</li><li>本书示例代码可用默认 GNU C 编译器选项或如下方式编译：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cc -std=c99 -D_XOPEN_SOURCE=600</span><br></pre></td></tr></table></figure></li><li>书中每个函数原型都会注明需要定义哪些特性测试宏。</li><li>手册页有更详细的宏需求说明。</li></ul><h3 id="系统数据类型system-data-types">系统数据类型（System DataTypes）</h3><p>在 UNIX系统中，许多实现相关的数据类型（如进程ID、用户ID、文件偏移量等）都用标准C 类型来表示。虽然可以直接用 int、long等基本类型声明这些变量，但这样会降低程序的可移植性，原因包括：</p><ul><li>不同 UNIX 实现中基本类型的大小可能不同（如 long在某些系统上是4字节，在另一些系统上是8字节），甚至同一系统的不同编译环境也可能不同。</li><li>不同实现可能用不同类型表示相同的信息。例如，进程ID在某些系统上是int，在另一些系统上是 long。</li><li>同一实现的不同版本也可能改变类型定义。例如，Linux 2.2及以前用户和组ID是16位，2.4及以后是32位。</li></ul><p>为避免这些移植性问题，SUSv3（Single UNIX Specification, Version3）规定了一系列标准系统数据类型，并要求实现时正确使用这些类型。这些类型通常用C 的 typedef 定义。例如，pid_t 用于表示进程ID，在 Linux/x86-32上定义为： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="type">pid_t</span>;</span><br></pre></td></tr></table></figure> 大多数标准系统数据类型以 <code>_t</code>结尾，通常声明在 <code>&lt;sys/types.h&gt;</code>头文件中，部分类型在其他头文件中定义。</p><p><strong>建议：</strong>应用程序应使用这些类型来声明变量，以保证在所有符合 SUSv3的系统上都能正确运行。例如： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pid_t</span> mypid;</span><br></pre></td></tr></table></figure></p><h4 id="常用系统数据类型举例">常用系统数据类型举例</h4><table><thead><tr><th>数据类型</th><th>类型要求</th><th>说明</th></tr></thead><tbody><tr><td>pid_t</td><td>有符号整数</td><td>进程ID、进程组ID、会话ID</td></tr><tr><td>uid_t</td><td>整数</td><td>用户ID</td></tr><tr><td>gid_t</td><td>整数</td><td>组ID</td></tr><tr><td>size_t</td><td>无符号整数</td><td>对象字节大小</td></tr><tr><td>ssize_t</td><td>有符号整数</td><td>字节计数或错误指示</td></tr><tr><td>off_t</td><td>有符号整数</td><td>文件偏移量或文件大小</td></tr><tr><td>time_t</td><td>整数或实数</td><td>自 Epoch 起的秒数</td></tr><tr><td>mode_t</td><td>整数</td><td>文件权限和类型</td></tr><tr><td>dev_t</td><td>算术类型</td><td>设备号（主次设备号）</td></tr><tr><td>ino_t</td><td>无符号整数</td><td>文件 i-node 号</td></tr><tr><td>socklen_t</td><td>至少32位整数</td><td>套接字地址结构体大小</td></tr></tbody></table><h3 id="打印系统数据类型的数值">打印系统数据类型的数值</h3><ul><li><p>在用 <code>printf()</code> 打印表3-1中这些数值型系统数据类型（如<code>pid_t</code>、<code>uid_t</code>）时，要避免实现相关的依赖问题。</p></li><li><p>由于 C 的参数提升规则，<code>short</code> 类型会被提升为<code>int</code>，但 <code>int</code> 和 <code>long</code>类型保持不变。因此，系统数据类型的底层实现不同，传递给<code>printf()</code> 的参数类型可能是 <code>int</code> 或<code>long</code>。</p></li><li><p>由于 <code>printf()</code>在运行时无法判断参数类型，调用者必须用合适的格式说明符（如<code>%d</code> 或<code>%ld</code>）明确指定类型。但直接写死某个说明符会导致实现依赖。</p></li><li><p>通常的解决办法是统一用 <code>%ld</code>，并将对应的值强制转换为<code>long</code>，例如： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pid_t</span> mypid;</span><br><span class="line">mypid = getpid();  <span class="comment">/* 获取当前进程ID */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;My PID is %ld\n&quot;</span>, (<span class="type">long</span>) mypid);</span><br></pre></td></tr></table></figure></p></li><li><p>有一个例外：<code>off_t</code> 类型在某些环境下是<code>long long</code>，因此应强制转换为 <code>long long</code> 并用<code>%lld</code> 打印（详见5.10节）。</p></li><li><p>C99 标准定义了 <code>z</code> 长度修饰符，用于<code>size_t</code> 或 <code>ssize_t</code> 类型，可以用<code>%zd</code> 替代 <code>%ld</code>+强转。但该说明符并非所有 UNIX实现都支持，所以本书避免使用。</p></li><li><p>C99 还定义了 <code>j</code> 长度修饰符，指定参数为<code>intmax_t</code>（或<code>uintmax_t</code>），这种类型足够大，可以表示任何整数类型。理论上，使用<code>(intmax_t)</code> 强转加 <code>%jd</code> 是最通用的做法，能处理<code>long long</code> 及扩展整数类型（如<code>int128_t</code>）。但由于并非所有 UNIX实现都支持，本书也避免使用这种方式。</p></li></ul><h3id="其他可移植性问题miscellaneous-portability-issues">其他可移植性问题（MiscellaneousPortability Issues）</h3><h4 id="结构体的初始化与使用">结构体的初始化与使用</h4><ul><li>各 UNIX实现规定了一系列标准结构体，用于系统调用和库函数。例如，<code>sembuf</code>结构体用于信号量操作（semop）： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> &#123;</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> sem_num;  <span class="comment">/* 信号量编号 */</span></span><br><span class="line">  <span class="type">short</span>          sem_op;   <span class="comment">/* 要执行的操作 */</span></span><br><span class="line">  <span class="type">short</span>          sem_flg;  <span class="comment">/* 操作标志 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>虽然 SUSv3 规定了这些结构体，但需要注意：<ul><li>一般来说，结构体成员的顺序未必有标准规定。</li><li>某些实现可能会在结构体中添加额外的字段。</li></ul></li><li>因此，<strong>不建议</strong>用如下方式初始化结构体（因为不同实现成员顺序可能不同）：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">s</span> =</span> &#123; <span class="number">3</span>, <span class="number">-1</span>, SEM_UNDO &#125;;</span><br></pre></td></tr></table></figure> 这种写法在 Linux下可用，但在其他实现中可能出错。<strong>可移植的做法</strong>是用显式赋值：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">s</span>;</span></span><br><span class="line">s.sem_num = <span class="number">3</span>;</span><br><span class="line">s.sem_op  = <span class="number">-1</span>;</span><br><span class="line">s.sem_flg = SEM_UNDO;</span><br></pre></td></tr></table></figure> 如果使用 C99，可以用新的结构体初始化语法：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">s</span> =</span> &#123; .sem_num = <span class="number">3</span>, .sem_op = <span class="number">-1</span>, .sem_flg = SEM_UNDO &#125;;</span><br></pre></td></tr></table></figure></li><li>如果要将结构体内容写入文件，也要注意成员顺序。不能直接二进制写入结构体，而应按指定顺序逐个字段写入（最好用文本形式）。</li></ul><h4 id="某些宏可能并非所有实现都支持">某些宏可能并非所有实现都支持</h4><ul><li>有些宏在所有 UNIX 实现中并不一定存在。例如，<code>WCOREDUMP()</code>宏（用于检测子进程是否产生 core dump 文件）虽然常见，但 SUSv3并未规定，因此某些系统可能没有。</li><li>可移植的做法是用 <code>#ifdef</code> 判断宏是否存在：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> WCOREDUMP</span></span><br><span class="line">  <span class="comment">/* 使用 WCOREDUMP() 宏 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></li></ul><h4 id="不同实现对头文件的要求不同">不同实现对头文件的要求不同</h4><ul><li>某些系统调用和库函数所需的头文件在不同 UNIX 实现中可能不同。本书以Linux 为主，并注明与 SUSv3 的差异。</li><li>书中部分函数原型会注明某个头文件后加注释<code>/* For portability */</code>，表示该头文件在 Linux 或 SUSv3下不是必需的，但为了兼容其他（尤其是老旧）实现，建议在可移植程序中包含。</li><li>POSIX.1-1990 要求在包含与某些函数相关的头文件前，先包含<code>&lt;sys/types.h&gt;</code>，但这一要求后来被 SUSv1移除。尽管如此，为了可移植性，建议将 <code>&lt;sys/types.h&gt;</code>作为首个头文件包含（本书示例为简洁起见省略了它）。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;可移植性问题portability-issues&quot;&gt;可移植性问题（Portability
Issues）&lt;/h2&gt;
&lt;h3 id=&quot;特性测试宏feature-test-macros&quot;&gt;特性测试宏（Feature Test
Macros）&lt;/h3&gt;
&lt;ul&gt;</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 系统编程常用设置</title>
    <link href="https://mackz-maxw.github.io/2025/06/25/oper_sysn/"/>
    <id>https://mackz-maxw.github.io/2025/06/25/oper_sysn/</id>
    <published>2025-06-25T21:27:30.964Z</published>
    <updated>2025-06-25T21:42:04.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lpi示例程序说明">LPI示例程序说明</h2><h3 id="命令行选项与参数">命令行选项与参数</h3><ul><li>本书中的许多示例程序依赖命令行选项和参数来决定其行为。</li><li>传统 UNIX命令行选项格式为：一个连字符（-）加一个字母，后面可跟参数。GNU工具支持扩展格式：两个连字符（--）加选项名和可选参数。</li><li>示例程序通常使用标准库函数 <code>getopt()</code>解析命令行选项（详见附录B）。</li><li>只要程序的命令行语法不简单，都会实现一个帮助功能：如果用<code>--help</code>选项运行，程序会显示用法说明，指明命令行选项和参数的语法。</li></ul><h3 id="公共函数与头文件">公共函数与头文件</h3><ul><li>大多数示例程序都包含一个公共头文件，定义常用类型和宏，并引用常用的库函数和系统调用声明，使代码更简洁。</li></ul><h4 id="公共头文件libtlpi_hdr.h">公共头文件（lib/tlpi_hdr.h）</h4><ul><li><p>该头文件包含了许多常用头文件，定义了布尔类型和求最小/最大值的宏。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> TLPI_HDR_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TLPI_HDR_H  <span class="comment">/* 防止重复包含 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>  <span class="comment">/* 常用类型定义 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>      <span class="comment">/* 标准I/O函数 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;get_num.h&quot;</span>    <span class="comment">/* 常用数值处理函数声明 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;error_functions.h&quot;</span>  <span class="comment">/* 错误处理函数声明 */</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span> FALSE, TRUE &#125; Boolean;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(m,n) ((m) &lt; (n) ? (m) : (n))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(m,n) ((m) &gt; (n) ? (m) : (n))</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></li></ul><h4id="错误诊断函数liberror_functions.h">错误诊断函数（lib/error_functions.h）</h4><ul><li><p>为简化错误处理，示例程序使用一组通用的错误诊断函数，其声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ERROR_FUNCTIONS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_FUNCTIONS_H</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">errMsg</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __GNUC__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NORETURN __attribute__ ((__noreturn__))</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NORETURN</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">errExit</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span> NORETURN ;</span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span> NORETURN ;</span><br><span class="line"><span class="type">void</span> <span class="title function_">errExitEN</span><span class="params">(<span class="type">int</span> errnum, <span class="type">const</span> <span class="type">char</span> *format, ...)</span> NORETURN ;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fatal</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span> NORETURN ;</span><br><span class="line"><span class="type">void</span> <span class="title function_">usageErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span> NORETURN ;</span><br><span class="line"><span class="type">void</span> <span class="title function_">cmdLineErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span> NORETURN ;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></li></ul><h4id="使用-errmsgerrexiterr_exit-和-errexiten-诊断系统调用和库函数错误">使用errMsg()、errExit()、err_exit() 和 errExitEN()诊断系统调用和库函数错误</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tlpi_hdr.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">errMsg</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">errExit</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">err_exit</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">errExitEN</span><span class="params">(<span class="type">int</span> errnum, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>errMsg()</strong><br />在标准错误输出错误信息。参数列表与 printf()相同，输出末尾自动加换行。会输出当前 errno 对应的错误文本（如错误名EPERM 和 strerror() 返回的描述），再加上格式化输出内容。</p></li><li><p><strong>errExit()</strong><br />功能类似 errMsg()，但会终止程序。终止方式为调用 exit()，如果环境变量EF_DUMPCORE 被设置为非空字符串，则调用 abort() 生成 core dump文件（用于调试）。</p></li><li><p><strong>err_exit()</strong><br />与 errExit() 类似，但有两点不同：</p><ol type="1"><li>打印错误信息前不会刷新标准输出。</li><li>通过 _exit() 终止进程，而不是 exit()，这样不会刷新 stdio缓冲区，也不会调用 exit 处理函数。这种方式适合在库函数中创建子进程后，因错误需要立即终止子进程时使用，避免影响父进程的缓冲区和退出处理。</li></ol></li><li><p><strong>errExitEN()</strong><br />与 errExit() 类似，但输出的是参数 errnum 指定的错误号对应的错误文本（EN代表 Error Number），而不是当前 errno 的内容。主要用于 POSIX 线程API（pthread）相关的程序。</p><ul><li>传统 UNIX 系统调用出错返回 –1，POSIX线程函数出错则直接返回错误号（正整数），成功返回 0。</li><li>示例： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> s;</span><br><span class="line">s = pthread_create(&amp;thread, <span class="literal">NULL</span>, func, &amp;arg);</span><br><span class="line"><span class="keyword">if</span> (s != <span class="number">0</span>)</span><br><span class="line">  errExitEN(s, <span class="string">&quot;pthread_create&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>这样比直接用 errno 更高效，因为在多线程程序中 errno是一个宏，会展开为函数调用，返回线程私有的存储区域指针。</li></ul></li><li><p><strong>lvalue（左值） 说明</strong><br />lvalue 是指向存储区域的表达式，最常见的是变量名。某些操作符也能产生lvalue，比如指针解引用 *p。在 POSIX 线程 API 下，errno被重定义为返回线程私有存储区指针的函数。</p></li></ul><h4 id="诊断其他类型错误的函数">诊断其他类型错误的函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tlpi_hdr.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fatal</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">usageErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">cmdLineErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>fatal()</strong><br />用于诊断一般性错误，包括那些不会设置 errno 的库函数错误。参数列表与printf() 相同，输出自动换行。该函数会将格式化信息输出到标准错误，并像errExit() 一样终止程序。</p></li><li><p><strong>usageErr()</strong><br />用于诊断命令行参数用法错误。参数同 printf()，输出以 "Usage:"开头，后跟格式化内容，输出到标准错误，然后调用 exit()终止程序。（有些示例程序会用扩展版 usageError()。）</p></li><li><p><strong>cmdLineErr()</strong><br />类似于 usageErr()，但用于诊断命令行参数本身的错误。输出以 "Command-lineusage error:" 开头，后跟格式化内容，输出到标准错误并终止程序。</p></li></ul><h4 id="错误处理函数实现说明">错误处理函数实现说明</h4><ul><li>错误处理函数的实现会用到 <code>ename.c.inc</code>文件，该文件定义了一个字符串数组 <code>ename</code>，用于将 errno错误号映射为符号名（如 EPERM、EAGAIN/EWOULDBLOCK 等）。</li><li>这样做的好处是：strerror()只返回错误描述，不包含符号名，而手册页用符号名描述错误。输出符号名便于查阅手册定位错误原因。</li><li><code>ename.c.inc</code> 文件内容与硬件架构相关，不同平台 errno值可能不同。可以用书中提供的脚本（lib/Build_ename.sh）为特定平台生成合适的版本。</li><li><code>ename</code>数组中有些字符串为空，对应未使用的错误号；有些字符串包含两个错误名（如"EAGAIN/EWOULDBLOCK"），表示这两个符号对应同一个错误号。</li><li>例如，EAGAIN 和 EWOULDBLOCK 在大多数 UNIX 系统上值相同，分别用于System V 和 BSD 的不同场景。SUSv3规范允许非阻塞调用返回这两个错误之一。</li></ul><h4 id="解析数字型命令行参数的函数">解析数字型命令行参数的函数</h4><ul><li>头文件（如清单3-5）声明了两个常用来解析整型命令行参数的函数：<code>getInt()</code>和 <code>getLong()</code>。</li><li>与 <code>atoi()</code>、<code>atol()</code>、<code>strtol()</code>等标准函数相比，这两个函数的主要优点是能对数字参数进行基本有效性检查。</li><li><code>getInt()</code> 和 <code>getLong()</code> 分别将参数<code>arg</code> 指向的字符串转换为 int 或 long 类型。如果<code>arg</code> 不是有效的整数字符串（即只包含数字和 +、-号），函数会输出错误信息并终止程序。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tlpi_hdr.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getInt</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *arg, <span class="type">int</span> flags, <span class="type">const</span> <span class="type">char</span> *name)</span>;</span><br><span class="line"><span class="type">long</span> <span class="title function_">getLong</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *arg, <span class="type">int</span> flags, <span class="type">const</span> <span class="type">char</span> *name)</span>;</span><br><span class="line"><span class="comment">// 返回 arg 转换后的数值</span></span><br></pre></td></tr></table></figure><ul><li><p>如果 <code>name</code> 参数非 NULL，应传入一个字符串，用于标识arg 参数。该字符串会包含在错误信息中，便于定位问题。</p></li><li><p><code>flags</code> 参数用于控制 <code>getInt()</code> 和<code>getLong()</code>的行为。默认情况下，这两个函数期望参数为有符号十进制整数。通过将一个或多个GN_* 常量（见清单3-5）按位或（|）赋给flags，可以选择不同的进制或限制数值范围（如只允许非负数或大于0）。</p></li><li><p>这两个函数的实现见清单3-6。</p></li><li><p>虽然 flags参数可以强制范围检查，但在某些示例程序中我们并未启用这些检查。例如，在清单47-1中，未检查信号量初始值参数，用户可以输入负数，导致后续semctl()系统调用出错（ERANGE），因为信号量不能为负。省略范围检查有助于实验系统调用和库函数的正确与错误用法，便于学习。实际应用中通常会对命令行参数做更严格的检查。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;lpi示例程序说明&quot;&gt;LPI示例程序说明&lt;/h2&gt;
&lt;h3 id=&quot;命令行选项与参数&quot;&gt;命令行选项与参数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本书中的许多示例程序依赖命令行选项和参数来决定其行为。&lt;/li&gt;
&lt;li&gt;传统 UNIX
命令行选项格式为：一个连字符（</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 3 系统编程概述</title>
    <link href="https://mackz-maxw.github.io/2025/06/25/oper_sys9/"/>
    <id>https://mackz-maxw.github.io/2025/06/25/oper_sys9/</id>
    <published>2025-06-25T20:29:07.791Z</published>
    <updated>2025-06-25T21:15:17.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统调用system-calls">系统调用（System Calls）</h2><ul><li><strong>系统调用</strong>是进程进入内核、请求内核代表其执行某些操作的受控入口。内核通过系统调用API 向程序提供各种服务，如创建新进程、执行 I/O、创建管道等。（可参考<code>syscalls(2)</code> 手册页查看 Linux 系统调用列表。）</li><li>系统调用的几个基本特点：<ul><li>系统调用会将处理器状态从用户态切换到内核态，使 CPU能访问受保护的内核内存。</li><li>系统调用集合是固定的，每个系统调用有唯一编号（程序通常通过名称而非编号调用）。</li><li>每个系统调用可以有参数，用于在用户空间和内核空间之间传递信息。</li></ul></li></ul><h3 id="系统调用的执行流程以-x86-32-为例">系统调用的执行流程（以 x86-32为例）</h3><ol type="1"><li>应用程序通过 C 库中的封装函数（wrapper function）发起系统调用。</li><li>封装函数将参数从栈传递到特定寄存器，以便内核处理。</li><li>封装函数将系统调用编号写入特定寄存器（如 <code>%eax</code>）。</li><li>封装函数执行 trap 指令（如<code>int 0x80</code>），使处理器从用户态切换到内核态，执行内核 trap向量表中对应位置的代码。新架构用 <code>sysenter</code>指令，速度更快。</li><li>内核的 <code>system_call()</code> 例程被调用，主要步骤：<ul><li>保存寄存器到内核栈</li><li>检查系统调用编号有效性</li><li>根据编号查找并调用对应的系统调用服务例程（如<code>sys_execve()</code>），并检查参数有效性，执行所需操作（如I/O、内存操作等），返回结果状态</li><li>恢复寄存器，并将返回值放到栈上</li><li>返回到封装函数，同时切换回用户态</li></ul></li><li>如果系统调用返回值表示错误，封装函数会设置全局变量<code>errno</code>，并返回 -1 表示失败；成功时返回非负值。</li></ol><ul><li>Linux 系统调用服务例程约定：返回非负值表示成功，负值（为 errno常量的相反数）表示错误。C 库封装函数会将负值转为正数赋给<code>errno</code>，并返回 -1。</li><li>这种约定假设系统调用不会在成功时返回负值，但极少数例外（如<code>fcntl()</code> 的 <code>F_GETOWN</code> 操作）。</li><li>例如，<code>execve()</code> 系统调用在 <code>sys_call_table</code>的第 11 项，指向 <code>sys_execve()</code> 服务例程。</li><li>系统调用的实现虽然对程序员透明，但实际上涉及许多底层操作，因此系统调用有一定的性能开销。例如，<code>getppid()</code>1,000 万次调用约需 2.2 秒，而等价的 C 函数只需 0.11 秒。</li><li>在本书中，“调用系统调用 xyz()”通常指调用对应的 C 库封装函数。</li><li>可用 <code>strace</code>命令跟踪程序的系统调用，便于调试和分析。</li></ul><h2 id="库函数library-functions">库函数（Library Functions）</h2><ul><li>库函数是标准 C 库（如glibc）中包含的大量函数之一。它们的功能非常多样，比如打开文件、时间格式转换、字符串比较等。</li><li>许多库函数并不涉及系统调用（如字符串处理函数），而有些库函数则是对系统调用的封装。例如，<code>fopen()</code>库函数内部会调用 <code>open()</code> 系统调用来打开文件。</li><li>库函数通常比底层系统调用更易用。例如，<code>printf()</code>提供了格式化输出和缓冲功能，而 <code>write()</code>只负责输出字节块。<code>malloc()</code> 和 <code>free()</code>也比底层的 <code>brk()</code> 系统调用更方便。</li></ul><h3 id="标准-c-库与-gnu-c-库glibc">标准 C 库与 GNU C 库（glibc）</h3><ul><li>不同 UNIX 实现有不同的标准 C 库实现。Linux 上最常用的是 GNU C库（glibc）。</li></ul><h3 id="查看系统上的-glibc-版本">查看系统上的 glibc 版本</h3><ul><li><p>可以直接运行 glibc 的共享库文件来查看版本信息，例如：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /lib/libc.so.6</span><br></pre></td></tr></table></figure> 输出内容会包含 glibc 的版本号等信息。</p></li><li><p>在某些发行版中，glibc 可能不在<code>/lib/libc.so.6</code>，可以用 <code>ldd</code>命令查看某个程序依赖的 glibc 路径： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ldd myprog | grep libc</span><br><span class="line">libc.so.6 =&gt; /lib/tls/libc.so.6 (0x4004b000)</span><br></pre></td></tr></table></figure></p></li><li><p>程序可以通过两种方式获取 glibc 版本：</p><ol type="1"><li><strong>编译时检测常量</strong>：glibc 2.0 及以后定义了<code>__GLIBC__</code> 和 <code>__GLIBC_MINOR__</code> 两个常量，可用于<code>#ifdef</code> 判断。</li><li><strong>运行时调用函数</strong>：可用<code>gnu_get_libc_version()</code> 获取运行时 glibc 版本号。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gnu/libc-version.h&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">gnu_get_libc_version</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure> 该函数返回如 "2.12" 的版本号字符串。</li></ol></li><li><p>还可以用 <code>confstr()</code> 函数获取<code>_CS_GNU_LIBC_VERSION</code> 配置变量，返回如 "glibc 2.12"的字符串。</p></li></ul><h2 id="处理系统调用和库函数的错误">处理系统调用和库函数的错误</h2><ul><li>几乎所有系统调用和库函数都会返回一个状态值，指示调用是否成功。<strong>必须始终检查这个返回值</strong>，如果失败，应采取适当措施（至少要输出错误信息）。</li><li>虽然省略这些检查看似省事，但实际上会导致难以排查的bug，浪费大量调试时间。</li></ul><h3 id="系统调用错误处理">系统调用错误处理</h3><ul><li>每个系统调用的手册页会说明其返回值，通常返回 –1 表示出错。例如：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fd = open(pathname, flags, mode);</span><br><span class="line"><span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="comment">/* 错误处理代码 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (close(fd) == <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="comment">/* 错误处理代码 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>系统调用失败时，会将全局变量 <code>errno</code>设为正值，表示具体错误类型。需要包含 <code>&lt;errno.h&gt;</code>头文件。</li><li><code>errno</code> 的符号常量都以 <code>E</code> 开头，手册页的ERRORS 部分会列出可能的 errno 值。</li><li>示例： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cnt = read(fd, buf, numbytes);</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (errno == EINTR)</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;read was interrupted by a signal\n&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* 其他错误 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>成功的系统调用不会将 <code>errno</code> 设为 0，因此不能用<code>errno == 0</code> 判断是否成功。应先检查返回值，再看 errno。</li><li>少数系统调用（如 <code>getpriority()</code>）在成功时也可能返回–1。此时应在调用前将 <code>errno</code> 设为 0，调用后判断：如果返回 –1且 errno 不为 0，则为错误。</li></ul><h3 id="错误信息输出">错误信息输出</h3><ul><li>常用 <code>perror()</code> 和 <code>strerror()</code> 输出错误信息。<ul><li><code>perror()</code>：输出自定义信息和 errno 对应的错误描述。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">perror</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *msg)</span>;</span><br></pre></td></tr></table></figure> 用法示例： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fd = open(pathname, flags, mode);</span><br><span class="line"><span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;</span><br><span class="line">  perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>strerror()</code>：返回 errno 对应的错误字符串。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strerror</span><span class="params">(<span class="type">int</span> errnum)</span>;</span><br></pre></td></tr></table></figure>注意返回的字符串可能被后续调用覆盖。</li></ul></li><li>如果错误号未知，<code>strerror()</code> 返回 "Unknown error nnn" 或NULL。</li><li>这两个函数支持本地化，错误信息会用本地语言显示。</li></ul><h3 id="库函数错误处理">库函数错误处理</h3><ul><li>不同库函数返回不同类型和数值表示失败（需查阅手册页）。</li><li>常见几类：<ol type="1"><li><strong>与系统调用一致</strong>：返回 –1，errno 指示错误（如<code>remove()</code>）。</li><li><strong>返回其他错误值</strong>：如 <code>fopen()</code> 出错返回NULL，errno 反映具体错误。</li><li><strong>不使用 errno</strong>：某些库函数不用errno，具体错误判断方式见手册页。此时不应用 errno、perror() 或strerror()。</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;系统调用system-calls&quot;&gt;系统调用（System Calls）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统调用&lt;/strong&gt;是进程进入内核、请求内核代表其执行某些操作的受控入口。内核通过系统调用
API 向程序提供各种服务，如创建新进程、</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 2.6 linux组成概述4</title>
    <link href="https://mackz-maxw.github.io/2025/06/25/oper_sys8/"/>
    <id>https://mackz-maxw.github.io/2025/06/25/oper_sys8/</id>
    <published>2025-06-25T16:29:01.299Z</published>
    <updated>2025-06-25T20:28:28.204Z</updated>
    
    <content type="html"><![CDATA[<h3 id="伪终端pseudoterminals">伪终端（Pseudoterminals）</h3><ul><li>伪终端是一对虚拟设备，称为 master（主）和 slave（从）。</li><li>这对设备提供了一个双向通信的 IPC 通道，可以在两端传递数据。</li><li>伪终端的关键在于：slave设备的接口行为和真实终端一样，这样可以让面向终端的程序连接到 slave端，而另一个程序通过 master 端驱动它。</li><li>驱动程序写入 master的输出会经过终端驱动的常规输入处理（如回车转为换行），然后作为输入传递给连接在slave 的终端程序。终端程序写入 slave的内容也会经过输出处理后传递给驱动程序。</li><li>换句话说，驱动程序扮演了传统终端用户的角色。</li><li>伪终端广泛用于 X Window 系统下的终端窗口、telnet、ssh等网络登录服务的实现。</li></ul><h3 id="日期与时间date-and-time">日期与时间（Date and Time）</h3><ul><li>进程关心两类时间：<ol type="1"><li><strong>实时时间（realtime）</strong>：以某个标准点（如日历时间）或进程生命周期的某个固定点（如启动时刻）为基准。UNIX系统的日历时间以自 1970 年 1 月 1 日 0点（UTC）以来的秒数计，这一时刻称为 Epoch。</li><li><strong>进程时间（process time/CPUtime）</strong>：进程自启动以来所用的 CPU 时间，包括：<ul><li><strong>系统 CPU时间</strong>：在内核态执行（如系统调用）所用时间</li><li><strong>用户 CPU 时间</strong>：在用户态执行普通代码所用时间</li></ul></li></ol></li><li><code>time</code> 命令可以显示进程的实时时间、系统 CPU 时间和用户CPU 时间。</li></ul><h3id="客户端-服务器架构client-server-architecture">客户端-服务器架构（Client-ServerArchitecture）</h3><ul><li>客户端-服务器应用由两部分组成：<ul><li><strong>客户端（client）</strong>：向服务器发送请求消息，请求服务</li><li><strong>服务器（server）</strong>：接收请求，执行操作，并返回响应消息</li></ul></li><li>客户端和服务器之间可能有多轮请求-响应的对话。</li><li>通常，客户端与用户交互，服务器则提供对某些共享资源的访问。常见情况是多个客户端进程与一个或少数几个服务器进程通信。</li><li>客户端和服务器可以在同一台主机，也可以在通过网络连接的不同主机上。它们之间通过IPC 机制进行通信。</li><li>将服务封装在单一服务器中的好处包括：<ul><li><strong>效率</strong>：集中管理资源（如打印机）比每台机器都配备资源更经济。</li><li><strong>控制、协调与安全</strong>：集中资源便于统一管理、协调访问和安全控制（如防止多个客户端同时修改同一数据）。</li><li><strong>异构环境兼容</strong>：在网络中，客户端和服务器可以运行在不同硬件和操作系统平台上。</li></ul></li></ul><h3 id="实时realtime">实时（Realtime）</h3><ul><li><strong>实时应用</strong>（realtimeapplications）是指需要对输入做出及时响应的应用。通常，这类输入来自外部传感器或专用输入设备，输出则用于控制外部硬件。</li><li>典型例子包括：自动化装配线、银行ATM、飞机导航系统等。</li><li>许多实时应用要求快速响应，但其本质特征是：<strong>系统必须保证在触发事件后的一定时间内完成响应</strong>（有严格的截止时间）。</li><li>实现高实时性（尤其是极短响应时间）需要操作系统的支持。大多数操作系统并不原生支持实时性，因为实时需求与多用户分时系统的需求可能冲突。传统UNIX 不是实时操作系统，但有实时变种。Linux也有实时版本，且新内核正逐步支持原生实时应用。</li><li>POSIX.1b标准为实时应用定义了一系列扩展，包括：异步I/O、共享内存、内存映射文件、内存锁定、实时时钟和定时器、可选调度策略、实时信号、消息队列和信号量等。虽然大多数UNIX实现并非严格意义上的实时系统，但现在普遍支持这些扩展中的部分或全部。</li><li>“realtime”指日历时间或经过时间，“realtime”专指具备上述响应能力的操作系统或应用。</li></ul><h3 id="proc-文件系统">/proc 文件系统</h3><ul><li>和其他一些 UNIX 实现类似，Linux 提供了 <code>/proc</code>文件系统，它是一组挂载在 <code>/proc</code> 目录下的目录和文件。</li><li><code>/proc</code>是<strong>虚拟文件系统</strong>，它以文件和目录的形式向用户提供内核数据结构的接口，便于查看和修改各种系统属性。</li><li><code>/proc</code> 下有一组以 <code>/proc/PID</code>命名的目录（PID为进程ID），用于查看系统中每个进程的信息。</li><li><code>/proc</code> 文件内容通常为人类可读的文本，可被 shell脚本解析。程序可以直接打开、读取或写入这些文件。大多数情况下，只有特权进程才能修改<code>/proc</code> 下的文件内容。</li><li>本书在介绍 Linux 编程接口时，也会介绍相关的 <code>/proc</code>文件。更多信息见第12.1节。需要注意，<code>/proc</code>文件系统不是标准规定的，具体细节是 Linux 特有的。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;伪终端pseudoterminals&quot;&gt;伪终端（Pseudoterminals）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;伪终端是一对虚拟设备，称为 master（主）和 slave（从）。&lt;/li&gt;
&lt;li&gt;这对设备提供了一个双向通信的 IPC 通道，可以在两端传递数</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 2.6 linux组成概述3</title>
    <link href="https://mackz-maxw.github.io/2025/06/23/oper_sys7/"/>
    <id>https://mackz-maxw.github.io/2025/06/23/oper_sys7/</id>
    <published>2025-06-23T21:26:38.353Z</published>
    <updated>2025-06-24T17:47:52.767Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内存映射memory-mappings">内存映射（Memory Mappings）</h3><ul><li><code>mmap()</code>系统调用可以在进程的虚拟地址空间中创建新的内存映射。</li><li>映射分为两类：<ol type="1"><li><strong>文件映射（filemapping）</strong>：将文件的一部分映射到进程的虚拟内存，映射后可以像操作内存一样访问文件内容，所需页面会自动从文件加载。</li><li><strong>匿名映射（anonymousmapping）</strong>：不对应任何文件，映射区域的内容初始化为0。</li></ol></li><li>不同进程之间可以共享同一内存映射（如两个进程映射同一文件区域，或子进程继承父进程的映射）。</li><li>如果映射是<strong>私有的（private）</strong>，对映射内容的修改不会影响其他进程，也不会写回文件；如果是<strong>共享的（shared）</strong>，修改会被其他进程看到，并同步到文件。</li><li>内存映射的用途包括：初始化进程代码段、分配新内存、文件I/O（内存映射I/O）、进程间通信（共享映射）等。</li></ul><h3id="静态库与共享库static-and-shared-libraries">静态库与共享库（Staticand Shared Libraries）</h3><h4 id="静态库static-libraries">静态库（Static libraries）</h4><ul><li>静态库（archive）是包含一组已编译函数的文件，便于程序开发和维护。</li><li>使用静态库时，链接器会将需要的目标模块从库中复制到最终的可执行文件中，称为<strong>静态链接</strong>。</li><li>典型例子：<code>/usr/lib/libm.a</code>（数学库的静态库，扩展名为<code>.a</code>）</li><li>缺点：<ul><li>每个可执行文件都包含一份库函数代码，浪费磁盘空间。</li><li>多个程序同时运行时，每个都需加载自己的库函数副本，浪费内存。</li><li>如果库函数更新，所有用到该函数的程序都必须重新链接。</li></ul></li></ul><h4 id="共享库shared-libraries">共享库（Shared libraries）</h4><ul><li>共享库为了解决静态库的问题而设计。</li><li>程序链接共享库时，链接器只在可执行文件中记录需要的共享库，运行时由<strong>动态链接器</strong>加载和链接共享库。</li><li>典型例子：<code>/lib/x86_64-linux-gnu/libm.so.6</code>（数学库的共享库，扩展名为<code>.so</code>），<code>/lib/x86_64-linux-gnu/libc.so.6</code>（C标准库的共享库）</li><li>优点：<ul><li>只需在内存中保留一份共享库代码，所有程序共享，节省内存和磁盘空间。</li><li>更新共享库后，所有程序下次运行时自动使用新版本，无需重新链接。</li></ul></li></ul><h3id="进程间通信与同步interprocess-communication-and-synchronization">进程间通信与同步（InterprocessCommunication and Synchronization）</h3><p>在运行中的 Linux系统中，存在大量进程，其中许多进程彼此独立运行。但有些进程需要协作完成任务，这就需要进程间通信（IPC）和同步机制。</p><ul><li><p>最简单的通信方式是通过读写磁盘文件，但这种方式通常太慢且不灵活。</p></li><li><p>因此，Linux（和所有现代 UNIX系统）提供了丰富的进程间通信机制，包括：</p><ul><li><strong>信号（signals）</strong>：用于通知进程某个事件发生。</li><li><strong>管道（pipes）和命名管道（FIFOs）</strong>：用于在进程间传递数据（如shell 中的 <code>|</code> 操作符）。</li><li><strong>套接字（sockets）</strong>：可用于同一主机或不同主机间的进程数据传输。</li><li><strong>文件锁（filelocking）</strong>：允许进程锁定文件的某些区域，防止其他进程读取或修改内容。</li><li><strong>消息队列（messagequeues）</strong>：用于在进程间交换消息（数据包）。</li><li><strong>信号量（semaphores）</strong>：用于进程间的同步操作。</li><li><strong>共享内存（sharedmemory）</strong>：允许多个进程共享一块内存区域，任何进程对其内容的更改都能被其他进程立即看到。</li></ul></li></ul><h3 id="信号signals">信号（Signals）</h3><ul><li>信号常被称为“软件中断”。信号的到来通知进程某个事件或异常情况发生。</li><li>信号有多种类型，每种类型代表不同的事件或条件。每种信号类型由一个整数标识，并有类似<code>SIGxxxx</code> 的符号名。</li><li>信号可以由内核、其他进程（有权限时）或进程自身发送。例如，内核会在以下情况下向进程发送信号：<ul><li>用户在键盘上输入中断字符（通常是 Ctrl+C）</li><li>进程的某个子进程终止</li><li>进程设置的定时器（闹钟）到期</li><li>进程试图访问无效内存地址</li></ul></li><li>在 shell 中，可以用 <code>kill</code>命令向进程发送信号；在程序中可以用 <code>kill()</code>系统调用实现同样的功能。</li></ul><p>当进程收到信号时，会根据信号类型采取以下动作之一： - 忽略信号 -被信号杀死 - 被挂起，直到收到特定信号后恢复</p><p>对于大多数信号类型，程序可以选择忽略信号（如果默认动作不是忽略），或者设置信号处理函数（signalhandler）。信号处理函数是程序员自定义的函数，在信号送达进程时自动调用，用于处理相应的事件。</p><p>信号从产生到送达进程之间的这段时间，称为信号“挂起”（pending）。通常，挂起信号会在进程下次被调度运行时立即送达，如果进程正在运行则立即送达。但也可以通过将信号加入进程的信号屏蔽字（signalmask）来阻塞信号。如果信号在被阻塞时产生，它会一直处于挂起状态，直到被解除阻塞（即从信号屏蔽字中移除）后才送达。</p><h3 id="线程threads">线程（Threads）</h3><ul><li>在现代 UNIX 实现中，每个进程可以拥有多个执行线程。</li><li>可以将线程理解为一组共享同一虚拟内存（以及其他属性）的“轻量级进程”。每个线程执行相同的程序代码，并共享数据区和堆区，但每个线程有自己的栈（用于存放局部变量和函数调用信息）。</li><li>线程之间可以通过共享的全局变量进行通信。线程库还提供了条件变量（conditionvariables）和互斥锁（mutexes）等原语，用于线程间的通信和同步，特别是对共享变量的访问控制。</li><li>线程也可以使用前面介绍的进程间通信（IPC）和同步机制进行通信。</li><li>使用线程的主要优点：<ul><li>线程间共享数据（通过全局变量）非常方便。</li><li>某些算法用多线程实现比多进程实现更自然。</li><li>多线程应用可以充分利用多处理器硬件，实现并行处理。</li></ul></li></ul><h3id="进程组与-shell-作业控制process-groups-and-shell-job-control">进程组与Shell 作业控制（Process Groups and Shell Job Control）</h3><ul><li>shell启动的每个程序都会在新进程中运行。例如，下面的管道命令会创建三个进程：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -l | <span class="built_in">sort</span> -k5n | less</span><br></pre></td></tr></table></figure></li><li>除 Bourne shell 外，所有主流 shell都支持“作业控制”功能，允许用户同时执行和管理多个命令或管道。</li><li>在支持作业控制的 shell中，管道中的所有进程会被放入一个新的进程组（job）中。对于单条命令，也会创建只包含一个进程的进程组。</li><li>每个进程组中的进程都有相同的进程组标识符（process group ID），该 ID通常等于组内某个进程（称为进程组领导者）的进程 ID。</li><li>内核支持对进程组的操作（如发送信号），shell利用这一特性实现对整个管道作业的挂起、恢复等控制。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;内存映射memory-mappings&quot;&gt;内存映射（Memory Mappings）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mmap()&lt;/code&gt;
系统调用可以在进程的虚拟地址空间中创建新的内存映射。&lt;/li&gt;
&lt;li&gt;映射分为两类：
&lt;ol ty</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 2.6 linux组成概述2</title>
    <link href="https://mackz-maxw.github.io/2025/06/23/oper_sys6/"/>
    <id>https://mackz-maxw.github.io/2025/06/23/oper_sys6/</id>
    <published>2025-06-23T21:07:51.084Z</published>
    <updated>2025-06-23T21:24:46.164Z</updated>
    
    <content type="html"><![CDATA[<h3 id="程序programs">程序（Programs）</h3><ul><li>程序通常有两种形式：<ol type="1"><li><strong>源代码</strong>：人类可读的文本，使用如 C这样的编程语言编写。<br /></li><li><strong>二进制机器码</strong>：计算机可执行的指令。源代码需经过编译和链接，才能变为机器码。<br /></li></ol></li><li>脚本（script）是包含命令的文本文件，由 shell或其他命令解释器直接处理。</li><li>“程序”这两个含义通常可以互换，因为编译和链接会将源代码转换为等价的二进制代码。</li></ul><h4 id="过滤器filters">过滤器（Filters）</h4><ul><li>过滤器是指一类程序：从标准输入（stdin）读取数据，处理后将结果写到标准输出（stdout）。</li><li>常见过滤器有：<code>cat</code>、<code>grep</code>、<code>tr</code>、<code>sort</code>、<code>wc</code>、<code>sed</code>、<code>awk</code>等。</li></ul><h4 id="命令行参数command-line-arguments">命令行参数（Command-linearguments）</h4><ul><li>在 C 语言中，程序可以通过 main 函数的参数访问命令行参数：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br></pre></td></tr></table></figure><ul><li><code>argc</code>：参数个数</li><li><code>argv</code>：参数字符串数组，<code>argv[0]</code>通常是程序名</li></ul></li></ul><h3 id="进程processes">进程（Processes）</h3><ul><li>进程是正在运行的程序实例。</li><li>当程序被执行时，内核会将其代码加载到虚拟内存，分配变量空间，并建立记录进程信息的数据结构（如进程ID、终止状态、用户ID、组ID等）。</li><li>内核负责在进程间分配和管理有限资源（如内存、CPU、网络带宽等），进程结束时，资源会被回收。</li></ul><h4 id="进程内存布局">进程内存布局</h4><p>进程的内存逻辑上分为以下几个部分（段）： -<strong>Text</strong>：程序指令（代码段） -<strong>Data</strong>：静态变量 -<strong>Heap</strong>：动态分配内存区域 -<strong>Stack</strong>：函数调用和局部变量的栈空间</p><h4 id="进程创建与程序执行">进程创建与程序执行</h4><ul><li>进程可通过 <code>fork()</code> 系统调用创建新进程。调用<code>fork()</code> 的为父进程，新创建的为子进程。</li><li>子进程会复制父进程的数据、堆和栈（代码段通常只读并共享）。</li><li>子进程可以继续执行父进程的代码，也可以通过 <code>execve()</code>系统调用加载并执行新程序。<code>execve()</code>会用新程序的代码和数据替换原有的段。</li><li>C 标准库还提供了一系列以 <code>exec</code> 开头的函数，都是对<code>execve()</code> 的封装，统称为 <code>exec()</code>。</li></ul><h4 id="进程id与父进程id">进程ID与父进程ID</h4><ul><li>每个进程有唯一的进程ID（PID）。</li><li>每个进程还有一个父进程ID（PPID），表示哪个进程创建了它。</li></ul><h4 id="进程终止与终止状态">进程终止与终止状态</h4><ul><li>进程可以通过 <code>_exit()</code> 系统调用（或相关的<code>exit()</code> 库函数）主动终止，也可以被信号杀死。</li><li>进程终止时会返回一个终止状态（小的非负整数），父进程可以通过<code>wait()</code> 系统调用获取。</li><li>约定：终止状态为 0 表示成功，非零表示出错。大多数 shell 用变量<code>$?</code> 保存上一个程序的终止状态。 整理与翻译如下：</li></ul><h4 id="进程的用户和组标识凭证">进程的用户和组标识（凭证）</h4><p>每个进程都关联有多个用户ID（UID）和组ID（GID），包括：</p><ul><li><strong>实际用户ID（real UID）和实际组ID（realGID）</strong>：标识进程所属的用户和组。新进程从父进程继承这些ID。登录shell 的实际UID和GID来自系统密码文件（/etc/passwd）中的相应字段。</li><li><strong>有效用户ID（effective UID）和有效组ID（effectiveGID）</strong>：这两个ID（加上补充组ID）用于判断进程访问受保护资源（如文件、进程间通信对象）时的权限。通常有效ID与实际ID相同。更改有效ID可以让进程临时获得其他用户或组的权限。</li><li><strong>补充组ID（supplementary groupIDs）</strong>：标识进程所属的其他组。新进程从父进程继承这些ID，登录shell 的补充组ID来自系统组文件（/etc/group）。</li></ul><h4 id="特权进程">特权进程</h4><ul><li>在传统 UNIX 系统中，有效用户ID为0（即超级用户root）的进程被称为<strong>特权进程</strong>，可以绕过内核的权限检查。</li><li>其他用户运行的进程称为<strong>非特权进程</strong>，其有效用户ID非0，必须遵守内核的权限规则。</li><li>进程可以通过由特权进程创建（如 root 启动的 shell），或通过set-user-ID 机制（程序文件设置了 setuid位，进程获得该文件所有者的有效UID）获得特权。</li></ul><h4 id="能力capabilities">能力（Capabilities）</h4><ul><li>从 Linux 2.2内核开始，传统上属于超级用户的权限被细分为多个<strong>能力（capabilities）</strong>。</li><li>每个特权操作都对应一个能力，进程只有拥有相应能力才能执行该操作。</li><li>传统的超级用户进程（有效UID为0）等价于拥有所有能力的进程。</li><li>只授予进程部分能力，可以让它执行部分特权操作，同时限制其他操作。</li><li>能力名称以 <code>CAP_</code> 开头，如 <code>CAP_KILL</code>。</li></ul><h4 id="init-进程">init 进程</h4><ul><li>系统启动时，内核会创建一个特殊进程<strong>init</strong>（所有进程的“父进程”），其程序文件为<code>/sbin/init</code>。</li><li>系统中所有进程都是由 init 或其子孙进程通过 fork() 创建的。</li><li>init进程的进程ID永远为1，拥有超级用户权限，不能被杀死（即使是超级用户也不行），只会在系统关机时终止。</li><li>init 的主要任务是创建和管理系统运行所需的各种进程。</li></ul><h4 id="守护进程daemon-processes">守护进程（Daemon processes）</h4><ul><li>守护进程是一类特殊用途的进程，由系统创建和管理，其特点包括：<ul><li><strong>生命周期长</strong>：通常在系统启动时启动，直到系统关闭才结束。</li><li><strong>后台运行</strong>：没有控制终端，无法直接读取输入或输出到终端。</li></ul></li><li>常见的守护进程有<code>syslogd</code>（记录系统日志）、<code>httpd</code>（提供网页服务）等。</li></ul><hr /><h4 id="环境变量列表environment-list">环境变量列表（Environmentlist）</h4><ul><li>每个进程都有一个环境变量列表，存储在进程的用户空间内存中。每个环境变量由名称和值组成。</li><li>通过 <code>fork()</code>创建新进程时，子进程会继承父进程的环境变量列表。这为父进程向子进程传递信息提供了机制。</li><li>进程用 <code>exec()</code>执行新程序时，可以选择继承原有环境变量，或指定新的环境变量。</li><li>在大多数 shell 中，用 <code>export</code> 命令（C shell 用<code>setenv</code>）创建环境变量，例如： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> MYVAR=<span class="string">&#x27;Hello world&#x27;</span></span><br></pre></td></tr></table></figure></li><li>C 程序可以通过外部变量 <code>char **environ</code>访问环境变量，也可用相关库函数获取和修改环境变量。</li><li>环境变量用途广泛，如<code>HOME</code>（用户主目录）、<code>PATH</code>（shell查找命令的目录列表）等。</li></ul><h4 id="资源限制resource-limits">资源限制（Resource limits）</h4><ul><li>每个进程都会消耗资源，如打开的文件数、内存、CPU 时间等。</li><li>进程可用 <code>setrlimit()</code>系统调用设置资源消耗的上限。每种资源限制有两个值：<ul><li><strong>软限制（soft limit）</strong>：进程实际可用的资源上限。</li><li><strong>硬限制（hard limit）</strong>：软限制可调整的最大值。</li></ul></li><li>非特权进程可以将软限制调整到硬限制以内的任意值，但只能降低硬限制，不能提高。</li><li>新进程通过 <code>fork()</code>创建时，会继承父进程的资源限制设置。</li><li>shell 可用 <code>ulimit</code> 命令（C shell 用<code>limit</code>）调整资源限制，这些设置会被子进程继承。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;程序programs&quot;&gt;程序（Programs）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;程序通常有两种形式：
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;strong&gt;源代码&lt;/strong&gt;：人类可读的文本，使用如 C
这样的编程语言编写。&lt;br /&gt;
&lt;/li&gt;</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 2.5 linux组成概述</title>
    <link href="https://mackz-maxw.github.io/2025/06/23/oper_sys5/"/>
    <id>https://mackz-maxw.github.io/2025/06/23/oper_sys5/</id>
    <published>2025-06-23T20:32:33.012Z</published>
    <updated>2025-06-23T21:05:54.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shell壳命令行解释器">Shell（壳/命令行解释器）</h3><p>Shell是一种专门的程序，用于读取用户输入的命令，并根据这些命令执行相应的程序。Shell也被称为命令解释器（command interpreter）。</p><ul><li><strong>登录 Shell（loginshell）</strong>：指用户首次登录时系统为其启动的运行 Shell 的进程。</li></ul><p>在某些操作系统中，命令解释器是内核的一部分；但在 UNIX 系统中，Shell是一个普通的用户进程。UNIX 系统支持多种Shell，不同用户（甚至同一用户的不同会话）可以同时使用不同的 Shell。</p><h3 id="用户与用户组users-and-groups">用户与用户组（Users andGroups）</h3><h4 id="用户users">用户（Users）</h4><ul><li>系统中的每个用户都有唯一的登录名（username）和对应的数字用户ID（UID）。</li><li>每个用户的信息都记录在 <code>/etc/passwd</code>文件的一行中，内容包括：<ul><li>用户名</li><li>用户ID（UID）</li><li>所属的第一个用户组的组ID（GID）</li><li>家目录（home directory）：用户登录后进入的初始目录</li><li>登录Shell：用于解释用户命令的程序名</li><li>密码（通常为加密形式），但出于安全考虑，密码一般存储在只有特权用户可读的shadow 密码文件中。</li></ul></li></ul><h4 id="用户组groups">用户组（Groups）</h4><ul><li>为了管理和控制对文件及其他系统资源的访问，用户可以被组织到用户组中。</li><li>例如，一个项目组的成员可以被加入同一个用户组，以便共享文件。</li><li>早期 UNIX 系统中，一个用户只能属于一个组。BSD 及后来的 UNIX 和 POSIX标准允许用户同时属于多个组。</li><li>每个用户组的信息记录在 <code>/etc/group</code>文件的一行中，内容包括：<ul><li>组名（唯一）</li><li>组ID（GID）</li><li>用户列表：以逗号分隔的用户名列表，表示属于该组的用户（不包括那些通过<code>/etc/passwd</code> 文件的 GID 字段已属于该组的用户）</li></ul></li></ul><h4 id="超级用户superuser">超级用户（Superuser）</h4><ul><li>系统中有一个特殊用户，称为超级用户（superuser），拥有系统内的特殊权限。</li><li>超级用户的用户ID为0，通常用户名为 root。</li><li>超级用户可以绕过系统的所有权限检查。例如，可以访问系统中的任何文件、向任何进程发送信号等。</li><li>系统管理员使用超级用户账户执行各种系统管理任务。</li></ul><h3id="单一目录层次结构目录链接与文件">单一目录层次结构、目录、链接与文件</h3><p>Linux内核维护着一个<strong>单一的分层目录结构</strong>来组织系统中的所有文件（与Windows 等操作系统每个磁盘有独立目录树不同）。这个层次结构的顶端是根目录<code>/</code>，所有文件和目录都是根目录的子孙。</p><h4 id="文件类型">文件类型</h4><ul><li><strong>普通文件（regular file）</strong>：普通数据文件。</li><li><strong>目录（directory）</strong>：特殊文件，内容是文件名和对应文件引用的表。</li><li><strong>其他类型</strong>：还包括设备文件、管道、套接字、符号链接等。</li></ul><h4 id="目录与链接">目录与链接</h4><ul><li>目录是特殊文件，内容是“文件名+引用”的表，这种关联称为<strong>链接（link）</strong>。</li><li>一个文件可以有多个链接（即多个名字），可以存在于同一目录或不同目录。</li><li>目录可以包含指向文件和其他目录的链接，形成树状层次结构。</li><li>每个目录至少有两个特殊条目：<ul><li><code>.</code> ：指向自身</li><li><code>..</code> ：指向父目录（根目录的 <code>..</code>也指向自身）</li></ul></li></ul><h4 id="符号链接symbolic-link">符号链接（Symbolic Link）</h4><ul><li>符号链接（软链接，softlink）是一个特殊文件，内容是另一个文件的路径名。</li><li>当系统调用中指定路径时，内核会自动解析（跟随）符号链接，直到找到目标文件（递归解析，内核会限制递归次数以防死循环）。</li><li>如果符号链接指向的目标不存在，则称为<strong>悬挂链接（danglinglink）</strong>。</li><li><strong>硬链接（hard link）</strong>和<strong>软链接（softlink）</strong>是两种不同的链接类型。</li></ul><h4 id="文件名filenames">文件名（Filenames）</h4><ul><li>在大多数 Linux 文件系统中，文件名最长可达 255 个字符。</li><li>文件名可以包含除斜杠（/）和空字符（\0）以外的任意字符。</li><li>建议只使用字母、数字、点（.）、下划线（_）和连字符（-），即字符集<code>[-._a-zA-Z0-9]</code>，这被称为 SUSv3标准的“可移植文件名字符集”。</li><li>避免使用不在可移植字符集内的字符，因为这些字符在shell、正则表达式等环境下可能有特殊含义。如果必须使用，需要用反斜杠（）转义，否则可能无法正确使用。</li><li>避免以连字符（-）开头的文件名，因为在 shell命令中可能被误认为是选项。</li></ul><h4 id="路径名pathnames">路径名（Pathnames）</h4><ul><li>路径名是由可选的开头斜杠（/）和一系列用斜杠分隔的文件名组成的字符串。</li><li>除最后一个部分外，路径中的每个部分都应是目录（或能解析为目录的符号链接），最后一个部分可以是任意类型的文件。</li><li>路径名分为两类：<ul><li><strong>绝对路径名</strong>：以斜杠（/）开头，从根目录开始定位文件。例如<code>/home/mtk/.bashrc</code>、<code>/usr/include</code>、<code>/</code>。</li><li><strong>相对路径名</strong>：不以斜杠开头，相对于当前工作目录。例如，从<code>usr</code> 目录访问 <code>types.h</code> 可用<code>include/sys/types.h</code>，从 <code>avr</code> 目录访问<code>.bashrc</code> 可用 <code>../mtk/.bashrc</code>。</li></ul></li><li>路径名可以包含 <code>..</code>，表示上一级目录。</li></ul><h4 id="当前工作目录current-working-directory">当前工作目录（Currentworking directory）</h4><ul><li>每个进程都有一个当前工作目录（current workingdirectory），即进程在目录树中的“当前位置”，相对路径名都是基于这个目录解析的。</li><li>进程的当前工作目录由父进程继承。登录 shell 的初始工作目录由<code>/etc/passwd</code> 文件中的 home 字段指定。</li><li>可以用 <code>cd</code> 命令更改当前工作目录。</li></ul><h4id="文件所有权与权限file-ownership-and-permissions">文件所有权与权限（Fileownership and permissions）</h4><ul><li>每个文件都有一个关联的用户ID（UID）和组ID（GID），分别表示文件的所有者和所属组。</li><li>文件的所有权决定了哪些用户可以访问该文件。</li><li>系统将用户分为三类：<ol type="1"><li>文件所有者（user）</li><li>与文件组ID匹配的组成员（group）</li><li>其他所有用户（other）</li></ol></li><li>每类用户有三种权限（共九个权限位）：<ul><li>读（read）：允许读取文件内容</li><li>写（write）：允许修改文件内容</li><li>执行（execute）：允许执行该文件（如程序或脚本）</li></ul></li><li>目录的权限含义略有不同：<ul><li>读：允许列出目录内容（文件名）</li><li>写：允许修改目录内容（添加、删除、重命名文件）</li><li>执行（或称搜索）：允许访问目录中的文件（前提是对文件本身也有权限）</li></ul></li></ul><h3 id="文件-io-模型">文件 I/O 模型</h3><h4 id="io-的通用性">I/O 的通用性</h4><p>UNIX 系统 I/O 模型的一个显著特点是<strong>I/O的通用性</strong>。这意味着同一组系统调用（如<code>open()</code>、<code>read()</code>、<code>write()</code>、<code>close()</code>等）可以用于所有类型的文件，包括设备文件。内核会将应用程序的 I/O请求转换为相应的文件系统或设备驱动操作，从而对目标文件或设备进行实际的I/O 操作。因此，使用这些系统调用的程序可以对任何类型的文件进行操作。</p><p>内核本质上只提供一种文件类型：<strong>按字节顺序排列的字节流</strong>。对于磁盘文件、磁盘和磁带设备，可以通过<code>lseek()</code> 系统调用实现随机访问。</p><p>许多应用和库将换行符（ASCII 码10，linefeed）视为一行文本的结束和下一行的开始。UNIX系统没有专门的文件结束符（EOF），文件结束通过 <code>read()</code>返回无数据来检测。</p><h4 id="文件描述符file-descriptors">文件描述符（File descriptors）</h4><p>I/O 系统调用通过<strong>文件描述符</strong>（filedescriptor）来引用已打开的文件。文件描述符是一个（通常很小的）非负整数。通常通过<code>open()</code> 调用获得文件描述符，<code>open()</code>需要一个路径名参数，指定要进行 I/O 操作的文件。</p><p>当进程由 shell 启动时，通常会继承三个已打开的文件描述符： -<strong>0</strong>：标准输入（standard input），进程从中读取输入 -<strong>1</strong>：标准输出（standard output），进程向其写入输出 -<strong>2</strong>：标准错误（standarderror），进程向其写入错误信息和异常通知</p><p>在交互式 shell 或程序中，这三个描述符通常都连接到终端。在 stdio库中，它们分别对应于 <code>stdin</code>、<code>stdout</code> 和<code>stderr</code>。</p><h4 id="stdio-库">stdio 库</h4><p>C 语言程序通常使用标准 C 库中的 I/O 函数（即 stdio 库）进行文件I/O。常用的 stdio 函数包括<code>fopen()</code>、<code>fclose()</code>、<code>scanf()</code>、<code>printf()</code>、<code>fgets()</code>、<code>fputs()</code>等。这些 stdio 函数是建立在底层 I/O 系统调用（如<code>open()</code>、<code>close()</code>、<code>read()</code>、<code>write()</code>等）之上的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;shell壳命令行解释器&quot;&gt;Shell（壳/命令行解释器）&lt;/h3&gt;
&lt;p&gt;Shell
是一种专门的程序，用于读取用户输入的命令，并根据这些命令执行相应的程序。Shell
也被称为命令解释器（command interpreter）。&lt;/p&gt;
&lt;ul&gt;
</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 2.4 初试linux内核实验</title>
    <link href="https://mackz-maxw.github.io/2025/06/22/oper_sys4/"/>
    <id>https://mackz-maxw.github.io/2025/06/22/oper_sys4/</id>
    <published>2025-06-22T16:26:14.296Z</published>
    <updated>2025-06-22T20:52:23.275Z</updated>
    
    <content type="html"><![CDATA[<h2id="树莓派镜像下载配置与自定义内核安装流程">树莓派镜像下载、配置与自定义内核安装流程</h2><h3 id="下载并写入指定树莓派镜像">1. 下载并写入指定树莓派镜像</h3><p>为避免因购买或借用的树莓派设备时间不同导致的系统版本不一致，建议大家统一下载指定的树莓派镜像作为起点。</p><ul><li>将 MicroSD 卡插入 USB 读卡器，并连接到你的电脑。</li><li>下载并安装最新版 Raspberry Pi Imager。</li><li>下载课程指定的树莓派镜像：<ahref="https://downloads.raspberrypi.org/raspios_armhf/images/raspios_armhf-2022-01-28/2022-01-28-raspios-bullseye-armhf.zip">2022-01-28-raspios-bullseye-armhf.zip</a>（约1.2GB，解压后近4GB）。</li><li>解压 zip 文件，得到 .img 镜像文件。</li><li>打开 Raspberry Pi Imager，选择“CHOOSE OS”→“Usecustom”，选中刚才解压的 .img 文件。</li><li>选择“CHOOSE SD CARD”，选中你的 MicroSD卡（注意不要选错，否则会清空数据）。</li><li>进入高级设置（齿轮图标，或 Windows 下用Ctrl+Shift+X），建议修改主机名为唯一值（如包含你的用户名），以免与他人冲突。</li><li>勾选“Enable SSH”，选择“Use passwordauthentication”，设置用户名和强密码（建议不要用默认密码）。</li><li>勾选“Set locale settings”，设置时区（如美国中部用America/Chicago），键盘布局选 us。</li><li>点击“Save”，然后点击“WRITE”写入镜像。</li><li>写入完成后，卸载 MicroSD 卡，插入树莓派并开机。</li></ul><hr /><h3 id="首次启动与-ssh-连接">2. 首次启动与 SSH 连接</h3><ul><li>树莓派首次启动可能需要几分钟，启动后通过 SSH 连接（如 sshpiuser@pihost，用户名和主机名为你设置的）。</li><li>若主机名无法解析，可在路由器管理页面查找树莓派的 IP 地址，再用 ssh连接。</li></ul><hr /><h3 id="初始设置与系统升级">3. 初始设置与系统升级</h3><ul><li>首次登录会看到“Welcome to the RaspberryPi”向导，按提示设置国家、语言、时区、键盘等。</li><li>可能会再次提示设置密码，可直接关闭。</li><li>为防止欢迎界面反复出现，运行： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge piwiz</span><br></pre></td></tr></table></figure></li><li>升级系统和驱动： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></li><li>升级完成后重启树莓派。</li></ul><hr /><h3 id="网络设置与信息收集">4. 网络设置与信息收集</h3><ul><li>连接 WiFi，打开终端，运行： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig wlan0</span><br></pre></td></tr></table></figure> 记录 MAC 地址（ether后面的六组十六进制数）。</li><li>运行： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname -I</span><br></pre></td></tr></table></figure> 记录 IP 地址。</li></ul><hr /><h3 id="传输并安装自编译内核与模块">5. 传输并安装自编译内核与模块</h3><ul><li>用 ssh 连接学校提供的linux工作平台，进入你编译内核的目录：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /project/scratch01/compile/<span class="string">&quot;your username&quot;</span>/linux_source</span><br></pre></td></tr></table></figure></li><li>打包模块和内核启动文件： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -C modules/lib -czf modules.tgz modules</span><br><span class="line">tar -C linux/arch/arm -czf boot.tgz boot</span><br></pre></td></tr></table></figure></li><li>在树莓派上新建 linux_source 目录，进入后用 sftp 下载上述两个压缩包：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sftp [学校统一登陆平台key]@shell.cec.学校曾用简称.edu</span><br><span class="line"><span class="built_in">cd</span> /project/scratch01/compile/<span class="string">&quot;your username&quot;</span>/linux_source</span><br><span class="line">get modules.tgz</span><br><span class="line">get boot.tgz</span><br><span class="line">quit</span><br></pre></td></tr></table></figure></li><li>备份 <code>/usr/lib/modules</code> 和 <code>/boot</code> 目录（或<code>/lib/modules</code>，视系统而定）： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> -r /usr/lib/modules ~/Desktop/modules_backup</span><br><span class="line">sudo <span class="built_in">cp</span> -r /boot ~/Desktop/boot_backup</span><br></pre></td></tr></table></figure></li><li>解压并安装新内核和模块： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf modules.tgz</span><br><span class="line">tar -xzf boot.tgz</span><br><span class="line"><span class="built_in">cd</span> modules</span><br><span class="line">sudo <span class="built_in">cp</span> -rd * /usr/lib/modules   <span class="comment"># 或 /lib/modules</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">sudo <span class="built_in">cp</span> boot/dts/*.dtb /boot/</span><br><span class="line">sudo <span class="built_in">cp</span> boot/dts/overlays/*.dtb* /boot/overlays</span><br><span class="line">sudo <span class="built_in">cp</span> boot/dts/overlays/README /boot/overlays</span><br></pre></td></tr></table></figure></li><li>树莓派 3B+： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> boot/zImage /boot/kernel7.img</span><br></pre></td></tr></table></figure></li><li>树莓派 4/4B： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> boot/zImage /boot/kernel7l.img</span><br></pre></td></tr></table></figure></li></ul><hr /><h3 id="验证新内核">6. 验证新内核</h3><ul><li>重启树莓派，运行： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a</span><br></pre></td></tr></table></figure>检查输出是否包含你设置的本地版本字符串、编译日期等。</li><li>若未生效，编辑 <code>/boot/config.txt</code>，在 <code>[pi4]</code>段落前加一行： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arm_64bit=0</span><br></pre></td></tr></table></figure> 再重启并用 <code>uname -a</code>检查。</li></ul><hr /><h3 id="备份与后续建议">7. 备份与后续建议</h3><ul><li>建议用 svn、git等工具备份你的代码，也可在多台树莓派间做冗余，防止系统崩溃或锁死导致数据丢失。</li><li><code>sudo passwd root</code>更新root密码（忘记密码用）</li><li><code>sudo raspi-config</code>中可以更改主机名</li><li>在树莓派的桌面环境中，可以使用快捷键 Ctrl + Alt + T快速打开终端</li></ul><h3 id="用户管理">用户管理</h3><ul><li><code>sudo adduser 新用户名</code>创建新用户</li><li><code>usermod -aG sudo username</code>将username用户加入sudoers组</li><li>执行visudo命令并在文件中添加<code>username  ALL=(ALL) NOPASSWD:ALL</code>-赋予username用户执行所有sudo命令权限，不需要密码提示</li><li><code>sudo userdel --remove --force pi</code>删除默认账号</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2
id=&quot;树莓派镜像下载配置与自定义内核安装流程&quot;&gt;树莓派镜像下载、配置与自定义内核安装流程&lt;/h2&gt;
&lt;h3 id=&quot;下载并写入指定树莓派镜像&quot;&gt;1. 下载并写入指定树莓派镜像&lt;/h3&gt;
&lt;p&gt;为避免因购买或借用的树莓派设备时间不同导致的系统版本不一致，建议大家统一</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 2.3 初试linux内核实验</title>
    <link href="https://mackz-maxw.github.io/2025/06/21/oper_sys3/"/>
    <id>https://mackz-maxw.github.io/2025/06/21/oper_sys3/</id>
    <published>2025-06-22T00:53:37.040Z</published>
    <updated>2025-06-22T00:54:50.626Z</updated>
    
    <content type="html"><![CDATA[<h2 id="树莓派-linux-内核源码下载与编译流程">树莓派 Linux内核源码下载与编译流程</h2><h3 id="下载适用于树莓派的内核源码">1. 下载适用于树莓派的内核源码</h3><p>一般项目可以直接去 <a href="https://kernel.org">kernel.org</a> 下载Linux 源码，但本课程针对树莓派，需要用树莓派官方维护的内核版本（在 <ahref="https://github.com/raspberrypi">https://github.com/raspberrypi</a>）。</p><p>在你的 <code>/project/scratch01/compile/user-name/</code>目录下，新建 <code>linux_source</code>文件夹用于存放源码和编译文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> linux_source</span><br><span class="line"><span class="built_in">cd</span> linux_source</span><br></pre></td></tr></table></figure><p>下载指定版本的树莓派内核源码（此过程可能需要20-30分钟）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/raspberrypi/linux/archive/raspberrypi-kernel_1.20210527-1.tar.gz</span><br></pre></td></tr></table></figure><p>解压源码包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf raspberrypi-kernel_1.20210527-1.tar.gz</span><br></pre></td></tr></table></figure><p>解压后会得到一个新目录，建议用 <code>mv</code> 命令重命名为<code>linux</code>，便于后续操作。解压完成后请删除 <code>.tar.gz</code>文件以节省空间。</p><p>进入 <code>linux</code> 目录，运行以下命令查看内核版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make kernelversion</span><br></pre></td></tr></table></figure><p>并用文本编辑器（如 emacs、vim、nano）打开<code>Makefile</code>，查看前几行定义的内核版本常量，记录<code>NAME</code> 常量的值。</p><hr /><h3 id="针对树莓派-44b-的设备树修改">2. 针对树莓派 4/4B的设备树修改</h3><p>如果你使用的是 Raspberry Pi 4 或 4B，需要修改设备树文件<code>arch/arm/boot/dts/bcm2711.dtsi</code>，找到 <code>arm-pmu</code>条目，将 <code>compatible</code> 行改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compatible = <span class="string">&quot;arm,cortex-a72-pmu&quot;</span>, <span class="string">&quot;arm,cortex-a15-pmu&quot;</span>, <span class="string">&quot;arm,armv8-pmuv3&quot;</span>;</span><br></pre></td></tr></table></figure><hr /><h3 id="配置交叉编译环境">3. 配置交叉编译环境</h3><p>添加交叉编译器和新版 gcc 到 PATH（并将以下两行添加到<code>~/.bashrc</code> 文件末尾，确保下次登录自动生效）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">module add arm-rpi</span><br><span class="line">module add gcc-8.3.0</span><br></pre></td></tr></table></figure><hr /><h3 id="配置内核">4. 配置内核</h3><p>对于 Raspberry Pi 3B+，运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j8 ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bcm2709_defconfig</span><br></pre></td></tr></table></figure><p>对于 Raspberry Pi 4/4B，运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j8 ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bcm2711_defconfig</span><br></pre></td></tr></table></figure><p>这会生成树莓派的默认内核配置。</p><hr /><h3 id="自定义内核配置">5. 自定义内核配置</h3><p>进入菜单配置界面：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig</span><br></pre></td></tr></table></figure><ul><li>在 "General setup" -&gt; "Local version" 里，添加你的唯一标识（如<code>-v7</code> 或 <code>-v7l</code> 后面加你的名字，无空格）。</li><li>修改 "Preemption Model" 选项为 "Preemptible Kernel (Low-LatencyDesktop)"，以获得更低延迟的抢占模型。</li><li>启用 ARM 性能监控单元驱动（"Kernel Performance Events andCounters"），并确保 "Profiling support" 也已启用。</li><li>任选一个有趣的选项，按 <code>H</code>键查看简介，记录该选项的名称、简介和符号（symbol），并简述为何选择"Preemptible Kernel (Low-LatencyDesktop)"（提示：该模式适合需要低延迟响应的场景，如桌面或实时应用）。</li></ul><p>保存并退出配置。</p><hr /><h3 id="编译内核">6. 编译内核</h3><p>记录编译开始和结束时间：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span>&gt;&gt;time.txt; make -j8 ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- zImage modules dtbs; <span class="built_in">date</span>&gt;&gt;time.txt</span><br></pre></td></tr></table></figure><p>编译完成后，创建用于存放模块的目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ../modules</span><br></pre></td></tr></table></figure><p>安装内核模块：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j8 ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- INSTALL_MOD_PATH=../modules modules_install</span><br></pre></td></tr></table></figure><hr /><h3 id="回答与说明">7. 回答与说明</h3><ul><li>用 <code>cat time.txt</code> 查看编译所用时间。</li><li>说明为何要用交叉编译器：因为 linuxlab服务器的架构与树莓派不同，必须用交叉编译器生成适用于 ARM架构的内核和模块。</li></ul><hr /><p><strong>总结</strong><br />本流程涵盖了树莓派专用 Linux内核源码的下载、解压、配置、定制、编译和模块安装，并介绍了如何设置交叉编译环境和设备树修改。通过这些步骤，你可以为树莓派编译和定制属于自己的Linux 内核。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;树莓派-linux-内核源码下载与编译流程&quot;&gt;树莓派 Linux
内核源码下载与编译流程&lt;/h2&gt;
&lt;h3 id=&quot;下载适用于树莓派的内核源码&quot;&gt;1. 下载适用于树莓派的内核源码&lt;/h3&gt;
&lt;p&gt;一般项目可以直接去 &lt;a href=&quot;https://kern</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 2.2 linux内核与用户空间的不同</title>
    <link href="https://mackz-maxw.github.io/2025/06/20/oper_sys2/"/>
    <id>https://mackz-maxw.github.io/2025/06/20/oper_sys2/</id>
    <published>2025-06-21T02:18:37.358Z</published>
    <updated>2025-06-22T00:17:17.060Z</updated>
    
    <content type="html"><![CDATA[<h2id="与众不同的野兽内核与用户空间的区别">与众不同的“野兽”：内核与用户空间的区别</h2><p>Linux内核与普通用户空间程序相比，有许多独特之处。这些差异并不一定让内核开发更难，但确实让它与用户空间开发大不相同。内核开发有一些“特殊规则”，有些显而易见，有些则不那么直观。主要区别包括：</p><ol type="1"><li><strong>内核无法使用 C 标准库（libc）和标准 C 头文件。</strong></li><li><strong>内核使用 GNU C 语言编写。</strong></li><li><strong>内核没有用户空间的内存保护机制。</strong></li><li><strong>内核中不能轻易执行浮点运算。</strong></li><li><strong>内核每个进程的栈空间很小且固定。</strong></li><li><strong>由于内核有异步中断、支持抢占和多处理器（SMP），因此同步和并发问题非常重要。</strong></li><li><strong>可移植性很重要。</strong></li></ol><p>下面简要解释这些差异：</p><hr /><h3 id="没有-libc-或标准头文件">没有 libc 或标准头文件</h3><p>与用户空间程序不同，内核不会链接标准 C库（libc）或其他外部库。主要原因是速度和体积——完整的 C库太大、效率太低，不适合内核使用。</p><p>不用担心，内核自己实现了很多常用的 libc函数。例如，常见的字符串操作函数在 <code>lib/string.c</code>中实现，只需包含 <code>&lt;linux/string.h&gt;</code>头文件即可使用。</p><h4 id="头文件">头文件</h4><p>内核源码只能包含内核源码树中的头文件，不能引用外部头文件或库。<br />- 基础头文件位于源码根目录的 <code>include/</code>目录下。例如，<code>&lt;linux/inotify.h&gt;</code> 实际路径为<code>include/linux/inotify.h</code>。 - 架构相关的头文件位于<code>arch/&lt;architecture&gt;/include/asm</code>，如 x86 架构下为<code>arch/x86/include/asm</code>，引用时用<code>&lt;asm/ioctl.h&gt;</code>。</p><h4 id="没有-printf用-printk">没有 printf()，用 printk()</h4><p>内核没有 <code>printf()</code>，但提供了类似的 <code>printk()</code>用于内核日志输出。例如： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printk(<span class="string">&quot;Hello world! A string &#x27;%s&#x27; and an integer &#x27;%d&#x27;\n&quot;</span>, str, i);</span><br></pre></td></tr></table></figure> 与 <code>printf()</code>不同，<code>printk()</code> 可以指定优先级（priority flag），用于syslogd 判断消息显示位置。例如： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printk(KERN_ERR <span class="string">&quot;this is an error!\n&quot;</span>);</span><br></pre></td></tr></table></figure>注意：<code>KERN_ERR</code>和消息之间没有逗号，这是因为优先级标志是字符串宏，编译时会自动拼接。</p><h3 id="gnu-c">GNU C</h3><p>和大多数 Unix 内核一样，Linux 内核主要用 C 语言编写。但它并不是严格的ANSI C，而是大量使用了 gcc（GNU编译器套件）提供的各种语言扩展。内核开发者会用到 ISO C99 和 GNU C的扩展特性，这使得 Linux 内核基本只能用 gcc 编译（近年 Intel C编译器也支持了大部分 gcc 特性，可以编译内核）。目前推荐使用 gcc 4.4或更高版本。</p><p>C99 的扩展比较常见，而 GNU C 的扩展则是 Linux 内核代码区别于普通 C项目的重要原因。下面介绍几个常见的 GNU C 扩展：</p><h4 id="内联函数inline-functions">内联函数（Inline Functions）</h4><p>C99 和 GNU C 都支持内联函数（inlinefunction）。内联函数会在每个调用点直接插入函数体，避免了函数调用和返回的开销（如寄存器保存/恢复），有利于编译器整体优化调用者和被调用者的代码。但缺点是会增加代码体积和内存消耗。</p><p>内核开发者通常只对小型、对性能要求高的函数使用内联。大函数或不常用的函数不建议内联。</p><p>内联函数的声明方式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">wolf</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> tail_size)</span></span><br></pre></td></tr></table></figure><ul><li><code>static inline</code> 关键字用于定义内联函数。</li><li>内联函数的声明要在使用前，否则编译器无法内联。</li><li>通常内联函数会放在头文件中（因为是 static，不会导出符号）。</li></ul><p>内核更倾向于用内联函数而不是复杂的宏，因为内联函数有类型安全和可读性好等优点。</p><h4 id="内联汇编inline-assembly">内联汇编（Inline Assembly）</h4><p>gcc 支持在 C代码中嵌入汇编指令，这在与硬件密切相关的内核代码中很有用。用法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> low, high;</span><br><span class="line"><span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;rdtsc&quot;</span> : <span class="string">&quot;=a&quot;</span> (low), <span class="string">&quot;=d&quot;</span> (high))</span>;</span><br><span class="line"><span class="comment">/* low 和 high 现在分别保存了 64 位 tsc 的低 32 位和高 32 位 */</span></span><br></pre></td></tr></table></figure><ul><li><code>asm</code> 关键字用于插入汇编代码。</li><li>这种用法主要用于体系结构相关或对性能极致要求的代码。</li><li>大部分内核代码还是用 C 语言编写，汇编只用于底层和关键路径。</li></ul><h4 id="分支预测注解branch-annotation">分支预测注解（BranchAnnotation）</h4><p>gcc提供了分支预测指令，可以告诉编译器某个条件分支更可能被执行，从而优化生成的代码。内核通过<code>likely()</code> 和 <code>unlikely()</code> 宏来使用这些特性。</p><p>例如： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (unlikely(error)) &#123;</span><br><span class="line">    <span class="comment">/* 这里假设 error 很少为真 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (likely(success)) &#123;</span><br><span class="line">    <span class="comment">/* 这里假设 success 几乎总为真 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> - 只有在分支方向非常明确时才建议使用这些宏。 -如果预测正确，可以提升性能；预测错误则可能降低性能。 -在内核中，<code>unlikely()</code>常用于错误处理分支，因为大多数情况下不会出错。</p><h3 id="没有内存保护">没有内存保护</h3><p>当用户空间程序非法访问内存时，内核可以捕获错误，发送 SIGSEGV信号并终止该进程。但如果内核自身非法访问内存，后果就不可控了（毕竟，谁来保护内核呢？）。内核中的内存违规会导致oops（严重内核错误）。因此，在内核中绝不能非法访问内存，比如解引用 NULL指针——在内核里，这样的错误代价更高！</p><p>另外，内核内存是不可换页的（notpageable），即内核占用的每一字节物理内存都不能被换出。你在内核里多用一点内存，系统可用物理内存就少一点。每次想给内核加新功能时，请记住这一点！</p><h3 id="不能轻易使用浮点运算">不能（轻易）使用浮点运算</h3><p>用户空间进程使用浮点指令时，内核会负责从整数模式切换到浮点模式。具体做法依赖于体系结构，通常是通过陷阱（trap）实现的。</p><p>但内核自身不能像用户空间那样方便地使用浮点运算，因为内核无法轻松地“陷阱”自己。内核里用浮点数需要手动保存和恢复浮点寄存器等操作，非常麻烦。<strong>简而言之：不要在内核里用浮点运算！</strong>除极少数特殊情况外，内核代码中基本没有浮点操作。</p><h3 id="小而固定的栈空间">小而固定的栈空间</h3><p>用户空间可以在栈上分配大量变量，包括大结构体和大数组，因为用户空间的栈很大且可以动态增长。但内核栈既不大也不能动态扩展，而是小且固定的。</p><ul><li>栈的具体大小依赖于体系结构。例如 x86 架构下，栈大小可在编译时配置为4KB 或 8KB。</li><li>通常，32 位系统为 8KB，64 位系统为16KB，每个进程有自己的内核栈，这个大小是固定的。</li></ul><p>因此，内核开发时要避免在栈上分配大对象。</p><h3 id="同步与并发">同步与并发</h3><p>内核容易出现竞态条件（racecondition）。与单线程的用户空间程序不同，内核有多种并发访问共享资源的情况，必须通过同步机制防止竞态：</p><ul><li>Linux是抢占式多任务操作系统，进程会被调度器随时切换，内核需要在这些任务间同步。</li><li>Linux支持对称多处理（SMP），多个处理器上的内核代码可能同时访问同一资源。</li><li>中断是异步发生的，可能在访问资源时被打断，导致中断处理程序也访问同一资源。</li><li>内核本身是可抢占的，内核代码可能被抢占，切换到另一个访问同一资源的代码。</li></ul><p>常见的同步机制有自旋锁（spinlock）和信号量（semaphore）。后续章节会详细介绍。</p><h3 id="可移植性的重要性">可移植性的重要性</h3><p>虽然用户空间程序不一定要追求可移植性，但 Linux作为一个可移植操作系统，必须保证代码能在多种体系结构上正确编译和运行。体系结构相关的代码要放在专门的目录下，体系结构无关的代码要保持通用。</p><p>一些基本规则包括：保持字节序中立、支持 64位、不要假设字长或页面大小等。后续章节会详细讨论可移植性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2
id=&quot;与众不同的野兽内核与用户空间的区别&quot;&gt;与众不同的“野兽”：内核与用户空间的区别&lt;/h2&gt;
&lt;p&gt;Linux
内核与普通用户空间程序相比，有许多独特之处。这些差异并不一定让内核开发更难，但确实让它与用户空间开发大不相同。内核开发有一些“特殊规则”，有些显而易见</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 2. 初试linux内核</title>
    <link href="https://mackz-maxw.github.io/2025/06/20/oper_sys1/"/>
    <id>https://mackz-maxw.github.io/2025/06/20/oper_sys1/</id>
    <published>2025-06-20T22:57:37.115Z</published>
    <updated>2025-06-22T00:44:08.590Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内核源码相关">内核源码相关</h2><h3 id="获取内核源码">获取内核源码</h3><p>当前的 Linux 源代码总是可以在 <ahref="http://www.kernel.org">http://www.kernel.org</a>官方网站上以完整的 tarball（用 tar命令创建的归档文件）和增量补丁的形式获得。 可以利用<ahref="https://elixir.bootlin.com/linux/v5.10.17/source">Elixir CrossReferencer</a>网站在线查看源码</p><h4 id="使用-git">使用 Git</h4><p>你可以用 Git 获取 Linus 主线最新的源码树： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux-2.6.git</span><br></pre></td></tr></table></figure>检出后，可以用如下命令更新你的源码树到 Linus 的最新版本：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure></p><h4 id="安装内核源码">安装内核源码</h4><p>内核 tarball 以 GNU zip（gzip）和 bzip2 两种格式发布。bzip2是默认且推荐的格式，因为它通常压缩得更好。bzip2 格式的内核包名为linux-x.y.z.tar.bz2，其中 x.y.z是内核版本号。下载源码后，解压和解包很简单。如果你的 tarball 是 bzip2压缩的，运行： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvjf linux-x.y.z.tar.bz2</span><br></pre></td></tr></table></figure> 如果是 gzip 压缩的，运行： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvzf linux-x.y.z.tar.gz</span><br></pre></td></tr></table></figure>这会将源码解压到 linux-x.y.z 目录。如果你用 git 获取源码，就不需要下载tarball，只需运行 git clone，Git 会自动下载并解包最新源码。</p><h4 id="源码安装与开发位置">源码安装与开发位置</h4><p>内核源码通常安装在<code>/usr/src/linux</code>。但你不应该在这个目录下开发，因为你的 C库可能会链接到这里的内核版本。此外，修改内核源码不应需要 root权限——建议在你的 home 目录下开发，只在安装新内核时用root。即使安装新内核，也不要动 <code>/usr/src/linux</code>。</p><h4 id="使用补丁">使用补丁</h4><p>在 Linux内核社区，补丁是交流的通用语言。你会以补丁的形式分发你的代码更改，也会以补丁的形式接收别人的代码。增量补丁可以让你轻松地从一个内核版本升级到下一个，无需每次都下载完整的大包，只需应用增量补丁即可，节省带宽和时间。要应用增量补丁，在内核源码目录下运行：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patch -p1 &lt; ../patch-x.y.z</span><br></pre></td></tr></table></figure> 通常，补丁是针对前一个版本的源码生成的。</p><h3 id="内核源码树结构简介">内核源码树结构简介</h3><p>Linux 内核源码树（sourcetree）被划分为多个目录，每个目录下又包含许多子目录。下表列出了源码树根目录下的主要目录及其说明：</p><table><thead><tr><th>目录（Directory）</th><th>说明（Description）</th></tr></thead><tbody><tr><td>arch</td><td>架构相关源码（不同CPU架构的实现）</td></tr><tr><td>block</td><td>块设备I/O层</td></tr><tr><td>crypto</td><td>加密API</td></tr><tr><td>Documentation</td><td>内核源码文档</td></tr><tr><td>drivers</td><td>设备驱动</td></tr><tr><td>firmware</td><td>某些驱动需要用到的设备固件</td></tr><tr><td>fs</td><td>虚拟文件系统（VFS）及各类文件系统实现</td></tr><tr><td>include</td><td>内核头文件</td></tr><tr><td>init</td><td>内核启动与初始化代码</td></tr><tr><td>ipc</td><td>进程间通信代码</td></tr><tr><td>kernel</td><td>核心子系统（如调度器等）</td></tr><tr><td>lib</td><td>辅助函数库</td></tr><tr><td>mm</td><td>内存管理子系统及虚拟内存</td></tr><tr><td>net</td><td>网络子系统</td></tr><tr><td>samples</td><td>示例和演示代码</td></tr><tr><td>scripts</td><td>构建内核用的脚本</td></tr><tr><td>security</td><td>Linux安全模块</td></tr><tr><td>sound</td><td>声音子系统</td></tr><tr><td>usr</td><td>早期用户空间代码（如initramfs）</td></tr><tr><td>tools</td><td>内核开发相关工具</td></tr><tr><td>virt</td><td>虚拟化基础设施</td></tr></tbody></table><h4 id="源码树根目录下的一些文件">源码树根目录下的一些文件</h4><ul><li><strong>COPYING</strong>：内核许可证（GNU GPL v2）。</li><li><strong>CREDITS</strong>：内核主要开发者名单。</li><li><strong>MAINTAINERS</strong>：各子系统和驱动的维护者名单。</li><li><strong>Makefile</strong>：内核主Makefile，用于编译和构建整个内核。</li></ul><h2 id="配置内核configuring-the-kernel">配置内核（Configuring theKernel）</h2><p>因为 Linux源码是开放的，所以你可以在编译前根据自己的需求进行配置和定制。实际上，你可以只为你需要的功能和驱动编译支持。<strong>配置内核</strong>是编译前的必经步骤。由于内核功能丰富、支持的硬件种类繁多，配置选项也非常多。</p><h3 id="内核配置选项configuration-options">内核配置选项（ConfigurationOptions）</h3><p>内核配置通过一系列以 <code>CONFIG_</code> 开头的选项控制，例如<code>CONFIG_SMP</code> 控制对称多处理（SMP）支持。设置该选项即启用SMP，未设置则禁用。配置选项既决定编译哪些文件，也通过预处理指令影响源码。</p><ul><li><strong>布尔型（Boolean）</strong>：只有 yes 或 no 两种状态。比如<code>CONFIG_PREEMPT</code>。</li><li><strong>三态（Tristate）</strong>：yes、no 或 module。module表示编译为可动态加载的模块（.ko 文件）；yes表示直接编译进内核镜像。</li><li><strong>字符串或整数</strong>：用于指定某些参数值，比如数组大小，这些不会影响编译流程，而是作为宏被源码访问。</li></ul><h3 id="发行版内核与自定义内核">发行版内核与自定义内核</h3><p>各大 Linux 发行版（如Ubuntu、Fedora）自带的内核都是预编译好的，通常会启用大部分常用功能，并把绝大多数驱动编译为模块，以便支持各种硬件。但如果你想深入学习或开发内核，还是需要自己编译内核，并选择合适的模块。</p><h3 id="配置工具">配置工具</h3><p>内核提供了多种配置工具：</p><ul><li><p><strong>文本命令行工具</strong><br /><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make config</span><br></pre></td></tr></table></figure> 逐项询问每个选项，适合有耐心的用户。</p></li><li><p><strong>基于 ncurses 的图形界面</strong><br /><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure> 推荐使用，界面友好，选项分门别类。</p></li><li><p><strong>基于 GTK+ 的图形界面</strong><br /><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make gconfig</span><br></pre></td></tr></table></figure> 适合喜欢图形界面的用户。</p></li></ul><p>这些工具会把配置选项分为不同类别（如“处理器类型与特性”），你可以浏览、修改各项配置。</p><h3 id="快速生成默认配置">快速生成默认配置</h3><p>如果你不想从零开始配置，可以用默认配置： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make defconfig</span><br></pre></td></tr></table></figure>这会生成一个适合你当前架构的默认配置（比如 i386 下据说是 Linus的配置），适合新手快速上手。之后可以再根据自己的硬件调整配置。</p><h3 id="配置文件的位置与管理">配置文件的位置与管理</h3><p>所有配置选项最终会保存在源码根目录下的 <code>.config</code>文件中。你也可以直接编辑这个文件（很多内核开发者都这么做），只需搜索并修改对应的配置项即可。</p><p>如果你用现有的 <code>.config</code>文件，或者升级到新内核后想沿用旧配置，可以用： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make oldconfig</span><br></pre></td></tr></table></figure>它会根据新内核的选项补全或更新你的配置。</p><h3 id="复制当前内核配置">复制当前内核配置</h3><p>如果当前内核启用了 <code>CONFIG_IKCONFIG_PROC</code>，你可以直接从<code>/proc/config.gz</code> 拷贝当前内核的配置： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zcat /proc/config.gz &gt; .config</span><br><span class="line">make oldconfig</span><br></pre></td></tr></table></figure>这样可以方便地克隆当前系统的内核配置。</p><h2 id="编译内核">编译内核</h2><p>配置好后，只需一条命令即可编译内核： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure> 自 2.6版本起，无需再手动运行 <code>make dep</code> 或分别编译bzImage、modules，默认的 Makefile 规则会自动处理所有依赖和构建流程。</p><h3id="降低编译输出噪音minimizing-build-noise">降低编译输出噪音（MinimizingBuild Noise）</h3><p>在编译内核时，终端会输出大量信息。为了减少这些“噪音”，但又能看到警告和错误，可以将<code>make</code> 的标准输出重定向到文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &gt; ../detritus</span><br></pre></td></tr></table></figure><p>如果需要查看详细输出，可以阅读该文件。由于警告和错误信息会输出到标准错误（stderr），通常你不需要关心标准输出。实际上，你可以直接把输出丢到“黑洞”：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &gt; /dev/null</span><br></pre></td></tr></table></figure><p>这样所有无用的输出都会被丢弃，只在终端显示警告和错误。</p><hr /><h3 id="并行编译spawning-multiple-build-jobs">并行编译（SpawningMultiple Build Jobs）</h3><p><code>make</code>支持并行编译，可以同时运行多个编译任务，大大加快多核系统上的编译速度。方法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -jN</span><br></pre></td></tr></table></figure><p>其中 <code>N</code>是并行任务数。通常建议每个处理器核心分配1~2个任务。例如，16核机器可以这样：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j32 &gt; /dev/null</span><br></pre></td></tr></table></figure><p>此外，使用如 <code>distcc</code> 或 <code>ccache</code>等工具也能进一步提升编译速度。</p><hr /><h2 id="安装新内核installing-the-new-kernel">安装新内核（Installing theNew Kernel）</h2><p>内核编译完成后，需要安装。安装方式依赖于你的硬件架构和引导程序（bootloader），请查阅对应引导程序的文档。</p><p><strong>以 x86 + grub 为例：</strong></p><ol type="1"><li>将 <code>arch/i386/boot/bzImage</code> 复制到<code>/boot</code>，并命名为如 <code>vmlinuz-version</code>。</li><li>编辑 <code>/boot/grub/grub.conf</code>，为新内核添加启动项。</li></ol><p><strong>如果使用 LILO：</strong></p><ol type="1"><li>编辑 <code>/etc/lilo.conf</code>，添加新内核项。</li><li>重新运行 <code>lilo</code> 命令。</li></ol><h3 id="安装模块installing-modules">安装模块（Installing Modules）</h3><p>模块的安装是自动且与架构无关的。只需以 root 权限运行： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make modules_install</span><br></pre></td></tr></table></figure>这会把所有编译好的模块安装到 <code>/lib/modules</code>下的对应目录。</p><h3 id="system.map-文件">System.map 文件</h3><p>编译过程中还会在源码根目录生成 <code>System.map</code>文件。它是一个符号查找表，用于将内核符号映射到内存地址，在调试时可以把地址转换为函数或变量名。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;内核源码相关&quot;&gt;内核源码相关&lt;/h2&gt;
&lt;h3 id=&quot;获取内核源码&quot;&gt;获取内核源码&lt;/h3&gt;
&lt;p&gt;当前的 Linux 源代码总是可以在 &lt;a
href=&quot;http://www.kernel.org&quot;&gt;http://www.kernel.org&lt;/a&gt;
</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基础 | 1. linux内核简介</title>
    <link href="https://mackz-maxw.github.io/2025/06/18/oper_sys0/"/>
    <id>https://mackz-maxw.github.io/2025/06/18/oper_sys0/</id>
    <published>2025-06-18T15:59:12.650Z</published>
    <updated>2025-06-23T20:33:15.573Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下课堂笔记，不然总是放在不知道哪个作业文件夹里找不到</p><h3 id="操作系统与内核概述">操作系统与内核概述</h3><p><strong>内核</strong>是操作系统的最核心部分，负责管理硬件资源（如CPU、内存、硬盘等），并为上层软件提供服务。内核运行在“内核空间”，拥有对硬件的完全控制权，而普通应用程序运行在“用户空间”，只能通过内核提供的接口访问硬件。</p><p>应用程序与内核的交互主要通过<strong>系统调用</strong>完成。比如：</p><ul><li>当你在 C 语言程序里调用 <code>printf("hello\n")</code>时，实际上发生了多层调用。<code>printf()</code>负责格式化和缓冲数据，最终会调用 <code>write()</code>函数，把数据写到终端。<code>write()</code> 是一个库函数，它最终会触发<code>write</code> 系统调用，由内核把数据真正输出到屏幕。</li><li>类似地，<code>open()</code> 库函数几乎只做一件事，就是调用<code>open</code> 系统调用，让内核帮你打开一个文件。</li><li>还有一些库函数，比如<code>strcpy()</code>，只是单纯地在内存中复制数据，根本不会和内核打交道。</li></ul><p><strong>简单来说：</strong> - 你写的应用程序通过库函数（如<code>printf()</code>、<code>open()</code>）间接或直接调用系统调用（如<code>write</code>、<code>open</code>），由内核完成实际的硬件操作。 -有些库函数（如<code>strcpy()</code>）只在用户空间工作，不需要内核参与。</p><p><strong>内核还负责处理中断</strong>。比如你敲键盘时，键盘控制器会发出中断信号，内核收到后会执行相应的中断处理程序，把你输入的内容读出来。</p><figure><img src="../images/oper_sys0.png" alt="操作系统结构图" /><figcaption aria-hidden="true">操作系统结构图</figcaption></figure><p>在任何给定时刻，每个处理器正在做以下三件事中的一件：</p><ul><li>在用户空间，在进程上下文中执行用户代码</li><li>在内核空间，在进程上下文中，代表特定进程执行操作（包括空闲进程）</li><li>在内核空间，在中断上下文中，不与任何进程关联，处理中断</li></ul><h3 id="linux-与经典-unix-内核设计">Linux 与经典 Unix 内核设计</h3><ul><li><strong>单一内核/宏内核（Monolithic Kernel）</strong><br />经典 Unix 和 Linux都采用单一内核设计。单一内核就是把所有核心功能（如进程管理、内存管理、文件系统、驱动等）都放在一个大程序里，在同一个内存空间中运行。这样做的好处是：<ul><li>内核内部各部分可以直接调用彼此的函数，通信效率高，性能好。</li><li>设计和实现相对简单。</li></ul></li><li><strong>微内核（Microkernel）</strong><br />微内核把内核功能拆分成多个独立的“服务器”，有的在内核空间，有的在用户空间。它们之间通过消息传递（IPC）通信。优点是：<ul><li>各部分相互隔离，一个崩溃不会影响其他部分，系统更稳定。</li><li>更容易替换和扩展功能。 缺点是：<br /></li><li>消息传递比直接函数调用慢，频繁切换上下文会影响性能。</li><li>实际上，很多微内核系统（如 WindowsNT、Mach）为了性能，后来又把大部分服务放回了内核空间。</li></ul></li><li><strong>Linux 的做法</strong><br />Linux是单一内核，但吸收了微内核的一些优点，比如模块化设计、支持内核线程、可以动态加载内核模块等。<ul><li>Linux 所有核心功能都在内核空间，通信用直接函数调用，性能高。</li><li>同时，Linux 也很灵活，可以按需加载或卸载功能模块。</li></ul></li></ul><p>Linux 虽然继承了 Unix 的理念和 API，但并不基于任何特定 Unix变体，因此可以灵活选择或创新最佳技术方案。</p><ul><li><strong>动态内核模块</strong>：Linux支持内核模块的动态加载和卸载，增强了灵活性和可扩展性。</li><li><strong>对称多处理器（SMP）支持</strong>：Linux 从早期就支持SMP，而许多传统 Unix 系统最初并不支持。</li><li><strong>抢占式内核</strong>：Linux内核支持抢占，允许内核任务被中断，提高了实时性和响应速度，而大多数传统Unix 内核不是抢占式的。</li><li><strong>线程与进程统一</strong>：Linux内核不区分线程和进程，所有进程本质上是一样的，只是有些进程共享资源。</li><li><strong>面向对象的设备模型</strong>：Linux采用了现代的设备管理方式，如设备类、热插拔和 sysfs。</li><li><strong>精简与创新</strong>：Linux有选择地实现功能，忽略了被认为设计不佳或无实际价值的传统 Unix 特性（如STREAMS）。</li><li><strong>开放与自由</strong>：Linux的功能集来源于开放的开发模式，只有经过充分论证、设计清晰、实现扎实的功能才会被采纳。</li></ul><h3 id="linux-内核版本">Linux 内核版本</h3><ul><li><strong>稳定版 (Stable)：</strong> 次版本号为<strong>偶数</strong>(如 2.4, 2.6, 4.18,5.10)。适合生产环境部署，主要更新是错误修复和新驱动。</li><li><strong>开发版 (Development)：</strong>次版本号为<strong>奇数</strong> (如 2.5,3.1)。代码快速变化，包含实验性功能，不稳定。</li><li><strong>版本号格式：</strong><code>主版本.次版本.修订版本[.稳定版本]</code> (如<code>2.6.30.1</code>)。<ul><li><code>主版本.次版本</code> 定义内核系列 (如 2.6)。</li><li><code>修订版本</code> 表示同一系列内的主要发布。</li><li><code>.稳定版本</code> (可选)表示在主要发布后的小更新，专注于关键错误修复。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;总结一下课堂笔记，不然总是放在不知道哪个作业文件夹里找不到&lt;/p&gt;
&lt;h3 id=&quot;操作系统与内核概述&quot;&gt;操作系统与内核概述&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;内核&lt;/strong&gt;是操作系统的最核心部分，负责管理硬件资源（如CPU、内存、硬盘等），并为上层软件提供服务。</summary>
      
    
    
    
    <category term="os basic" scheme="https://mackz-maxw.github.io/categories/os-basic/"/>
    
    
  </entry>
  
  <entry>
    <title>代码随想录 | 刷题-动态规划2</title>
    <link href="https://mackz-maxw.github.io/2025/06/17/kamacode29/"/>
    <id>https://mackz-maxw.github.io/2025/06/17/kamacode29/</id>
    <published>2025-06-18T00:46:52.955Z</published>
    <updated>2025-06-20T17:02:03.168Z</updated>
    
    <content type="html"><![CDATA[<h3 id="不同路径">62.不同路径</h3><p>想清楚要怎么推导每个格子，可以怎么推导 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m == <span class="number">1</span> || n == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="不同路径-ii">63. 不同路径 II</h3><h4 id="问题分析">问题分析</h4><ol type="1"><li><strong>起点<code>(0,0)</code>未特殊处理</strong>：<ul><li>当<code>i=0, j=0</code>时（起点），您的代码会进入<code>else</code>分支（因为不满足前三个条件）。</li><li>在<code>else</code>分支中，它计算<code>dp[i][j] = dp[i-1][j] + dp[i][j-1]</code>，但<code>i-1 = -1</code>、<code>j-1 = -1</code>（<strong>非法索引</strong>），导致未定义行为（崩溃或错误结果）。</li></ul></li><li><strong>边界条件不完整</strong>：<ul><li>当起点有障碍物时，虽能设为0，但后续计算仍可能依赖无效索引。</li><li>初始化<code>dp</code>为全1是冗余的，且可能掩盖问题（实际值会被覆盖）。</li></ul></li></ol><h4 id="修复后的代码">修复后的代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = obstacleGrid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = obstacleGrid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(obstacleGrid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][j] = dp[i][j<span class="number">-1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i][j<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="整数拆分-可跳过">343. 整数拆分 （可跳过）</h3><p>我直接用贪心法，辗转减去3来写了 动态规划思路如下：</p><ul><li>遍历 <span class="math inline">\(j\)</span>（<spanclass="math inline">\(1 \leq j &lt; i\)</span>），比较 <spanclass="math inline">\((i - j) \times j\)</span> 和 <spanclass="math inline">\(dp[i - j] \times j\)</span>，取最大值。</li><li><code>j * (i - j)</code> 是把整数拆分为两个数相乘。</li><li><code>j * dp[i - j]</code> 是把整数拆分为两个及以上的数相乘。</li><li>如果用<code>dp[i - j] * dp[j]</code>，则相当于强制把一个数拆成四份及以上。</li></ul><p>递推公式为：<code>dp[i] = max(&#123;dp[i], (i - j) * j, dp[i - j] * j&#125;);</code></p><p>为什么还要比较 <code>dp[i]</code> 呢？<br />因为每次计算 <code>dp[i]</code> 时，都要保证它是当前的最大值。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">3</span>)<span class="keyword">return</span> n<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> pd = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">4</span>)&#123;</span><br><span class="line">                pd = pd * <span class="number">4</span>;</span><br><span class="line">                n = <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                n = n - <span class="number">3</span>;</span><br><span class="line">                pd = pd * <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            pd = pd * n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="不同的二叉搜索树-可跳过">96.不同的二叉搜索树 （可跳过）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTrees</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)<span class="keyword">return</span> n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">// 方便计算</span></span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>; i&lt;=n ;i++)&#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j&lt;=i; j++)&#123;</span><br><span class="line">                cnt += dp[j<span class="number">-1</span>] * dp[i-j];</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;不同路径&quot;&gt;62.不同路径&lt;/h3&gt;
&lt;p&gt;想清楚要怎么推导每个格子，可以怎么推导 &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/sp</summary>
      
    
    
    
    <category term="leetcode" scheme="https://mackz-maxw.github.io/categories/leetcode/"/>
    
    
  </entry>
  
</feed>
